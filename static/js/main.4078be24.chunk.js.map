{"version":3,"sources":["constants/themes.constant.ts","constants/game.constant.ts","components/Header/Header.tsx","components/SectionHeader/SectionHeader.tsx","containers/Dashboard/Dashboard.tsx","components/ToDashboardButton/ToDashboardButton.tsx","components/RejoinRunningGameHint/RejoinRunningGameHint.tsx","containers/GameManual/GameManual.tsx","components/ScoringOptionsList/ScoringOptionsList.tsx","store/app.actions.ts","utils/general.utils.ts","utils/local-storage.utils.ts","utils/game.utils.ts","containers/GameResults/GameResults.tsx","components/ChipsArray/ChipsArray.tsx","containers/JoinGame/JoinGame.tsx","components/AddCustomCategory/AddCustomCategory.tsx","containers/NewGame/NewGame.tsx","models/pub-nub-data.model.ts","components/AdminPanel/AdminPanel.tsx","components/LetterAnimation/LetterAnimation.tsx","components/LoadingScreen/LoadingScreen.tsx","components/GameRoundChip/GameRoundChip.tsx","components/PhaseEvaluateRound/PhaseEvaluateRound.tsx","components/PhaseFillOutTextfields/PhaseFillOutTextfields.tsx","components/JoinGameLink/JoinGameLink.tsx","components/PlayerList/PlayerList.tsx","components/PhaseWaitingToStart/PhaseWaitingToStart.tsx","components/PubNubEventHandler/PubNubEventHandler.tsx","config/pubnub.config.ts","containers/PlayGame/PlayGame.tsx","App.tsx","constants/app.constant.ts","serviceWorker.ts","store/app.reducer.ts","index.tsx"],"names":["APP_THEME_ID","GamePhase","AppThemes","id","green","animationBackgroundColor","className","displayName","muiTheme","createMuiTheme","palette","primary","secondary","red","style","background","process","blue","deepOrange","orange","indigo","pink","purple","amber","black","blueGrey","Header","state","anchorEl","version","handleManualButtonClick","props","history","push","handleThemePickerClick","event","setState","currentTarget","handleThemePickerMenuClose","handleThemePickerMenuItemClick","selectedTheme","switchTheme","playerNameParagraph","this","playerName","theme","href","target","rel","aria-label","IconButton","size","title","onClick","fontSize","aria-controls","aria-haspopup","Menu","keepMounted","open","Boolean","onClose","map","item","index","MenuItem","key","packageJson","Component","withRouter","connect","playerInfo","name","SectionHeader","Fragment","text","showDivider","Divider","Dashboard","rejoinGameElement","Link","component","RouterLink","to","gameId","src","alt","ToDashboardButton","Button","type","color","variant","startIcon","onReturnToDashboard","STANDARD_ALPHABET","STANDARD_EXCLUDED_LETTERS","STANDARD_CATEGORIES","AVAILABLE_CATEGORIES","RejoinRunningGameHintContext","GAME_OPTION_LABEL","checkForDuplicates","creativeAnswersExtraPoints","onlyPlayerWithValidAnswer","GameManual","returnToDashboard","ScoringOptionsList","rules","setDataForNewGame","payload","convertDateToUnixTimestamp","dateToConvert","getTime","convertCollectionToMap","collectionToConvert","dataAsMap","Map","Object","keys","forEach","set","convertMapToCollection","mapToConvert","dataAsCollection","data","setAppThemeIdInLocalStorage","appTheme","localStorage","setItem","setPlayerInfoInLocalStorage","JSON","stringify","setRunningGameInfoInLocalStorage","getRunningGameConfigFromLocalStorage","storedData","getItem","parse","setRunningGameConfigInLocalStorage","getRunningGameRoundFromLocalStorage","round","setRunningGameRoundInLocalStorage","removeAllDataOfRunningGameFromLocalStorage","removeItem","i","getRandomnLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToRandomnlySelectFrom","randomnLetter","randomnItem","filter","letter","getPlayersInAlphabeticalOrder","players","Array","from","sort","a","b","toLowerCase","getEmptyRoundInputs","numberOfInputs","value","points","star","valid","fill","markEmptyPlayerInputsAsInvalid","playerInputs","input","trim","createGameRoundEvaluation","categories","gameRoundEvaluation","evaluatedPlayer","evaluationsForAllCategories","_","evaluationForOneCategory","evaluatingPlayer","calculatePointsForRound","scoringOptions","playerId","next","playerInputsOfPlayer1","get","categoryIndex","calculatePointsForCategory","isOnlyPlayerWithValidAnswer","isDuplicateOfOtherPlayersInput","otherPlayersIds","isOnlyPlayer","playerInputText","some","otherPlayersInput","getMinNumberOfInvalids","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","reduce","total","shouldUserRespondToRequestGameDataMessage","user","requestingPlayerId","isAdmin","requestingPlayerInfo","playersWithoutRequestingPlayer","cloneDeep","delete","compressGameRoundEvaluation","sortedPlayers","evaluationsAsArrays","booleanArray","player","compressedGameRoundEvaluation","decompressGameRoundEvaluation","compressedData","evaluatedPlayerIndex","playerData","playerInputEvaluation","evaluatingPlayerIndex","restoreGameRoundsOfRunningGameFromLocalStorage","numberOfRoundsToRestore","setPointsAndValidityOfPlayerInputs","minNumberOfInvalids","GameResults","getResultIcon","isWinner","onResetAppState","gameConfig","mostPoints","Math","max","result","List","ListItem","ListItemIcon","ListItemText","singular","plural","numberOfRounds","letters","join","dispatch","ChipType","RejoinRunningGameHint","condition","context","hintText","JoinGame","idInput","nameInput","validateInputs","handleInputChange","handleSubmit","preventDefault","joinGame","idCreationTimestamp","playerIdCreationTimestamp","Date","isPlayerAdmin","onSetGameData","isRejoiningGame","joinGameForm","onSubmit","noValidate","autoComplete","TextField","label","onChange","fullWidth","required","autoFocus","error","joingame","query","URLSearchParams","location","search","has","prevProps","useStyles","makeStyles","createStyles","lessPadding","padding","dialog","minWidth","CustomCategoryDialog","classes","useState","categoryInput","setCategoryInput","setValidateInputs","handleClose","Dialog","stopPropagation","trimmedCategoryInput","DialogContent","DialogContentText","margin","DialogActions","AddCustomCategory","setOpen","Tooltip","placement","newCategory","addCustomCategory","CategoryArray","CheckboxName","root","display","justifyContent","flexWrap","spacing","chip","chipIcon","backgroundColor","ChipsArray","chipsArray","Chip","chipType","undefined","icon","removeChip","children","PubNubMessageType","NewGame","availableCategories","isSnackbarOpen","lettersToExclude","numberOfRoundsInput","selectedCategories","snackBarMessage","handleNameInputChange","handleNumberOfRoundsInputChange","handleGameOptionChange","checked","handleLetterToExcludeChange","newLettersToExclude","l","updateCategoryArrays","chipToRemove","removeFromArray","newSelectedCategories","newAvailableCategories","selected","category","isReadyToStartGame","startNewGame","showSnackBar","message","handleSnackBarClose","uuidv4","xor","numberOfRoundsInputLabel","newGameForm","inputProps","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","FormGroup","FormControlLabel","control","Checkbox","disabled","row","letterIndex","includes","available","newgame","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","adminPanel","position","top","right","menuButton","dialogContent","maxWidth","dialogContentText","KickUserDialog","playerToBeKicked","AdminPanel","setAnchorEl","openDialog","setOpenDialog","setPlayerToBeKicked","otherPlayers","playerIndex","selectedPlayer","kickPlayer","Particle","x","y","radius","ctx","save","translate","fillStyle","fillRect","restore","ParticleAlphabet","callbackWhenAnimationDone","canvas","currentPos","width","height","particlePositions","particles","tmpCanvas","tmpCtx","time","counter","myInterval","activeTheme","animate","requestAnimationFrame","animateParticles","document","querySelector","getContext","mainElement","find","classList","contains","offsetWidth","offsetHeight","createElement","setInterval","changeLetter","getPixels","clearInterval","makeParticles","num","random","keyword","window","innerWidth","innerHeight","font","fillText","measureText","idata","getImageData","buffer32","Uint32Array","buffer","p","pPos","indexOf","draw","LetterAnimation","lettersToUse","letterToUnveil","lettersForAnimation","LETTER_ANIMATION_LETTER_COUNT","useEffect","init","loadingScreen","left","loadingSpinner","transform","loadingSpinnerSize","LoadingScreen","CircularProgress","centerContent","marginTop","borderRadius","boxShadow","GameRoundChip","currentLetter","currentRound","StyledBadge","withStyles","badge","border","paper","Badge","PhaseEvaluateRound","playersThatFinishedEvaluation","hasFinishedEvaluation","setHasFinishedEvaluation","currentRoundEvaluation","finishedRound","notFinishedPlayers","createEvaluationButton","indexInSortedPlayers","evaluationForCategory","isInputAcceptedByUser","rejectingPlayers","getRejectingPlayers","tooltipText","hasPlayerTypedText","evaluationButtonForTypedText","evaluatedPlayerId","currentEvaluation","updateEvaluationOfPlayerInput","handleEvaluationButtonClick","badgeContent","autoRejectIconForMissingText","createSearchLink","playerInput","searchLink","encodeURIComponent","evaluatedPlayerInput","isInputValid","InputProps","startAdornment","InputAdornment","endAdornment","playerEvaluationElements","sendEvaluationFinishedMessage","PhaseFillOutTextfields","gameRoundInputs","newGameRoundInputs","updateCurrentRoundInputs","sendRoundFinishedMessage","PubNubCurrentRoundInputsMessage","currentRoundInputs","PubNubEvaluationOfPlayerInputMessage","evaluationOfPlayerInput","PubNubKickPlayerMessage","PubNubDataForCurrentGameMessage","dataForCurrentGame","JoinGameLink","url","joinGameLink","slice","OutlinedInput","element","setAttribute","body","appendChild","select","execCommand","removeChild","copyToClipboard","PlayerList","PhaseWaitingToStart","waitForGameStartElement","sendMessage","startGame","React","memo","pubNubClient","usePubNub","setUserState","newUserState","channels","gameChannel","getHereNowData","hereNow","includeUUIDs","includeState","response","console","log","totalOccupancy","navigateToDashboard","dataForGameChannel","pubNubUserStates","occupants","occupant","userState","addPlayers","pubNubListeners","messageEvent","processPubNubMessage","presence","presenceEvent","action","status","statusEvent","channel","messages","setTimeout","addListener","subscribe","withPresence","removeListener","unsubscribeAll","PUBNUB_KEYS","require","PUBNUB_CONFIG","publishKey","subscribeKey","uuid","ssl","PlayGame","currentPhase","waitingToStart","showLetterAnimation","showLoadingScreen","publish","storeInHistory","ttl","newPlayers","newPlayer","roundFinished","stopRoundAndSendInputs","addPlayerInputForFinishedRound","publisher","processEvaluationOfPlayerInput","evaluationFinished","countPlayerAsEvaluationFinished","removePlayerFromGame","requestGameData","sendDataForCurrentGame","sendKickPlayerMessage","processDataForCurrentGame","fillOutTextfields","newCurrentRoundInputs","toPubNubMessage","playerInputsForFinishedRound","roundIndex","evaluateRound","newEvaluation","evaluatingPlayerId","playerInputEvaluations","processEvaluationsAndStartNextRoundOrFinishGame","onSetDataOfFinishedGame","Pubnub","currentPhaseElement","letterAnimationElement","client","setDataOfFinishedGame","backspaceDisabler","App","switchThemeHandler","newTheme","ThemeProvider","basename","path","exact","disable","appThemeId","storedPlayerInfo","getPlayerInfoFromLocalStorage","nowTimestamp","onSetStoredPlayerInfo","runningGameInfo","getRunningGameInfoFromLocalStorage","onSetStoredRunningGameInfo","setStoredPlayerInfo","setStoredRunningGameInfo","hostname","match","initialState","appStore","createStore","storedRunningGameInfo","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4078be24.chunk.js","sourcesContent":["import green from '@material-ui/core/colors/green';\r\nimport red from '@material-ui/core/colors/red';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport deepOrange from '@material-ui/core/colors/deepOrange';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport { createMuiTheme, Theme } from '@material-ui/core/styles';\r\nimport CSS from 'csstype';\r\n\r\nexport enum APP_THEME_ID {\r\n    green = 'green',\r\n    blue = 'blue',\r\n    orange = 'orange',\r\n    pink = 'pink',\r\n    black = 'black'\r\n}\r\n\r\nexport interface AppTheme {\r\n    id: APP_THEME_ID;\r\n    /** The background color used by the LetterAnimation component */\r\n    animationBackgroundColor: string;\r\n    /** The name of the CSS class that is applied to the header and the main element */\r\n    className: string;\r\n    /** The text displayed in the header's color picker dropdown */\r\n    displayName: string;\r\n    muiTheme: Theme;\r\n    style: CSS.Properties;\r\n}\r\n\r\nexport const AppThemes: AppTheme[] = [\r\n    {\r\n        id: APP_THEME_ID.green,\r\n        animationBackgroundColor: 'rgb(31, 121, 52)',\r\n        className: 'green-theme',\r\n        displayName: 'Grün/Wald',\r\n        muiTheme: createMuiTheme({ palette: { primary: green, secondary: red } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(60, 143, 80, 0.3), rgba(60, 143, 80, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/leaves-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.blue,\r\n        animationBackgroundColor: 'rgb(9, 100, 204)',\r\n        className: 'blue-theme',\r\n        displayName: 'Blau/Meer',\r\n        muiTheme: createMuiTheme({ palette: { primary: blue, secondary: deepOrange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/sea-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.orange,\r\n        animationBackgroundColor: 'rgb(187, 138, 5)',\r\n        className: 'orange-theme',\r\n        displayName: 'Orange/Strand',\r\n        muiTheme: createMuiTheme({ palette: { primary: orange, secondary: indigo } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(241, 179, 8, 0.3), rgba(240, 188, 47, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/beach-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.pink,\r\n        animationBackgroundColor: 'rgb(167, 34, 207)',\r\n        className: 'pink-theme',\r\n        displayName: 'Pink/Musik',\r\n        muiTheme: createMuiTheme({ palette: { primary: purple, secondary: amber } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(133, 14, 103, 0.3), rgba(133, 14, 103, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/music-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.black,\r\n        animationBackgroundColor: 'rgb(0, 0, 0)',\r\n        className: 'black-theme',\r\n        displayName: 'Schwarz/Goth',\r\n        muiTheme: createMuiTheme({ palette: { primary: blueGrey, secondary: orange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(0, 51, 153, 0.1), rgba(0, 51, 153, 0.1)),\r\n                url('${process.env.PUBLIC_URL}/assets/halloween-pattern.jpg')`\r\n        }\r\n    },\r\n]\r\n","export const DEFAULT_NUMBER_OF_ROUNDS = 3;\r\nexport const MIN_NUMBER_OF_ROUNDS = 1;\r\nexport const MAX_NUMBER_OF_ROUNDS = 15;\r\n\r\nexport const MIN_NUMBER_OF_CATEGORIES = 3;\r\n\r\nexport const STANDARD_ALPHABET = [\r\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\r\n    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\r\n];\r\nexport const STANDARD_EXCLUDED_LETTERS = ['Q', 'X', 'Y']\r\n\r\nexport const STANDARD_CATEGORIES = ['Stadt', 'Land', 'Fluss/Gewässer'];\r\nexport const AVAILABLE_CATEGORIES = [\r\n    'Band/Musiker',\r\n    'Berg/Gebirge',\r\n    'Beruf',\r\n    'Berühmte Person',\r\n    'Buchtitel',\r\n    'Chemisches Element',\r\n    'Dinge die man jeden Tag macht',\r\n    'Etwas Eckiges',\r\n    'Etwas Rundes',\r\n    'Fiktiver Charakter',\r\n    'Film/Serie',\r\n    'Getränk',\r\n    'Grund für eine Verspätung',\r\n    'Hobby',\r\n    'In Zeiten des Corona-Lockdowns verboten',\r\n    'Könnte ein Trump-Tweet sein',\r\n    'Körperteil',\r\n    'Krankheit',\r\n    'Laster',\r\n    'Marke',\r\n    'Mordwaffe',\r\n    'Pflanze',\r\n    'Pizzasorte',\r\n    'Porno-Künstlername',\r\n    'Religion',\r\n    'Scheidungsgrund',\r\n    'Schimpfwort',\r\n    'See/Meer',\r\n    'Sehenswürdigkeit',\r\n    'Sex (Stellung, Synonym)',\r\n    'Speise',\r\n    'Tier',\r\n    'Title of your Sex Tape',\r\n    'Unnötige Superkraft',\r\n    'Videospiel',\r\n    'Was bei einer Zoom-Konferenz schiefgehen kann',\r\n    'Werkzeug',\r\n    'Wort in einer Fremdsprache'\r\n];\r\n\r\nexport enum GamePhase {\r\n    waitingToStart = 'waitingToStart',\r\n    fillOutTextfields = 'fillOutTextfields',\r\n    evaluateRound = 'evaluateRound'\r\n}\r\n\r\nexport const MIN_NUMBER_OF_PLAYERS = 2;\r\n\r\nexport const LETTER_ANIMATION_LETTER_COUNT = 5;\r\nexport const LETTER_ANIMATION_REDRAW_SPEED = 800;\r\n\r\nexport const SAME_WORD_POINTS = 5;\r\nexport const STANDARD_POINTS = 10;\r\nexport const ONLY_ANSWER_POINTS = 20;\r\n/**\r\n * Extra points for answers that are deemed especially creative or funny by other players.\r\n * Are only awarded if the corresponding scoring option was selected.\r\n */\r\nexport const EXTRA_POINTS = 5;\r\n\r\nexport const GAME_OPTION_LABEL = {\r\n    checkForDuplicates: `Wenn zwei oder mehr Spieler einen identischen Begriff in einer Kategorie eintragen,\r\n        so zählt dieser nur ${SAME_WORD_POINTS} statt ${STANDARD_POINTS} Punkte.`,\r\n    creativeAnswersExtraPoints: `Von Mitspielern als besonders kreativ oder lustig ausgezeichnete Begriffe bringen ${EXTRA_POINTS} Extrapunkte.`,\r\n    onlyPlayerWithValidAnswer: `Wenn ein Spieler als einziger einen zulässigen Begriff in einer Kategorie\r\n        einträgt, so zählt dieser Begriff ${ONLY_ANSWER_POINTS} statt ${STANDARD_POINTS} Punkte.`\r\n}\r\n","import './Header.css';\r\nimport { IconButton, Menu, MenuItem } from '@material-ui/core';\r\nimport BrushIcon from '@material-ui/icons/Brush';\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport packageJson from '../../../package.json';\r\nimport { AppTheme, AppThemes } from '../../constants/themes.constant';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\n\r\ninterface HeaderPropsFromStore {\r\n    playerName: string | null;\r\n}\r\ninterface HeaderProps extends HeaderPropsFromStore, RouteComponentProps {\r\n    switchTheme: (newTheme: AppTheme) => any;\r\n    theme: AppTheme;\r\n}\r\ninterface HeaderState {\r\n    anchorEl: EventTarget | null;\r\n    version: string;\r\n}\r\n\r\nexport class Header extends Component<HeaderProps, HeaderState> {\r\n    public state = {\r\n        anchorEl: null,\r\n        version: ''\r\n    };\r\n\r\n    public render() {\r\n        const playerNameParagraph = (\r\n            <p>Spieler: {this.props.playerName ? this.props.playerName : '-'}</p>\r\n        );\r\n        return (\r\n            <header className={'app-header ' + this.props.theme.className}>\r\n                <h1>Stadt-Land-Fluss</h1>\r\n                {playerNameParagraph}\r\n                <div className=\"about-section\">\r\n                    <p>v{this.state.version}</p>\r\n                    <a\r\n                        href=\"https://github.com/alexlehner86\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        aria-label=\"Mehr über den Autor erfahren (öffnet neues Fenster)\"\r\n                    >Autor</a>\r\n                </div>\r\n                <div className=\"icon-button-wrapper\">\r\n                    <IconButton\r\n                        className=\"slf-icon-button\"\r\n                        size=\"small\"\r\n                        title=\"Spielanleitung\"\r\n                        aria-label=\"Spielanleitung\"\r\n                        onClick={this.handleManualButtonClick}\r\n                    >\r\n                        <MenuBookIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                    <IconButton\r\n                        className=\"slf-icon-button\"\r\n                        size=\"small\"\r\n                        title=\"Theme ändern\"\r\n                        aria-label=\"Theme ändern\"\r\n                        aria-controls=\"theme-picker-menu\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={this.handleThemePickerClick}\r\n                    >\r\n                        <BrushIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                    <Menu\r\n                        id=\"theme-picker-menu\"\r\n                        anchorEl={this.state.anchorEl}\r\n                        keepMounted\r\n                        open={Boolean(this.state.anchorEl)}\r\n                        onClose={this.handleThemePickerMenuClose}\r\n                    >\r\n                        {AppThemes.map((item, index) => (\r\n                            <MenuItem\r\n                                key={'theme-picker-menu-item-' + index}\r\n                                onClick={() => this.handleThemePickerMenuItemClick(item)}\r\n                            >{item.displayName}</MenuItem>\r\n                        ))}\r\n                    </Menu>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({ version: packageJson.version });\r\n    }\r\n\r\n    private handleManualButtonClick = () => {\r\n        this.props.history.push('/manual');\r\n    }\r\n\r\n    private handleThemePickerClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    private handleThemePickerMenuClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    private handleThemePickerMenuItemClick = (selectedTheme: AppTheme) => {\r\n        this.setState({ anchorEl: null });\r\n        this.props.switchTheme(selectedTheme);\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): HeaderPropsFromStore => {\r\n    return {\r\n        playerName: state.playerInfo ? state.playerInfo.name : ''\r\n    };\r\n}\r\nexport default withRouter(connect(mapStateToProps)(Header));\r\n","import './SectionHeader.css';\r\nimport { Divider } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ninterface SectionHeaderProps {\r\n    showDivider: boolean;\r\n    text: string;\r\n}\r\n\r\nexport const SectionHeader: React.FunctionComponent<SectionHeaderProps> = props => (\r\n    <React.Fragment>\r\n        <h2 className=\"section-header\">{props.text}</h2>\r\n        {props.showDivider ? <Divider /> : null}\r\n    </React.Fragment>\r\n);\r\n","import './Dashboard.css';\r\nimport Link from '@material-ui/core/Link';\r\nimport React, { Component } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\r\n\r\ninterface DashboardPropsFromStore {\r\n    gameId: string | null;\r\n}\r\nclass Dashboard extends Component<DashboardPropsFromStore> {\r\n    public render() {\r\n        const rejoinGameElement = (\r\n            <Link component={RouterLink} to=\"/play\" className=\"rejoin-game-link\">\r\n                <DirectionsRunIcon />\r\n                Zurück ins laufende Spiel\r\n            </Link>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"dashboard-container material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Dashboard\"></SectionHeader>\r\n                    <div className=\"link-container\">\r\n                        {this.props.gameId ? rejoinGameElement : null}\r\n                        <Link component={RouterLink} to=\"/newgame\">Neues Spiel</Link>\r\n                        <Link component={RouterLink} to=\"/joingame\">Spiel beitreten</Link>\r\n                    </div>\r\n                    <img\r\n                        src={`${process.env.PUBLIC_URL}/assets/city-country-river.jpg`}\r\n                        alt=\"Stadt, Land, Fluss\"\r\n                        className=\"dashboard-slf-image\"\r\n                    />\r\n                    <div className=\"img-copyright\">\r\n                        <h3>Credits/Bilder</h3>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/830131-river-city-landscape-with-buildings-hills-and-trees\" target=\"_blank\" rel=\"noopener noreferrer\">Homepage/Stadt-Land-Fluss by pikgura – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/276920-abstract-seamless-pattern-with-tropical-leaves\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Grün/Wald by NadiaGrapes – www.vecteezy.com</a>\r\n                        <a href=\"https://www.freepik.com/free-photos-vectors/background\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Blau/Meer by macrovector – www.freepik.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/460735-seashell-sand-seamless-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Orange/Strand by Macrovector – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/454258-music-seamless\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Pink/Musik by Macrovector – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/662038-cat-and-bat-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Schwarz/Goth by angyee – www.vecteezy.com</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): DashboardPropsFromStore => {\r\n    return {\r\n        gameId: state.gameId\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Dashboard);\r\n","import './ToDashboardButton.css';\r\nimport { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton: React.FunctionComponent<ToDashboardButtonProps> = props => {\r\n    return (\r\n        <div className=\"button-wrapper to-dashboard-button\">\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDashboardButton;\r\n","import './RejoinRunningGameHint.css';\r\nimport { Link } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nexport enum RejoinRunningGameHintContext {\r\n    newgame = 'newgame',\r\n    joingame = 'joingame'\r\n};\r\n\r\ninterface RejoinRunningGameHintProps {\r\n    context: RejoinRunningGameHintContext;\r\n}\r\nexport const RejoinRunningGameHint: React.FunctionComponent<RejoinRunningGameHintProps> = props => {\r\n    const condition = props.context === 'newgame' ? 'ein neues Spiel erstellst' : 'einem anderen Spiel beitrittst';\r\n    const hintText = `Du nimmst bereits an einem laufenden Spiel teil. Wenn du ${condition},\r\n    kannst du nicht mehr in das alte Spiel zurückkehren!`;\r\n\r\n    return (\r\n        <div className=\"material-card-style\">\r\n            <p className=\"rejoin-running-game-hint-text\">\r\n                <span className=\"rejoin-running-game-hint-highlighted\">Achtung: </span>\r\n                {hintText}\r\n            </p>\r\n            <Link component={RouterLink} to=\"/play\" className=\"bold-text\">⇒ Zurück ins laufende Spiel</Link>\r\n        </div>\r\n    );\r\n}\r\n","import './GameManual.css';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ThumbDownRoundedIcon from '@material-ui/icons/ThumbDownRounded';\r\nimport React, { Component } from 'react';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { GAME_OPTION_LABEL } from '../../constants/game.constant';\r\n\r\nclass GameManual extends Component<RouteComponentProps> {\r\n    public render() {\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"dashboard-container material-card-style slf-game-manual\">\r\n                    <SectionHeader showDivider={true} text=\"Spielanleitung\"></SectionHeader>\r\n                    <p>\r\n                        Willkommen bei <span>Stadt-Land-Fluss (MALEX-Edition)</span>, einer modernen Version des{' '}\r\n                        <a\r\n                            href=\"https://de.wikipedia.org/wiki/Stadt,_Land,_Fluss\"\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >Spiele-Klassikers</a>\r\n                        {' '}mit neuen, lustigen Kategorien.\r\n                    </p>\r\n                    <h3>Allgemeines</h3>\r\n                    <p>\r\n                        Auf der Startseite kann man über <span>Neues Spiel</span> ein neues Spiel erstellen bzw. über <span>Spiel\r\n                        beitreten</span> einem bereits erstellten Spiel beitreten (siehe unten). Die Website bietet fünf verschiedene\r\n                        Themes zur Auswahl. Das aktuelle Theme kann über den Pinsel-Button rechts im Header geändert werden. Die\r\n                        Theme-Auswahl des Nutzers sowie der zuletzt gewählte Spielername wird im{' '}\r\n                        <a\r\n                            href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\"\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >Local Storage</a>\r\n                        {' '}des Browsers gespeichert.\r\n                    </p>\r\n                    <h3>Neues Spiel</h3>\r\n                    <p>\r\n                        Um ein neues Spiel zu erstellen, muss der Nutzer einen Spielernamen eingeben, die Anzahl der zu spielenden\r\n                        Runden festlegen und mindestens drei Kategorien auswählen. Es stehen 40 vordefinierte Kategorien zur Auswahl,\r\n                        darunter Klassiker wie <span>Stadt</span>, <span>Land</span> und <span>Fluss/Gewässer</span>, jedoch auch\r\n                        neue, lustige Kategorien wie <span>Könnte ein Trump-Tweet sein</span>, <span>Scheidungsgrund</span> oder <span>\r\n                        Unnötige Superkraft</span>. Über den <AddCircleOutlineIcon fontSize=\"small\" className=\"inline-material-icon\" />\r\n                        -Button am Ende der Kategorien-Liste lässt\r\n                        sich auch jede beliebige, weitere Kategorie hinzufügen und für das Spiel auswählen.\r\n                    </p>\r\n                    <p>\r\n                        Im Bereich <span>Weitere Optionen</span> können optional weitere Einstellungen vorgenommen werden.\r\n                        Der Nutzer kann bestimmen, welche Buchstaben ausgeschlossen werden sollen. Standardmäßig sind hier\r\n                        Q, X und Y ausgewählt. Weiters stehen drei zusätzliche <span>Regeln für die Punktevergabe</span> zur\r\n                        Auswahl, von denen die ersten beiden vorausgewählt sind:\r\n                    </p>\r\n                    <ul>\r\n                        <li>{GAME_OPTION_LABEL.checkForDuplicates}</li>\r\n                        <li>{GAME_OPTION_LABEL.onlyPlayerWithValidAnswer}</li>\r\n                        <li>{GAME_OPTION_LABEL.creativeAnswersExtraPoints}</li>\r\n                    </ul>\r\n                    <p>\r\n                        Nach einem Klick auf <span>Spiel erstellen</span> gelangt der Nutzer zur Spiel-Übersicht, wo alle Settings\r\n                        für das erstellte Spiel sowie die bisher dem Spiel beigetretenen Mitspieler sichtbar sind. Zu Beginn ist nur der\r\n                        Nutzer, der das Spiel erstellt hat, als Administrator in der Mitspieler-Liste sichtbar. Es müssen mindestens zwei\r\n                        Spieler an einem Spiel teilnehmen, damit dieses starten kann. Unten auf der Seite wird dem Administrator ein Link\r\n                        zum Teilen mit Freunden angeboten. Ein Klick auf den <FileCopyIcon fontSize=\"small\" className=\"inline-material-icon\" />\r\n                        -Button rechts vom Link kopiert diesen in die Zwischenablage. Über diesen Link gelangen andere Mitspieler direkt\r\n                        zur <span>Spiel beitreten</span>-Seite, wo das Feld Spiel-ID bereits vorausgefüllt wird.\r\n                    </p>\r\n                    <h3>Spiel beitreten</h3>\r\n                    <p>\r\n                        Um einem bereits erstellten Spiel beizutreten, muss der Nutzer einen Spielernamen sowie die Spiel-ID eingeben.\r\n                        Die Spiel-ID erhält der Nutzer von einem anderen Mitspieler bzw. sie wird von der Website automatisch in das\r\n                        Feld eingetragen, wenn der Nutzer dem Link des Administrators gefolgt ist.\r\n                    </p>\r\n                    <h3>Spielablauf</h3>\r\n                    <p>\r\n                        Nachdem der Spiel-Administrator das Spiel gestartet hat, läuft jede Runde folgendermaßen ab:\r\n                    </p>\r\n                    <ol>\r\n                        <li>Eine kurze Animation offenbart den Buchstaben für die neue Runde.</li>\r\n                        <li>\r\n                            Die Runde startet: Jeder Spieler sieht eine Liste an Eingabefeldern, eines pro Kategorie,\r\n                            zum Eintragen der Begriffe bzw. Phrasen.\r\n                        </li>\r\n                        <li>\r\n                            Abhängig vom gewählten Spielmodus endet die Runde, sobald der erste Spieler auf den Abschicken-Button\r\n                            rechts unten auf der Seite geklickt hat oder wenn die festgelegte Rundendauer abgelaufen ist.\r\n                        </li>\r\n                        <li>\r\n                            Nachdem die Runde beendet ist, wird jedem Spieler eine Übersicht aller Begriffe aller Spieler pro\r\n                            Kategorie angezeigt. Grundsätzlich zählt ein gültiger Begriff 10 Punkte, außer die gewählten Regeln besagen\r\n                            etwas anderes (siehe oben). Falls ein Spieler in ein Feld nichts eingetragen hat, wird dieses automatisch\r\n                            als 0 Punkte gewertet. Über den <ThumbDownRoundedIcon fontSize=\"small\" className=\"inline-material-icon\" />-Button\r\n                            können die Spieler konkrete Antworten ablehnen. Abhängig von der Spieleranzahl führt dies dazu, dass\r\n                            der jeweilige Spieler keine Punkte für die Antwort erhält. Bei zwei bis drei Spielern reicht die Ablehnung\r\n                            durch einen Mitspieler aus. Bei mehr als drei Spielern müssen mindesten zwei Spieler eine Antwort ablehnen.\r\n                            Die Ablehnung einer Antwort kann durch erneutes Klicken auf den Button wieder zurückgezogen werden.\r\n                        </li>\r\n                        <li>\r\n                            Über den Bestätigen-Button rechts unten auf der Seite muss ein Spieler signalisieren, dass sie oder er\r\n                            mit der Analyse der Antworten fertig und bereit für die nächste Runde ist. Erst wenn alle Spieler den\r\n                            Button geklickt haben, startet die nächste Runde (siehe Schritt 1) bzw. endet das Spiel.\r\n                        </li>\r\n                    </ol>\r\n                    <p>\r\n                        Hinweis: Falls ein Mitspieler aus irgendeinem Grund (Browserabsturz, Akku leer etc.) aus dem Spiel fliegt, kann\r\n                        sie oder er über den <span>Zurück ins laufende Spiel-Button</span> wieder ins Spiel zurückkehren. Dieser findet\r\n                        sich auf der Startseite. Darüber hinaus hat der Administrator in einem laufenden Spiel die Möglichkeit, über\r\n                        den <SettingsIcon fontSize=\"small\" className=\"inline-material-icon\" />-Button (rechts oben, unterhalb des Headers)\r\n                        andere Spieler aus dem Spiel zu werfen. Natürlich nur in Notfällen ;)\r\n                    </p>\r\n                    <h3>Spielende</h3>\r\n                    <p>\r\n                        Am Ende des Spiels gelangt der Nutzer auf die <span>Ergebnisseite</span>, wo ein Ranking der Mitspieler nach\r\n                        erzielten Punkten sowie die Details zum Spiel (Buchstaben, Anzahl Runden, Kategorien etc.) dargestellt werden.\r\n                    </p>\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nexport default GameManual;\r\n","import React from 'react';\r\nimport { GAME_OPTION_LABEL } from '../../constants/game.constant';\r\nimport { GameConfigScoringOptions } from '../../models/game.interface';\r\n\r\ninterface ScoringOptionsListProps {\r\n    rules: GameConfigScoringOptions;\r\n}\r\n\r\nconst ScoringOptionsList: React.FunctionComponent<ScoringOptionsListProps> = props => {\r\n    const { rules } = props;\r\n    const createFurtherOptionsElement = (): JSX.Element => (\r\n        <React.Fragment>\r\n            <p>Regeln für Punktevergabe:</p>\r\n            <ul>\r\n                {rules.checkForDuplicates ? <li>{GAME_OPTION_LABEL.checkForDuplicates}</li> : null}\r\n                {rules.onlyPlayerWithValidAnswer ? <li>{GAME_OPTION_LABEL.onlyPlayerWithValidAnswer}</li> : null}\r\n                {rules.creativeAnswersExtraPoints ? <li>{GAME_OPTION_LABEL.creativeAnswersExtraPoints}</li> : null}\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n    if (rules.checkForDuplicates || rules.onlyPlayerWithValidAnswer || rules.creativeAnswersExtraPoints) {\r\n        return createFurtherOptionsElement();\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default ScoringOptionsList;\r\n","import { Action } from 'redux';\r\nimport { GameConfig, GameRound, StoredRunningGameInfo } from '../models/game.interface';\r\nimport { PlayerInfo, StoredPlayerInfo } from './../models/player.interface';\r\nexport const SET_STORED_PLAYER_INFO = 'SET_STORED_PLAYER_INFO';\r\nexport const SET_STORED_RUNNING_GAME_INFO = 'SET_STORED_RUNNING_GAME_INFO';\r\nexport const SET_DATA_FOR_NEW_GAME = 'SET_DATA_FOR_NEW_GAME';\r\nexport const SET_DATA_OF_FINISHED_GAME = 'SET_DATA_OF_FINISHED_GAME';\r\nexport const RESET_APP_STATE = 'RESET_APP_STATE';\r\n\r\nexport interface SetStoredPlayerInfoAction extends Action {\r\n    payload: StoredPlayerInfo;\r\n}\r\n\r\nexport interface SetStoredRunningGameInfoAction extends Action {\r\n    payload: StoredRunningGameInfo;\r\n}\r\n\r\nexport interface SetDataForNewGamePayload {\r\n    gameId: string;\r\n    gameConfig: GameConfig | null;\r\n    isRejoiningGame: boolean;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\nexport interface SetDataForNewGameAction extends Action {\r\n    payload: SetDataForNewGamePayload\r\n}\r\n\r\nexport interface SetDataOfFinishedGamePayload {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n}\r\nexport interface SetDataOfFinishedGameAction extends Action {\r\n    payload: SetDataOfFinishedGamePayload\r\n}\r\n\r\nexport interface ResetAppStateAction extends Action {}\r\n\r\nexport type AppAction =\r\n    SetStoredPlayerInfoAction | SetStoredRunningGameInfoAction | SetDataForNewGameAction | SetDataOfFinishedGameAction | ResetAppStateAction;\r\n\r\n/*\r\n * Action Creators\r\n */\r\nexport const setStoredPlayerInfo = (payload: StoredPlayerInfo): SetStoredPlayerInfoAction => {\r\n    return { type: SET_STORED_PLAYER_INFO, payload }\r\n};\r\nexport const setStoredRunningGameInfo = (payload: StoredRunningGameInfo): SetStoredRunningGameInfoAction => {\r\n    return { type: SET_STORED_RUNNING_GAME_INFO, payload }\r\n};\r\nexport const setDataForNewGame = (payload: SetDataForNewGamePayload): SetDataForNewGameAction => {\r\n    return { type: SET_DATA_FOR_NEW_GAME, payload }\r\n};\r\nexport const setDataOfFinishedGame = (payload: SetDataOfFinishedGamePayload): SetDataOfFinishedGameAction => {\r\n    return { type: SET_DATA_OF_FINISHED_GAME, payload }\r\n};\r\nexport const resetAppState = (): ResetAppStateAction => {\r\n    return { type: RESET_APP_STATE }\r\n};\r\n","import { Collection } from \"../models/collection.interface\";\r\n\r\nexport const copyToClipboard = (text: string) => {\r\n    const element = document.createElement('textarea');\r\n    element.value = text;\r\n    element.setAttribute('readonly', '');\r\n    element.style.position = 'absolute';\r\n    element.style.left = '-9999px';\r\n    document.body.appendChild(element);\r\n    element.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(element);\r\n};\r\n\r\nexport const createAndFillArray = <T>(length: number, value: T): T[] => {\r\n    return new Array(length).fill(value);\r\n};\r\n\r\nexport const makePluralIfCountIsNotOne = (count: number, singular: string, plural: string): string => {\r\n    return count === 1 ? singular : plural;\r\n};\r\n\r\nexport const convertDateToUnixTimestamp = (dateToConvert: Date): number => dateToConvert.getTime() / 1000 | 0;\r\n\r\nexport const convertCollectionToMap = <T>(collectionToConvert: Collection<T>): Map<string, T> => {\r\n    const dataAsMap = new Map<string, T>();\r\n    Object.keys(collectionToConvert).forEach(key => dataAsMap.set(key, collectionToConvert[key]));\r\n    return dataAsMap;\r\n};\r\n\r\nexport const convertMapToCollection = <T>(mapToConvert: Map<string, T>): Collection<T> => {\r\n    const dataAsCollection: Collection<T> = {};\r\n    mapToConvert.forEach((data, key) => dataAsCollection[key] = data);\r\n    return dataAsCollection;\r\n};\r\n","import { GameConfig, GameRound, PlayerInput, StoredRunningGameInfo } from '../models/game.interface';\r\nimport { StoredPlayerInfo } from '../models/player.interface';\r\nimport { APP_THEME_ID } from './../constants/themes.constant';\r\nimport { convertMapToCollection, convertCollectionToMap } from './general.utils';\r\nimport { MAX_NUMBER_OF_ROUNDS } from '../constants/game.constant';\r\n\r\nconst APP_THEME_LS_KEY = 'SLF-APP-THEME';\r\nconst PLAYER_INFO_LS_KEY = 'SLF-PLAYER-INFO';\r\nconst RUNNING_GAME_INFO_LS_KEY = 'SLF-RUNNING-GAME-INFO';\r\nconst RUNNING_GAME_CONFIG_LS_KEY = 'SLF-RUNNING-GAME-CONFIG';\r\n/** Is used to store a completed round in local storage; e.g. 'SLF-RUNNING-GAME-ROUND-1' */\r\nconst RUNNING_GAME_ROUND_LS_KEY_PREFIX = 'SLF-RUNNING-GAME-ROUND-';\r\n\r\nexport const getAppThemeIdFromLocalStorage = (): string | null =>  localStorage.getItem(APP_THEME_LS_KEY);\r\nexport const setAppThemeIdInLocalStorage = (appTheme: APP_THEME_ID) => localStorage.setItem(APP_THEME_LS_KEY, appTheme);\r\n\r\nexport const getPlayerInfoFromLocalStorage = (): StoredPlayerInfo | null => {\r\n    const storedData = localStorage.getItem(PLAYER_INFO_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n};\r\nexport const setPlayerInfoInLocalStorage = (data: StoredPlayerInfo) => localStorage.setItem(PLAYER_INFO_LS_KEY, JSON.stringify(data));\r\n\r\nexport const getRunningGameInfoFromLocalStorage = (): StoredRunningGameInfo | null => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_INFO_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n};\r\nexport const setRunningGameInfoInLocalStorage = (data: StoredRunningGameInfo) => localStorage.setItem(RUNNING_GAME_INFO_LS_KEY, JSON.stringify(data));\r\n\r\nexport const getRunningGameConfigFromLocalStorage = (): GameConfig | null => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_CONFIG_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n};\r\nexport const setRunningGameConfigInLocalStorage = (data: GameConfig) => localStorage.setItem(RUNNING_GAME_CONFIG_LS_KEY, JSON.stringify(data));\r\n\r\nexport const getRunningGameRoundFromLocalStorage = (round: number): GameRound | null => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_ROUND_LS_KEY_PREFIX + round);\r\n    return storedData ? convertCollectionToMap<PlayerInput[]>(JSON.parse(storedData)) : null;\r\n}\r\nexport const setRunningGameRoundInLocalStorage = (round: number, data: GameRound) => {\r\n    localStorage.setItem(\r\n        RUNNING_GAME_ROUND_LS_KEY_PREFIX + round,\r\n        JSON.stringify(convertMapToCollection<PlayerInput[]>(data))\r\n    );\r\n}\r\n\r\nexport const removeAllDataOfRunningGameFromLocalStorage = () => {\r\n    localStorage.removeItem(RUNNING_GAME_INFO_LS_KEY);\r\n    localStorage.removeItem(RUNNING_GAME_CONFIG_LS_KEY);\r\n    for (let i = 1; i <= MAX_NUMBER_OF_ROUNDS; i++) {\r\n        localStorage.removeItem(RUNNING_GAME_ROUND_LS_KEY_PREFIX + i);\r\n    }\r\n};\r\n","import { cloneDeep, some } from 'lodash';\r\nimport randomnItem from 'random-item';\r\nimport { ONLY_ANSWER_POINTS, SAME_WORD_POINTS, STANDARD_POINTS } from '../constants/game.constant';\r\nimport { Collection } from '../models/collection.interface';\r\nimport { GameConfigScoringOptions, PlayerInput } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { GameResultForPlayer, GameRound, GameRoundEvaluation, PlayerInputEvaluation } from './../models/game.interface';\r\nimport { createAndFillArray } from './general.utils';\r\nimport { getRunningGameRoundFromLocalStorage } from './local-storage.utils';\r\n\r\n/**\r\n* Returns an array of unique letters. The number of letters is defined by the parameter numberOfLetters.\r\n* If the second argument is not provided, then the standard alphabet (excluding Q, X and Y) is used.\r\n*/\r\nexport const getRandomnLetters = (numberOfLetters: number, possibleLetters: string[]): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToRandomnlySelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToRandomnlySelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToRandomnlySelectFrom = lettersToRandomnlySelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\nexport const getPlayersInAlphabeticalOrder = (players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    let playerInfoArray = Array.from(players).map(data => data[1]);\r\n    return playerInfoArray.sort((a, b) => {\r\n        if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\r\n        if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\r\n        return 0;\r\n    });\r\n}\r\n\r\n/**\r\n * Returns an array of PlayerInput objects with empty strings and default settings (isMarkedCreative=false, valid=true, standard points).\r\n */\r\nexport const getEmptyRoundInputs = (numberOfInputs: number): PlayerInput[] => {\r\n    return createAndFillArray<PlayerInput>(numberOfInputs, { points: STANDARD_POINTS, star: false, text: '', valid: true });\r\n}\r\n\r\n/**\r\n* Checks each PlayerInput object whether it contains text.\r\n* If text string is empty, valid is set to false, otherwise to true.\r\n* The text is also trimmed in order to support correct scoring (finding duplicates).\r\n*/\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, text: input.text.trim(), valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(_ => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs according to the active scoring options.\r\n */\r\nexport const calculatePointsForRound = (scoringOptions: GameConfigScoringOptions, round: GameRound) => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    const playerId = round.keys().next().value;\r\n    const playerInputsOfPlayer1 = round.get(playerId) as PlayerInput[];\r\n    // Loop through all categories.\r\n    for (let categoryIndex = 0; categoryIndex < playerInputsOfPlayer1.length; categoryIndex++) {\r\n        calculatePointsForCategory(scoringOptions, round, categoryIndex);\r\n    }\r\n}\r\n\r\n/**\r\n * Calculates the points for the round's inputs for one category according to the active scoring options.\r\n */\r\nexport const calculatePointsForCategory = (scoringOptions: GameConfigScoringOptions, round: GameRound, categoryIndex: number) => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    Array.from(round.keys()).forEach(playerId => {\r\n        const playerInputs = round.get(playerId) as PlayerInput[];\r\n        // Only check valid inputs.\r\n        if (playerInputs[categoryIndex].valid) {\r\n            if (scoringOptions.onlyPlayerWithValidAnswer && isOnlyPlayerWithValidAnswer(playerId, round, categoryIndex)) {\r\n                playerInputs[categoryIndex].points = ONLY_ANSWER_POINTS;\r\n            } else {\r\n                if (scoringOptions.checkForDuplicates && isDuplicateOfOtherPlayersInput(playerId, round, categoryIndex)) {\r\n                    playerInputs[categoryIndex].points = SAME_WORD_POINTS;\r\n                } else {\r\n                    playerInputs[categoryIndex].points = STANDARD_POINTS;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport const isOnlyPlayerWithValidAnswer = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    let isOnlyPlayer = true;\r\n    otherPlayersIds.forEach(id => isOnlyPlayer = isOnlyPlayer && !(round.get(id) as PlayerInput[])[categoryIndex].valid);\r\n    return isOnlyPlayer;\r\n}\r\n\r\n/**\r\n * Returns true if a duplicate (same text, not case sensitive) for playerId's input was found.\r\n */\r\nexport const isDuplicateOfOtherPlayersInput = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    const playerInputText = (round.get(playerId) as PlayerInput[])[categoryIndex].text.toLowerCase();\r\n    return some(otherPlayersIds, id => {\r\n        const otherPlayersInput = (round.get(id) as PlayerInput[])[categoryIndex];\r\n        return otherPlayersInput.valid && playerInputText === otherPlayersInput.text.toLowerCase();\r\n    });\r\n}\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfInvalids = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\n/**\r\n * Returns the players that marked the input as invalid in alphabetical order. Parameters:\r\n * - evaluations: Evaluations of all players for one player's input for one category.\r\n * - players: All players taking part in the running game of \"Stadt-Land-Fluss\".\r\n */\r\nexport const getRejectingPlayers = (evaluations: PlayerInputEvaluation, players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const rejectingPlayers = new Map<string, PlayerInfo>();\r\n    evaluations.forEach((markedAsValid, playerId) => {\r\n        if (!markedAsValid) {\r\n            const playerInfo = players.get(playerId);\r\n            if (playerInfo) {\r\n                rejectingPlayers.set(playerId, playerInfo);\r\n            }\r\n        }\r\n    });\r\n    return getPlayersInAlphabeticalOrder(rejectingPlayers);;\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: Collection<GameResultForPlayer> = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => input.valid ? total + input.points : total, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n}\r\n\r\nexport const shouldUserRespondToRequestGameDataMessage = (user: PlayerInfo, allPlayers: Map<string, PlayerInfo>, requestingPlayerId: string): boolean => {\r\n    // User should not respond to their own message.\r\n    if (user.id === requestingPlayerId) { return false; }\r\n    // If user is admin, then they should respond to the message.\r\n    if (user.isAdmin) { return true; }\r\n    // If the requesting user is the admin, then an algorithm determines who of\r\n    // the remaining players is the one to respond to the admin's message.\r\n    const requestingPlayerInfo = allPlayers.get(requestingPlayerId);\r\n    if (requestingPlayerInfo && requestingPlayerInfo.isAdmin) {\r\n        const playersWithoutRequestingPlayer = cloneDeep(allPlayers);\r\n        playersWithoutRequestingPlayer.delete(requestingPlayerId);\r\n        const playersSortedById = Array.from(playersWithoutRequestingPlayer).map(data => data[1]).sort((a, b) => {\r\n            if (a.id < b.id) { return -1; }\r\n            if (a.id > b.id) { return 1; }\r\n            return 0;\r\n        });\r\n        return playersSortedById[0].id === user.id;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n * Transforms the GameRoundEvaluation object from a nested Map into a nested array.\r\n * The order of the players in sortedPlayers defines the order of the information in the arrays.\r\n */\r\nexport const compressGameRoundEvaluation = (gameRoundEvaluation: GameRoundEvaluation, sortedPlayers: PlayerInfo[]): boolean[][][] => {\r\n    const evaluationsAsArrays = new Map<string, boolean[][]>();\r\n    gameRoundEvaluation.forEach((data, playerId) => {\r\n        evaluationsAsArrays.set(playerId, data.map(item => {\r\n            const booleanArray: boolean[] = [];\r\n            sortedPlayers.forEach(player => booleanArray.push(item.get(player.id) as boolean));\r\n            return booleanArray;\r\n        }));\r\n    });\r\n    const compressedGameRoundEvaluation: boolean[][][] = [];\r\n    sortedPlayers.forEach(player => compressedGameRoundEvaluation.push(evaluationsAsArrays.get(player.id) as boolean[][]));\r\n    return compressedGameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Transforms the GameRoundEvaluation object from a nested array into a nested Map.\r\n * The order of the players in sortedPlayers defines the order of the information in the arrays.\r\n */\r\nexport const decompressGameRoundEvaluation = (compressedData: boolean[][][], sortedPlayers: PlayerInfo[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation: GameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    sortedPlayers.forEach((evaluatedPlayer, evaluatedPlayerIndex) => {\r\n        const evaluations: PlayerInputEvaluation[] = compressedData[evaluatedPlayerIndex].map(playerData => {\r\n            const playerInputEvaluation = new Map<string, boolean>();\r\n            sortedPlayers.forEach((evaluatingPlayer, evaluatingPlayerIndex) => playerInputEvaluation.set(evaluatingPlayer.id, playerData[evaluatingPlayerIndex]));\r\n            return playerInputEvaluation;\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluations);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\nexport const restoreGameRoundsOfRunningGameFromLocalStorage = (numberOfRoundsToRestore: number): GameRound[] => {\r\n    const gameRounds: GameRound[] = [];\r\n    for (let round = 1; round <= numberOfRoundsToRestore; round++) {\r\n        const data = getRunningGameRoundFromLocalStorage(round);\r\n        if (data) {\r\n            gameRounds.push(data);\r\n        }\r\n    }\r\n    return gameRounds;\r\n};\r\n\r\n/**\r\n * Sets points and validity of player inputs for player who is rejoining the game in evaluation phase.\r\n */\r\nexport const setPointsAndValidityOfPlayerInputs = (\r\n    scoringOptions: GameConfigScoringOptions, gameRoundEvaluation: GameRoundEvaluation, minNumberOfInvalids: number, round: GameRound\r\n) => {\r\n    // First evaluate validity\r\n    round.forEach((playerInputs, playerId) => {\r\n        const evaluations = gameRoundEvaluation.get(playerId) as PlayerInputEvaluation[];\r\n        playerInputs.forEach((input, categoryIndex) => {\r\n            // Only evaluate validity for originally valid inputs (not empty text inputs).\r\n            if (input.valid) {\r\n                input.valid = getNumberOfInvalids(evaluations[categoryIndex]) < minNumberOfInvalids;\r\n            }\r\n        });\r\n    });\r\n    // Second calculate points\r\n    calculatePointsForRound(scoringOptions, round);\r\n};\r\n","import { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport ScoringOptionsList from '../../components/ScoringOptionsList/ScoringOptionsList';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { GameConfig, GameResultForPlayer } from '../../models/game.interface';\r\nimport { AppAction, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { calculateGameResults } from '../../utils/game.utils';\r\nimport { makePluralIfCountIsNotOne } from '../../utils/general.utils';\r\n\r\ninterface GameResultsDispatchProps {\r\n    onResetAppState: () => void;\r\n}\r\ninterface GameResultsProps extends AppState, GameResultsDispatchProps, RouterProps { }\r\ninterface GameResultsState {\r\n    gameResults: GameResultForPlayer[];\r\n}\r\n\r\nclass GameResults extends Component<GameResultsProps, GameResultsState> {\r\n    public state: GameResultsState = { gameResults: [] };\r\n\r\n    public render() {\r\n        if (this.props.gameRounds === null) { return null; }\r\n        const gameConfig = this.props.gameConfig as GameConfig;\r\n        const mostPoints = Math.max(...this.state.gameResults.map(result => result.points));\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Ergebnis\"></SectionHeader>\r\n                    <List>\r\n                        {this.state.gameResults.map((result, index) => (\r\n                            <ListItem key={'results-for-player-' + index}>\r\n                                <ListItemIcon>\r\n                                    {this.getResultIcon(result.points === mostPoints)}\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary={result.playerName}\r\n                                    secondary={`${result.points} ${makePluralIfCountIsNotOne(result.points, 'Punkt', 'Punkte')}`}\r\n                                />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </div>\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiele-Settings\"></SectionHeader>\r\n                    <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                    <p>Buchstaben: {gameConfig.letters.join(', ')}</p>\r\n                    <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n                    <ScoringOptionsList rules={gameConfig.scoringOptions} />\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // If there are no allPlayers or gameRounds present in application state, then reroute user to dashboard.\r\n        if (this.props.allPlayers === null || this.props.gameRounds === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        this.setState({ gameResults: calculateGameResults(this.props.allPlayers, this.props.gameRounds) });\r\n    }\r\n\r\n    private getResultIcon = (isWinner: boolean): JSX.Element => {\r\n        return isWinner ? <StarIcon color=\"primary\" fontSize=\"large\" /> : <FaceIcon fontSize=\"large\" />;\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n        this.props.onResetAppState();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppState => state;\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): GameResultsDispatchProps => {\r\n    return {\r\n        onResetAppState: () => dispatch(resetAppState())\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults);\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport React from 'react';\r\n\r\nexport enum ChipType {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n        chipIcon: {\r\n            backgroundColor: 'inherit'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface ChipsArrayProps {\r\n    chipsArray: string[];\r\n    chipType: ChipType;\r\n    removeChip: (chip: string) => any;\r\n}\r\n\r\nconst ChipsArray: React.FunctionComponent<ChipsArrayProps> = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.chipsArray.map((chip, index) => (\r\n                <Chip\r\n                    key={`chip-to-${props.chipType}-${index}`}\r\n                    color={props.chipType === 'selected' ? 'primary' : undefined}\r\n                    icon={props.chipType === 'selected' ? <DoneIcon className=\"chip-icon-no-bg\" /> : <ChevronRightIcon />}\r\n                    label={chip}\r\n                    className={classes.chip}\r\n                    onClick={() => props.removeChip(chip)}\r\n                />\r\n            ))}\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChipsArray;\r\n","import './JoinGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport {\r\n    RejoinRunningGameHint,\r\n    RejoinRunningGameHintContext,\r\n} from '../../components/RejoinRunningGameHint/RejoinRunningGameHint';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { convertDateToUnixTimestamp } from '../../utils/general.utils';\r\nimport {\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setPlayerInfoInLocalStorage,\r\n    setRunningGameInfoInLocalStorage,\r\n} from '../../utils/local-storage.utils';\r\n\r\ninterface JoinGamePropsFromStore {\r\n    gameId: string | null;\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\ninterface JoinGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface JoinGameProps extends JoinGamePropsFromStore, JoinGameDispatchProps, RouteComponentProps { }\r\ninterface JoinGameState {\r\n    idInput: string;\r\n    nameInput: string;\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass JoinGame extends Component<JoinGameProps, JoinGameState> {\r\n    public state: JoinGameState = {\r\n        idInput: '',\r\n        nameInput: this.props.playerInfo ? this.props.playerInfo.name : '',\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const joinGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    autoFocus\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                />\r\n                <TextField\r\n                    name=\"idInput\"\r\n                    label=\"Spiel-ID\"\r\n                    value={this.state.idInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.idInput}\r\n                />\r\n                <div className=\"button-wrapper\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<DirectionsWalkIcon />}\r\n                    >Beitreten</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                {this.props.gameId ? <RejoinRunningGameHint context={RejoinRunningGameHintContext.joingame} /> : null}\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiel beitreten\"></SectionHeader>\r\n                    {joinGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        if (query.has('id')) {\r\n            this.setState({ idInput: query.get('id') as string });\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: JoinGameProps) {\r\n        if (this.props.playerInfo && this.props.playerInfo !== prevProps.playerInfo) {\r\n            this.setState({ nameInput: this.props.playerInfo.name });\r\n        }\r\n    }\r\n\r\n    private handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value } as any);\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (this.state.idInput && this.state.nameInput.trim()) {\r\n            this.joinGame();\r\n        } else {\r\n            this.setState({ nameInput: this.state.nameInput.trim(), validateInputs: true });\r\n        }\r\n    }\r\n\r\n    private joinGame = () => {\r\n        const playerInfo = this.props.playerInfo as PlayerInfo;\r\n        const idCreationTimestamp = this.props.playerIdCreationTimestamp\r\n        const { idInput, nameInput } = this.state;\r\n        removeAllDataOfRunningGameFromLocalStorage();\r\n        setPlayerInfoInLocalStorage({ id: playerInfo.id, idCreationTimestamp, name: nameInput.trim() });\r\n        setRunningGameInfoInLocalStorage({ gameId: idInput, idCreationTimestamp: convertDateToUnixTimestamp(new Date()), isPlayerAdmin: false });\r\n        this.props.onSetGameData({\r\n            gameConfig: null,\r\n            gameId: idInput,\r\n            isRejoiningGame: false,\r\n            playerInfo: {\r\n                id: playerInfo.id,\r\n                isAdmin: false,\r\n                name: nameInput.trim()\r\n            }\r\n        });\r\n        this.props.history.push('/play');\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): JoinGamePropsFromStore => {\r\n    return {\r\n        gameId: state.gameId,\r\n        playerIdCreationTimestamp: state.playerIdCreationTimestamp,\r\n        playerInfo: state.playerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): JoinGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => dispatch(setDataForNewGame(payload))\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinGame);\r\n","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    IconButton,\r\n    TextField,\r\n    Tooltip,\r\n} from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport React, { FormEvent, useState } from 'react';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        lessPadding: {\r\n            padding: '0.375rem 0.5rem'\r\n        },\r\n        dialog: {\r\n            minWidth: '20rem'\r\n        }\r\n    }),\r\n);\r\n\r\nexport interface CustomCategoryDialogProps {\r\n    open: boolean;\r\n    onClose: (newCategory: string | null) => void;\r\n}\r\nconst CustomCategoryDialog: React.FunctionComponent<CustomCategoryDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { onClose, open } = props;\r\n    const [categoryInput, setCategoryInput] = useState('');\r\n    const [validateInputs, setValidateInputs] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        onClose(null);\r\n    };\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const trimmedCategoryInput = categoryInput.trim();\r\n        if (trimmedCategoryInput !== '') {\r\n            setCategoryInput('');\r\n            setValidateInputs(false);\r\n            onClose(trimmedCategoryInput);\r\n        } else {\r\n            setCategoryInput('');\r\n            setValidateInputs(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <form onSubmit={handleSubmit} className={classes.dialog} noValidate autoComplete=\"off\">\r\n                <DialogContent>\r\n                    <DialogContentText>Kategorie hinzufügen</DialogContentText>\r\n                    <TextField\r\n                        id=\"new-category-input\"\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        required\r\n                        value={categoryInput}\r\n                        error={validateInputs && !categoryInput}\r\n                        onChange={event => setCategoryInput(event.target.value)}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={handleClose}\r\n                    >Abbrechen</Button>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                    >Hinzufügen</Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\ninterface AddCustomCategoryProps {\r\n    addCustomCategory: (newCategory: string) => any;\r\n}\r\nconst AddCustomCategory: React.FunctionComponent<AddCustomCategoryProps> = props => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = (newCategory: string | null) => {\r\n        setOpen(false);\r\n        if (newCategory) {\r\n            props.addCustomCategory(newCategory);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Tooltip\r\n                title=\"Kategorie hinzufügen\"\r\n                placement=\"right\"\r\n            >\r\n                <IconButton\r\n                    className={classes.lessPadding}\r\n                    aria-label=\"Kategorie hinzufügen\"\r\n                    onClick={() => setOpen(true)}\r\n                >\r\n                    <AddCircleOutlineIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <CustomCategoryDialog open={open} onClose={newCategory => handleClose(newCategory)} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AddCustomCategory;\r\n","import './NewGame.css';\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    Divider,\r\n    ExpansionPanel,\r\n    ExpansionPanelDetails,\r\n    ExpansionPanelSummary,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    Snackbar,\r\n    TextField,\r\n} from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { xor } from 'lodash';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport AddCustomCategory from '../../components/AddCustomCategory/AddCustomCategory';\r\nimport ChipsArray, { ChipType } from '../../components/ChipsArray/ChipsArray';\r\nimport {\r\n    RejoinRunningGameHint,\r\n    RejoinRunningGameHintContext,\r\n} from '../../components/RejoinRunningGameHint/RejoinRunningGameHint';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport {\r\n    AVAILABLE_CATEGORIES,\r\n    DEFAULT_NUMBER_OF_ROUNDS,\r\n    GAME_OPTION_LABEL,\r\n    MAX_NUMBER_OF_ROUNDS,\r\n    MIN_NUMBER_OF_CATEGORIES,\r\n    MIN_NUMBER_OF_ROUNDS,\r\n    STANDARD_ALPHABET,\r\n    STANDARD_CATEGORIES,\r\n    STANDARD_EXCLUDED_LETTERS,\r\n} from '../../constants/game.constant';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\nimport { convertDateToUnixTimestamp } from '../../utils/general.utils';\r\nimport {\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setPlayerInfoInLocalStorage,\r\n    setRunningGameInfoInLocalStorage,\r\n} from '../../utils/local-storage.utils';\r\n\r\nenum CategoryArray {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\nenum CheckboxName {\r\n    checkForDuplicates = 'checkForDuplicates',\r\n    creativeAnswersExtraPoints = 'creativeAnswersExtraPoints',\r\n    onlyPlayerWithValidAnswer = 'onlyPlayerWithValidAnswer'\r\n}\r\n\r\ninterface NewGamePropsFromStore {\r\n    gameId: string | null;\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\ninterface NewGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface NewGameProps extends NewGamePropsFromStore, NewGameDispatchProps, RouteComponentProps { }\r\ninterface NewGameState {\r\n    availableCategories: string[];\r\n    [CheckboxName.checkForDuplicates]: boolean;\r\n    [CheckboxName.creativeAnswersExtraPoints]: boolean;\r\n    isSnackbarOpen: boolean;\r\n    lettersToExclude: string[];\r\n    nameInput: string;\r\n    numberOfRoundsInput: number;\r\n    [CheckboxName.onlyPlayerWithValidAnswer]: boolean;\r\n    selectedCategories: string[];\r\n    snackBarMessage: string;\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass NewGame extends Component<NewGameProps, NewGameState> {\r\n    public state: NewGameState = {\r\n        availableCategories: AVAILABLE_CATEGORIES,\r\n        checkForDuplicates: true,\r\n        creativeAnswersExtraPoints: false,\r\n        isSnackbarOpen: false,\r\n        lettersToExclude: [...STANDARD_EXCLUDED_LETTERS],\r\n        nameInput: this.props.playerInfo ? this.props.playerInfo.name : '',\r\n        numberOfRoundsInput: DEFAULT_NUMBER_OF_ROUNDS,\r\n        onlyPlayerWithValidAnswer: true,\r\n        selectedCategories: STANDARD_CATEGORIES,\r\n        snackBarMessage: '',\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const numberOfRoundsInputLabel = `Anzahl Runden (${MIN_NUMBER_OF_ROUNDS}-${MAX_NUMBER_OF_ROUNDS})`;\r\n        const newGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername (max. 20 Zeichen)\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleNameInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    autoFocus\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                    inputProps={{ 'maxLength': '20' }}\r\n                />\r\n                <TextField\r\n                    name=\"numberOfRoundsInput\"\r\n                    label={numberOfRoundsInputLabel}\r\n                    type=\"number\"\r\n                    value={this.state.numberOfRoundsInput}\r\n                    onChange={this.handleNumberOfRoundsInputChange}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    inputProps={{ 'min': MIN_NUMBER_OF_ROUNDS, 'max': MAX_NUMBER_OF_ROUNDS }}\r\n                />\r\n                <ExpansionPanel className=\"more-options-expansion-panel\">\r\n                    <ExpansionPanelSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1a-content\"\r\n                        id=\"panel1a-header\"\r\n                    >\r\n                        Weitere Optionen\r\n                    </ExpansionPanelSummary>\r\n                    <ExpansionPanelDetails>\r\n                        <FormGroup className=\"game-options-list\">\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={this.state.checkForDuplicates}\r\n                                        name={CheckboxName.checkForDuplicates}\r\n                                        color=\"primary\"\r\n                                        onChange={this.handleGameOptionChange}\r\n                                    />\r\n                                }\r\n                                label={GAME_OPTION_LABEL.checkForDuplicates}\r\n                            />\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={this.state.onlyPlayerWithValidAnswer}\r\n                                        name={CheckboxName.onlyPlayerWithValidAnswer}\r\n                                        color=\"primary\"\r\n                                        onChange={this.handleGameOptionChange}\r\n                                    />\r\n                                }\r\n                                label={GAME_OPTION_LABEL.onlyPlayerWithValidAnswer}\r\n                            />\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={this.state.creativeAnswersExtraPoints}\r\n                                        name={CheckboxName.creativeAnswersExtraPoints}\r\n                                        color=\"primary\"\r\n                                        disabled\r\n                                        onChange={this.handleGameOptionChange}\r\n                                    />\r\n                                }\r\n                                label={GAME_OPTION_LABEL.creativeAnswersExtraPoints + ' (Coming Soon!)'}\r\n                            />\r\n                        </FormGroup>\r\n                        <Divider />\r\n                        <p className=\"category-array-label\">Folgende Buchstaben ausschließen:</p>\r\n                        <FormGroup row className=\"letters-to-exclude\">\r\n                            {STANDARD_ALPHABET.map((letter, letterIndex) => (\r\n                                <FormControlLabel\r\n                                    key={`slf-letters-to-exclude-${letterIndex}`}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            checked={this.state.lettersToExclude.includes(letter)}\r\n                                            color=\"primary\"\r\n                                            onChange={(event) => this.handleLetterToExcludeChange(event, letter)}\r\n                                        />\r\n                                    }\r\n                                    label={letter}\r\n                                />\r\n                            ))}\r\n                        </FormGroup>\r\n                    </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n                <p className=\"category-array-label\">Ausgewählte Kategorien (mind. {MIN_NUMBER_OF_CATEGORIES}):</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.selectedCategories}\r\n                    chipType={ChipType.selected}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.selected)}\r\n                />\r\n                <p className=\"category-array-label\">Verfügbare Kategorien:</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.availableCategories}\r\n                    chipType={ChipType.available}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.available)}\r\n                >\r\n                    <AddCustomCategory addCustomCategory={this.addCustomCategory} />\r\n                </ChipsArray>\r\n                <div className=\"button-wrapper add-margin-top\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<AddCircleIcon />}\r\n                    >Spiel erstellen</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                {this.props.gameId ? <RejoinRunningGameHint context={RejoinRunningGameHintContext.newgame} /> : null}\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Neues Spiel\" />\r\n                    {newGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n                    open={this.state.isSnackbarOpen}\r\n                    autoHideDuration={3000}\r\n                    onClose={this.handleSnackBarClose}\r\n                    message={this.state.snackBarMessage}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: NewGameProps) {\r\n        if (this.props.playerInfo && this.props.playerInfo !== prevProps.playerInfo) {\r\n            this.setState({ nameInput: this.props.playerInfo.name });\r\n        }\r\n    }\r\n\r\n    private handleNameInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ nameInput: event.target.value });\r\n    }\r\n\r\n    private handleNumberOfRoundsInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +event.target.value;\r\n        if (value >= MIN_NUMBER_OF_ROUNDS && value <= MAX_NUMBER_OF_ROUNDS) {\r\n            this.setState({ numberOfRoundsInput: value });\r\n        }\r\n    }\r\n\r\n    private handleGameOptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ ...this.state, [event.target.name]: event.target.checked });\r\n    }\r\n\r\n    private handleLetterToExcludeChange = (event: React.ChangeEvent<HTMLInputElement>, letter: string) => {\r\n        const { lettersToExclude } = this.state;\r\n        const newLettersToExclude = event.target.checked ? [...lettersToExclude, letter] : lettersToExclude.filter(l => l !== letter);\r\n        this.setState({ lettersToExclude: newLettersToExclude });\r\n    }\r\n\r\n    private updateCategoryArrays = (chipToRemove: string, removeFromArray: CategoryArray) => {\r\n        let newSelectedCategories: string[];\r\n        let newAvailableCategories: string[];\r\n        if (removeFromArray === CategoryArray.selected) {\r\n            newSelectedCategories = this.state.selectedCategories.filter(category => category !== chipToRemove);\r\n            newAvailableCategories = [...this.state.availableCategories];\r\n            newAvailableCategories.push(chipToRemove);\r\n        } else {\r\n            newAvailableCategories = this.state.availableCategories.filter(category => category !== chipToRemove);\r\n            newSelectedCategories = [...this.state.selectedCategories];\r\n            newSelectedCategories.push(chipToRemove);\r\n        }\r\n        this.setState({\r\n            availableCategories: newAvailableCategories,\r\n            selectedCategories: newSelectedCategories\r\n        });\r\n    }\r\n\r\n    private addCustomCategory = (newCategory: string) => {\r\n        this.setState({ availableCategories: [...this.state.availableCategories, newCategory] });\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (this.isReadyToStartGame()) {\r\n            this.startNewGame();\r\n        } else {\r\n            this.setState({ nameInput: this.state.nameInput.trim(), validateInputs: true });\r\n        }\r\n    }\r\n\r\n    private isReadyToStartGame = (): boolean => {\r\n        if (this.state.selectedCategories.length < MIN_NUMBER_OF_CATEGORIES) {\r\n            this.showSnackBar(`Du musst mindestens ${MIN_NUMBER_OF_CATEGORIES} Kategorien auswählen!`);\r\n            return false;\r\n        }\r\n        if (STANDARD_ALPHABET.length - this.state.lettersToExclude.length < this.state.numberOfRoundsInput) {\r\n            this.showSnackBar(`Du hast zu viele Buchstaben ausgeschlossen!`);\r\n            return false;\r\n        }\r\n        return !!this.state.nameInput.trim();\r\n    }\r\n\r\n    private showSnackBar = (message: string) =>  this.setState({ isSnackbarOpen: true, snackBarMessage: message});\r\n    private handleSnackBarClose = () =>  this.setState({ isSnackbarOpen: false });\r\n\r\n    private startNewGame = () => {\r\n        const playerInfo = this.props.playerInfo as PlayerInfo;\r\n        const idCreationTimestamp = this.props.playerIdCreationTimestamp\r\n        const { nameInput, numberOfRoundsInput, selectedCategories } = this.state;\r\n        const gameId = uuidv4(); // ⇨ e.g. '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n        removeAllDataOfRunningGameFromLocalStorage();\r\n        setPlayerInfoInLocalStorage({ id: playerInfo.id, idCreationTimestamp, name: nameInput.trim() });\r\n        setRunningGameInfoInLocalStorage({ gameId, idCreationTimestamp: convertDateToUnixTimestamp(new Date()), isPlayerAdmin: true });\r\n        this.props.onSetGameData({\r\n            gameConfig: {\r\n                categories: selectedCategories,\r\n                letters: getRandomnLetters(numberOfRoundsInput, xor(STANDARD_ALPHABET, this.state.lettersToExclude)),\r\n                numberOfRounds: numberOfRoundsInput,\r\n                scoringOptions: {\r\n                    checkForDuplicates: this.state.checkForDuplicates,\r\n                    creativeAnswersExtraPoints: this.state.creativeAnswersExtraPoints,\r\n                    onlyPlayerWithValidAnswer: this.state.onlyPlayerWithValidAnswer\r\n                }\r\n            },\r\n            gameId,\r\n            isRejoiningGame: false,\r\n            playerInfo: {\r\n                id: playerInfo.id,\r\n                isAdmin: true,\r\n                name: nameInput.trim()\r\n            }\r\n        });\r\n        this.props.history.push('/play');\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): NewGamePropsFromStore => {\r\n    return {\r\n        gameId: state.gameId,\r\n        playerIdCreationTimestamp: state.playerIdCreationTimestamp,\r\n        playerInfo: state.playerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): NewGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => dispatch(setDataForNewGame(payload))\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewGame);\r\n","import { GamePhase } from '../constants/game.constant';\r\nimport { Collection } from './collection.interface';\r\nimport { EvaluationOfPlayerInput, GameConfig, PlayerInput } from './game.interface';\r\nimport { PlayerInfo } from './player.interface';\r\n\r\nexport interface PubNubUserState {\r\n    gameConfig?: GameConfig;\r\n    playerInfo: PlayerInfo;\r\n}\r\n\r\nexport enum PubNubMessageType {\r\n    startGame = 'startGame',\r\n    roundFinished = 'roundFinished',\r\n    currentRoundInputs = 'currentRoundInputs',\r\n    evaluationOfPlayerInput = 'evaluationOfPlayerInput',\r\n    evaluationFinished = 'evaluationFinished',\r\n    kickPlayer = 'kickPlayer',\r\n    requestGameData = 'requestGameData',\r\n    dataForCurrentGame = 'dataForCurrentGame'\r\n}\r\n\r\nexport interface PubNubMessage {\r\n    type: PubNubMessageType;\r\n    payload?: any;\r\n}\r\n\r\nexport class PubNubCurrentRoundInputsMessage {\r\n    constructor(private payload: PlayerInput[]) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.currentRoundInputs,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport class PubNubEvaluationOfPlayerInputMessage {\r\n    constructor(private payload: EvaluationOfPlayerInput) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.evaluationOfPlayerInput,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport class PubNubKickPlayerMessage {\r\n    constructor(private payload: string) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.kickPlayer,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport interface PubNubDataForCurrentGameMessagePayload {\r\n    compressedGameRoundEvaluation: boolean[][][];\r\n    currentPhase: GamePhase;\r\n    currentRound: number;\r\n    playersThatFinishedEvaluation: Collection<boolean>;\r\n    requestingPlayerId: string;\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\nexport class PubNubDataForCurrentGameMessage {\r\n    constructor(private payload: PubNubDataForCurrentGameMessagePayload) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.dataForCurrentGame,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    IconButton,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Menu,\r\n    MenuItem,\r\n} from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport React, { useState } from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        adminPanel: {\r\n            position: 'absolute',\r\n            top: '1rem',\r\n            right: '1rem'\r\n        },\r\n        menuButton: {\r\n            background: 'radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,0.5) 35%, rgba(255,255,255,0) 60%);'\r\n        },\r\n        dialogContent: {\r\n            maxWidth: '23rem'\r\n        },\r\n        dialogContentText: {\r\n            color: 'black'\r\n        }\r\n    }),\r\n);\r\n\r\nexport interface KickUserDialogProps {\r\n    open: boolean;\r\n    playerToBeKicked: PlayerInfo | null;\r\n    onClose: (kickPlayer: boolean) => void;\r\n}\r\nconst KickUserDialog: React.FunctionComponent<KickUserDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { onClose, open } = props;\r\n\r\n    return (\r\n        <Dialog onClose={() => onClose(false)} open={open}>\r\n            <DialogContent classes={{ root: classes.dialogContent }}>\r\n                {props.playerToBeKicked ? (\r\n                    <DialogContentText classes={{ root: classes.dialogContentText }}>\r\n                        \"With great power comes great responsibility\" – Willst du {props.playerToBeKicked.name} wirklich aus dem Spiel werfen?\r\n                    </DialogContentText>\r\n                ) : null}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    type=\"button\"\r\n                    onClick={() => onClose(false)}\r\n                >Abbrechen</Button>\r\n                <Button\r\n                    type=\"button\"\r\n                    color=\"primary\"\r\n                    onClick={() => onClose(true)}\r\n                >Rauswerfen</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\ninterface AdminPanelProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    kickPlayer: (playerId: string) => void;\r\n}\r\nconst AdminPanel: React.FunctionComponent<AdminPanelProps> = props => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [playerToBeKicked, setPlayerToBeKicked] = useState<PlayerInfo | null>(null);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleMenuItemClick = (selectedPlayer: PlayerInfo) => {\r\n        setAnchorEl(null);\r\n        setPlayerToBeKicked(selectedPlayer);\r\n        setOpenDialog(true);\r\n    };\r\n    const handleAdminPanelClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleKickUserDialogClose = (kickPlayer: boolean) => {\r\n        setOpenDialog(false);\r\n        if (kickPlayer && playerToBeKicked) {\r\n            props.kickPlayer(playerToBeKicked.id);\r\n        }\r\n    };\r\n\r\n    const otherPlayers = new Map<string, PlayerInfo>();\r\n    props.allPlayers.forEach((playerInfo, playerId) => {\r\n        if (!playerInfo.isAdmin) { otherPlayers.set(playerId, playerInfo); }\r\n    });\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(otherPlayers);\r\n    return (\r\n        <div className={classes.adminPanel}>\r\n            <IconButton\r\n                className={classes.menuButton}\r\n                title=\"Admin-Panel öffnen\"\r\n                aria-label=\"Admin-Panel öffnen\"\r\n                aria-controls=\"admin-panel\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n            >\r\n                <SettingsIcon color=\"primary\" />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"admin-panel\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleAdminPanelClose}\r\n            >\r\n                {sortedPlayers.map((playerInfo, playerIndex) => (\r\n                    <MenuItem\r\n                        key={`menu-item-delete-player-${playerIndex}`}\r\n                        title={`${playerInfo.name} aus dem Spiel werfen`}\r\n                        onClick={() => handleMenuItemClick(playerInfo)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <CancelIcon color=\"secondary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={playerInfo.name} />\r\n                    </MenuItem>\r\n                ))}\r\n            </Menu>\r\n            <KickUserDialog\r\n                open={openDialog}\r\n                playerToBeKicked={playerToBeKicked}\r\n                onClose={handleKickUserDialogClose}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminPanel;\r\n","import './LetterAnimation.css';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n    LETTER_ANIMATION_LETTER_COUNT,\r\n    LETTER_ANIMATION_REDRAW_SPEED,\r\n    STANDARD_ALPHABET,\r\n} from '../../constants/game.constant';\r\nimport { AppTheme, AppThemes } from '../../constants/themes.constant';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\n\r\n// Thanks to Georgi Nikoloff for the great animation source code: https://codepen.io/gbnikolov/pen/jEqQdG\r\n// I rewrote the code in Typescript, refactored it a bit and adapted it to the needs of this application.\r\n\r\nclass Particle {\r\n    private radius = 3.5;\r\n\r\n    constructor(\r\n        public x: number,\r\n        public y: number\r\n    ) { }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.translate(this.x, this.y);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, this.radius, this.radius);\r\n        ctx.restore();\r\n    };\r\n}\r\n\r\nclass ParticleAlphabet {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private currentPos: number;\r\n    private width: number;\r\n    private height: number;\r\n    private particlePositions: any[];\r\n    private particles: Particle[];\r\n    private tmpCanvas: HTMLCanvasElement;\r\n    private tmpCtx: CanvasRenderingContext2D;\r\n    private time: string;\r\n    private counter = 0;\r\n    private myInterval: any;\r\n    private activeTheme: AppTheme;\r\n\r\n    constructor(\r\n        public letters: string[],\r\n        public callbackWhenAnimationDone: () => void\r\n    ) {\r\n        this.canvas = document.querySelector('#letter-animation-canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        const mainElement = document.querySelector('main') as HTMLElement;\r\n        this.activeTheme = AppThemes.find(theme => mainElement.classList.contains(theme.className)) as AppTheme;\r\n        this.width = mainElement.offsetWidth;\r\n        this.height = mainElement.offsetHeight;\r\n        this.particlePositions = [];\r\n        this.particles = [];\r\n        this.tmpCanvas = document.createElement('canvas');\r\n        this.tmpCtx = this.tmpCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.particlePositions = [];\r\n        this.currentPos = 0;\r\n        this.time = '';\r\n    }\r\n\r\n    public init() {\r\n        this.myInterval = setInterval(() => {\r\n            if (this.counter < this.letters.length) {\r\n                this.changeLetter();\r\n                this.getPixels(this.tmpCanvas, this.tmpCtx);\r\n            }\r\n            this.counter++;\r\n            if (this.counter > this.letters.length + 1) {\r\n                clearInterval(this.myInterval);\r\n                this.callbackWhenAnimationDone();\r\n            }\r\n        }, LETTER_ANIMATION_REDRAW_SPEED);\r\n\r\n        this.makeParticles(1000);\r\n        this.animate();\r\n    }\r\n\r\n    private changeLetter() {\r\n        this.time = this.letters[this.currentPos];\r\n        this.currentPos++;\r\n        if (this.currentPos >= this.letters.length) {\r\n            this.currentPos = 0;\r\n        }\r\n    }\r\n\r\n    private makeParticles(num: number) {\r\n        for (var i = 0; i <= num; i++) {\r\n            const x = this.width / 2 + Math.random() * 400 - 200;\r\n            const y = this.height / 2 + Math.random() * 400 - 200;\r\n            this.particles.push(new Particle(x, y));\r\n        }\r\n    }\r\n\r\n    private getPixels(canvas: any, ctx: any) {\r\n        const keyword = this.time,\r\n            gridX = 6,\r\n            gridY = 6;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        ctx.fillStyle = 'red';\r\n        ctx.font = 'italic bold 330px Noto Serif';\r\n        ctx.fillText(keyword, canvas.width / 2 - ctx.measureText(keyword).width / 2, canvas.height / 2 + 100);\r\n        const idata = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const buffer32 = new Uint32Array(idata.data.buffer);\r\n        if (this.particlePositions.length > 0) this.particlePositions = [];\r\n        for (let y = 0; y < canvas.height; y += gridY) {\r\n            for (let x = 0; x < canvas.width; x += gridX) {\r\n                if (buffer32[y * canvas.width + x]) {\r\n                    this.particlePositions.push({ x: x, y: y });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private animateParticles() {\r\n        let p, pPos;\r\n        for (let i = 0, num = this.particles.length; i < num; i++) {\r\n            p = this.particles[i];\r\n            pPos = this.particlePositions[i];\r\n            if (this.particles.indexOf(p) === this.particlePositions.indexOf(pPos)) {\r\n                p.x += (pPos.x - p.x) * .3;\r\n                p.y += (pPos.y - p.y) * .3;\r\n                p.draw(this.ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private animate = () => {\r\n        requestAnimationFrame(this.animate);\r\n        this.ctx.fillStyle = this.activeTheme.animationBackgroundColor;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        this.animateParticles();\r\n    }\r\n}\r\n\r\ninterface LetterAnimationProps {\r\n    letterToUnveil: string;\r\n    callbackWhenAnimationDone: () => void;\r\n}\r\nexport const LetterAnimation: React.FunctionComponent<LetterAnimationProps> = props => {\r\n    const lettersToUse = [...STANDARD_ALPHABET].filter(letter => letter !== props.letterToUnveil);\r\n    const lettersForAnimation = [...getRandomnLetters(LETTER_ANIMATION_LETTER_COUNT - 1, lettersToUse), props.letterToUnveil];\r\n    useEffect(() => {\r\n        const particleAlphabet = new ParticleAlphabet(lettersForAnimation, props.callbackWhenAnimationDone);\r\n        particleAlphabet.init();\r\n    });\r\n    return (\r\n        <canvas id=\"letter-animation-canvas\"></canvas>\r\n    );\r\n}\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst loadingSpinnerSize = 60;\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        loadingScreen: {\r\n            position: 'absolute',\r\n            top: '0',\r\n            left: '0',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n        },\r\n        loadingSpinner: {\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            width: loadingSpinnerSize + 'px'\r\n        }\r\n    }),\r\n);\r\n\r\nconst LoadingScreen: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.loadingScreen}>\r\n            <div className={classes.loadingSpinner}>\r\n                <CircularProgress color=\"secondary\" size={loadingSpinnerSize} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        centerContent: {\r\n            display: 'flex',\r\n            justifyContent: 'center'\r\n        },\r\n        chip: {\r\n            height: '3rem',\r\n            marginTop: '1rem',\r\n            borderRadius: '5px',\r\n            fontSize: '1.2rem',\r\n            boxShadow: '0 2px 4px rgba(0,0,0,.501961)'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface GameRoundChipProps {\r\n    currentLetter: string;\r\n    currentRound: number;\r\n    numberOfRounds: number;\r\n}\r\n\r\nconst GameRoundChip: React.FunctionComponent<GameRoundChipProps> = props => {\r\n    const classes = useStyles();\r\n    const { currentLetter, currentRound, numberOfRounds } = props;\r\n    return (\r\n        <div className={classes.centerContent}>\r\n            <Chip\r\n                color=\"primary\"\r\n                icon={<EmojiObjectsIcon />}\r\n                label={`Runde ${currentRound} von ${numberOfRounds}: „${currentLetter}“`}\r\n                className={classes.chip}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameRoundChip;\r\n","import './PhaseEvaluateRound.css';\r\nimport {\r\n    Badge,\r\n    Chip,\r\n    createStyles,\r\n    IconButton,\r\n    InputAdornment,\r\n    TextField,\r\n    Theme,\r\n    Tooltip,\r\n    withStyles,\r\n} from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ThumbDownRoundedIcon from '@material-ui/icons/ThumbDownRounded';\r\nimport React, { useState } from 'react';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder, getRejectingPlayers } from '../../utils/game.utils';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\nconst StyledBadge = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        badge: {\r\n            right: -3,\r\n            top: '100%',\r\n            border: `2px solid ${theme.palette.background.paper}`,\r\n            padding: '0 4px',\r\n        },\r\n    }),\r\n)(Badge);\r\n\r\ninterface PhaseEvaluateRoundProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    updateEvaluationOfPlayerInput: (newEvaluation: EvaluationOfPlayerInput) => void;\r\n    sendEvaluationFinishedMessage: () => void;\r\n}\r\nconst PhaseEvaluateRound: React.FunctionComponent<PhaseEvaluateRoundProps> = props => {\r\n    const [hasFinishedEvaluation, setHasFinishedEvaluation] = useState(props.playersThatFinishedEvaluation.has(props.playerInfo.id));\r\n    const { allPlayers, currentRound, currentRoundEvaluation, gameConfig, playerInfo, playersThatFinishedEvaluation } = props;\r\n    // Retrieve data for finished round; e.g. if current round is 1, then data is at index 0.\r\n    const finishedRound = props.gameRounds[currentRound - 1];\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(allPlayers);\r\n    const notFinishedPlayers: string[] = [];\r\n    sortedPlayers.forEach(player => {\r\n        if (!playersThatFinishedEvaluation.has(player.id)) { notFinishedPlayers.push(player.name); }\r\n    });\r\n\r\n    /**\r\n      * Toggles the user's evaluation of a player's input for a category,\r\n      * but only if the user hasn't accepted the round evaluation yet.\r\n      */\r\n    const handleEvaluationButtonClick = (\r\n        categoryIndex: number, evaluatedPlayerId: string, currentEvaluation: boolean\r\n    ) => {\r\n        if (!hasFinishedEvaluation) {\r\n            props.updateEvaluationOfPlayerInput({ categoryIndex, evaluatedPlayerId, markedAsValid: !currentEvaluation });\r\n        }\r\n    }\r\n    /**\r\n     * Displays a button that allows the user to reject a player's input for a category.\r\n     * A badge attached to the button shows the total number of rejections. If the player\r\n     * didn't type any text, then a not clickable thumb down icon is shown instead,\r\n     * which indicates that the input was automatically rejected by the application.\r\n     */\r\n    const createEvaluationButton = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const allEvaluationsForPlayer = currentRoundEvaluation.get(evaluatedPlayer.id) as PlayerInputEvaluation[];\r\n        const evaluationForCategory = allEvaluationsForPlayer[categoryIndex];\r\n        const isInputAcceptedByUser = evaluationForCategory.get(playerInfo.id) as boolean;\r\n        const rejectingPlayers = getRejectingPlayers(evaluationForCategory, allPlayers);\r\n        const tooltipText = rejectingPlayers.length === 0 ? 'Keine Ablehnungen' :\r\n            'Abgelehnt von ' + rejectingPlayers.map(p => p.name).join(', ');\r\n        const hasPlayerTypedText = !!(finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n\r\n        const evaluationButtonForTypedText = (\r\n            <Tooltip\r\n                key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}`}\r\n                title={tooltipText}\r\n            >\r\n                <IconButton\r\n                    className=\"slf-evaluation-button\"\r\n                    color={isInputAcceptedByUser ? 'default' : 'secondary'}\r\n                    onClick={() => handleEvaluationButtonClick(categoryIndex, evaluatedPlayer.id, isInputAcceptedByUser)}\r\n                >\r\n                    <StyledBadge badgeContent={rejectingPlayers.length} color=\"secondary\">\r\n                        <ThumbDownRoundedIcon />\r\n                    </StyledBadge>\r\n                </IconButton>\r\n            </Tooltip>\r\n        );\r\n        const autoRejectIconForMissingText = (\r\n            <Tooltip\r\n                key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}`}\r\n                title=\"Automatisch abgelehnt\"\r\n            >\r\n                <ThumbDownRoundedIcon color=\"secondary\" className=\"slf-auto-reject-icon\" />\r\n            </Tooltip>\r\n        );\r\n\r\n        return (\r\n            <div\r\n                key={`slf-evaluation-button-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-evaluation-button-wrapper\"\r\n            >\r\n                {hasPlayerTypedText ? evaluationButtonForTypedText : autoRejectIconForMissingText}\r\n            </div>\r\n        );\r\n    }\r\n    /**\r\n     * Creates a search link for a specific category and player input.\r\n     */\r\n    const createSearchLink = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const category = gameConfig.categories[categoryIndex];\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const playerInput = (finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n        const searchLink = `https://www.ecosia.org/search?q=${encodeURIComponent(category)}+${encodeURIComponent(playerInput)}`\r\n        return (\r\n            <a\r\n                className=\"slf-evaluation-search-link\"\r\n                href={searchLink}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                aria-label=\"Begriff nachschlagen\"\r\n            >\r\n                <Tooltip\r\n                    title=\"Begriff nachschlagen\"\r\n                    placement=\"bottom\"\r\n                >\r\n                    <SearchIcon color=\"primary\" />\r\n                </Tooltip>\r\n            </a>\r\n        );\r\n    }\r\n    /**\r\n     * Creates a text input showing the player's input for a category. If the player input isn't an empty string,\r\n     * then on the right side of the textfield a search link and clickable evaluation button are displayed.\r\n     */\r\n    const playerEvaluationElements = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const evaluatedPlayerInput = (finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex];\r\n        const hasPlayerTypedText = !!evaluatedPlayerInput.text;\r\n        const isInputValid = evaluatedPlayerInput.valid;\r\n        return (\r\n            <div\r\n                key={`slf-evaluation-textfield-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-evaluation-textfield-wrapper\"\r\n            >\r\n                <TextField\r\n                    key={'slf-textfield-category-no-' + categoryIndex + '-player-' + indexInSortedPlayers}\r\n                    value={evaluatedPlayerInput.text}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    InputProps={{\r\n                        className: !isInputValid ? 'invalid-player-input' : '',\r\n                        startAdornment: <InputAdornment position=\"start\">{evaluatedPlayer.name}:</InputAdornment>,\r\n                        endAdornment: <InputAdornment position=\"end\">\r\n                            <div className=\"slf-evaluation-textfield-end-adornment\">\r\n                                {hasPlayerTypedText ? createSearchLink(categoryIndex, indexInSortedPlayers) : null}\r\n                                {isInputValid ? <Chip label={`+${evaluatedPlayerInput.points}`} color=\"primary\" /> : null}\r\n                            </div>\r\n                        </InputAdornment>\r\n                    }}\r\n                />\r\n                {createEvaluationButton(categoryIndex, indexInSortedPlayers)}\r\n            </div>\r\n        );\r\n    }\r\n    /**\r\n     * Creates a section for each category of the current game. It displays the category in the header,\r\n     * followed by one textfield for each player showing their input for the finished round.\r\n     * If the input isn't empty, a search link and clickable evaluation button are displayed.\r\n     */\r\n    const createCategorySection = (category: string, categoryIndex: number): JSX.Element => (\r\n        <div\r\n            key={'slf-evaluation-for-category-no-' + categoryIndex}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            {sortedPlayers.map((_, indexInSortedPlayers) => playerEvaluationElements(categoryIndex, indexInSortedPlayers))}\r\n        </div>\r\n    );\r\n    const onAcceptEvaluationButtonClick = () => {\r\n        if (!hasFinishedEvaluation) {\r\n            setHasFinishedEvaluation(true);\r\n            props.sendEvaluationFinishedMessage();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip\r\n                currentLetter={currentLetter}\r\n                currentRound={currentRound}\r\n                numberOfRounds={gameConfig.numberOfRounds}\r\n            />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createCategorySection)}\r\n                <div className=\"material-card-style\">\r\n                    Bestätigung ausstehend: <span className=\"bold-text\">{notFinishedPlayers.join(', ')}</span>\r\n                </div>\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"secondary\"\r\n                    title=\"Bestätigen\"\r\n                    aria-label=\"Bestätigen\"\r\n                    onClick={onAcceptEvaluationButtonClick}\r\n                >\r\n                    {hasFinishedEvaluation ? <CheckCircleIcon /> : <RadioButtonUncheckedIcon />}\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseEvaluateRound;\r\n","import { IconButton, InputAdornment, TextField } from '@material-ui/core';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { GameConfig, PlayerInput } from '../../models/game.interface';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseFillOutTextfieldsProps {\r\n    currentRound: number;\r\n    gameConfig: GameConfig;\r\n    gameRoundInputs: PlayerInput[];\r\n    updateCurrentRoundInputs: (newCurrentRoundInputs: PlayerInput[]) => void;\r\n    sendRoundFinishedMessage: () => void;\r\n}\r\n\r\nconst PhaseFillOutTextfields: React.FunctionComponent<PhaseFillOutTextfieldsProps> = props => {\r\n    const { currentRound, gameConfig, gameRoundInputs } = props;\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number) => {\r\n        const newGameRoundInputs = [...gameRoundInputs];\r\n        newGameRoundInputs[index] = { ...newGameRoundInputs[index], text: event.target.value };\r\n        props.updateCurrentRoundInputs(newGameRoundInputs);\r\n    };\r\n    const createTextfieldElement = (category: string, index: number): JSX.Element => (\r\n        <div\r\n            key={'slf-input-for-category-no-' + index}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            <TextField\r\n                value={gameRoundInputs[index].text}\r\n                onChange={event => handleInputChange(event, index)}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">{currentLetter}:</InputAdornment>\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip\r\n                currentLetter={currentLetter}\r\n                currentRound={currentRound}\r\n                numberOfRounds={gameConfig.numberOfRounds}\r\n            />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createTextfieldElement)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"secondary\"\r\n                    title=\"Abschicken\"\r\n                    aria-label=\"Abschicken\"\r\n                    onClick={() => props.sendRoundFinishedMessage()}\r\n                >\r\n                    <EmailIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseFillOutTextfields;\r\n","import './JoinGameLink.css';\r\nimport { IconButton, InputAdornment, OutlinedInput, Snackbar } from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport React, { useState } from 'react';\r\nimport { copyToClipboard } from '../../utils/general.utils';\r\n\r\ninterface JoinGameLinkProps {\r\n    gameId: string;\r\n}\r\n\r\nexport const JoinGameLink: React.FunctionComponent<JoinGameLinkProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n    const handleClick = () => {\r\n        copyToClipboard(joinGameLink)\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const url = window.location.href;\r\n    // Cut off \"/play\" from the end of the url and add route plus game id.\r\n    const joinGameLink = url.slice(0, url.length - 5) + '/joingame?id=' + props.gameId;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"join-game-link-label\">Teile diesen Link mit Freunden:</p>\r\n            <OutlinedInput\r\n                name=\"idInput\"\r\n                value={joinGameLink}\r\n                className=\"app-form-input\"\r\n                disabled\r\n                fullWidth\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            title=\"Link kopieren\"\r\n                            aria-label=\"Link kopieren\"\r\n                            onClick={handleClick}\r\n                        >\r\n                            <FileCopyIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n            />\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={1500}\r\n                onClose={handleClose}\r\n                message=\"Der Link wurde in Zwischenablage kopiert.\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport React from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface PlayerListProps {\r\n    players: Map<string, PlayerInfo>;\r\n}\r\nconst PlayerList: React.FunctionComponent<PlayerListProps> = props => {\r\n    const classes = useStyles();\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(props.players);\r\n    return (\r\n        <div className={classes.root}>\r\n            {sortedPlayers.map((playerInfo, index) => (\r\n                <Chip\r\n                    key={`player-name-${index}`}\r\n                    icon={<FaceIcon />}\r\n                    color={playerInfo.isAdmin ? 'secondary' : 'primary'}\r\n                    label={playerInfo.isAdmin ? `${playerInfo.name} (Admin)` : playerInfo.name}\r\n                    className={classes.chip}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerList;\r\n","import './PhaseWaitingToStart.css';\r\nimport { Button, Divider } from '@material-ui/core';\r\nimport PlayCircleFilled from '@material-ui/icons/PlayCircleFilled';\r\nimport React from 'react';\r\nimport { MIN_NUMBER_OF_PLAYERS } from '../../constants/game.constant';\r\nimport { GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport { JoinGameLink } from '../JoinGameLink/JoinGameLink';\r\nimport PlayerList from '../PlayerList/PlayerList';\r\nimport ScoringOptionsList from '../ScoringOptionsList/ScoringOptionsList';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseWaitingToStartProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig | null;\r\n    gameId: string;\r\n    playerInfo: PlayerInfo;\r\n    sendMessage: (message: PubNubMessage) => void;\r\n}\r\n\r\nconst PhaseWaitingToStart: React.FunctionComponent<PhaseWaitingToStartProps> = props => {\r\n    const { allPlayers, gameId, playerInfo } = props;\r\n    const gameConfig = props.gameConfig as GameConfig;\r\n    const waitForGameStartElement = (\r\n        <p className=\"wait-for-start-animation\">Warte auf Spielbeginn <span>.</span><span>.</span><span>.</span></p>\r\n    );\r\n    const createGameSettingsElement = (): JSX.Element => (\r\n        <React.Fragment>\r\n            <Divider />\r\n            <h3>Spiel-Übersicht:</h3>\r\n            <p>ID: {props.gameId}</p>\r\n            <p>Runden: {gameConfig.numberOfRounds}</p>\r\n            <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n            <ScoringOptionsList rules={gameConfig.scoringOptions} />\r\n        </React.Fragment>\r\n    );\r\n    const createStartGameButton = (): JSX.Element => (\r\n        <div className=\"button-wrapper add-margin-top\">\r\n            <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<PlayCircleFilled />}\r\n                disabled={allPlayers.size < MIN_NUMBER_OF_PLAYERS}\r\n                onClick={() => props.sendMessage({ type: PubNubMessageType.startGame })}\r\n            >Starten</Button>\r\n        </div>\r\n    );\r\n    const createInvitePlayersElement = (): JSX.Element => (\r\n        <div className=\"material-card-style\">\r\n            <JoinGameLink gameId={gameId as string} />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"material-card-style\">\r\n                <SectionHeader showDivider={true} text=\"Gleich geht's los...\"></SectionHeader>\r\n                <div className=\"players-wrapper\">\r\n                    <h3>Mitspieler ({props.allPlayers.size}):</h3>\r\n                    <PlayerList players={props.allPlayers} />\r\n                </div>\r\n                {props.gameConfig ? createGameSettingsElement() : null}\r\n                <Divider />\r\n                {playerInfo.isAdmin ? createStartGameButton() : waitForGameStartElement}\r\n            </div>\r\n            {playerInfo.isAdmin ? createInvitePlayersElement() : null}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseWaitingToStart;\r\n","import Pubnub from 'pubnub';\r\nimport { usePubNub } from 'pubnub-react';\r\nimport React, { useEffect } from 'react';\r\nimport { GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubUserState } from '../../models/pub-nub-data.model';\r\n\r\ninterface PubNubEventHandlerProps {\r\n    gameChannel: string;\r\n    gameConfig: GameConfig | null;\r\n    isRejoiningGame: boolean;\r\n    playerInfo: PlayerInfo;\r\n    navigateToDashboard: () => void;\r\n    addPlayers: (...newPlayers: PubNubUserState[]) => void;\r\n    processPubNubMessage: (event: Pubnub.MessageEvent) => void;\r\n}\r\n\r\nconst PubNubEventHandler: React.FunctionComponent<PubNubEventHandlerProps> = props => {\r\n    const pubNubClient = usePubNub();\r\n\r\n    const setUserStateAndGetHereNowIfGameIsOpen = () => {\r\n        pubNubClient.history(\r\n            { channel: props.gameChannel, count: 10 },\r\n            (_, response) => {\r\n                // If a new user wants to join the game but the channel's history already includes messages, then the game\r\n                // has already started and user can't join. They get rerouted to the dashboard page by PlayGame component.\r\n                if (!props.isRejoiningGame && response.messages.length > 0) {\r\n                    props.navigateToDashboard();\r\n                    return;\r\n                }\r\n                // Only if player is joining game for the first time, set user state and retrieve hereNowData.\r\n                if (!props.isRejoiningGame) {\r\n                    setUserState();\r\n                    getHereNowData();\r\n                    // Safeguard against the possibility of two players joining exactly at the same time:\r\n                    // We call hereNowData again after 3 seconds, to make sure we get all player info.\r\n                    setTimeout(getHereNowData, 3000);\r\n                }\r\n            }\r\n        );\r\n    };\r\n    const setUserState = () => {\r\n        let newUserState: PubNubUserState;\r\n        if (props.playerInfo.isAdmin) {\r\n            newUserState = { gameConfig: props.gameConfig as GameConfig, playerInfo: props.playerInfo };\r\n        } else {\r\n            newUserState = { playerInfo: props.playerInfo };\r\n        }\r\n        // Set this user's state in game channel.\r\n        pubNubClient.setState({\r\n            channels: [props.gameChannel],\r\n            state: newUserState\r\n        });\r\n    };\r\n    const getHereNowData = () => {\r\n        pubNubClient.hereNow(\r\n            { channels: [props.gameChannel], includeUUIDs: true, includeState: true },\r\n            (_, response) => {\r\n                console.log('PubNub hereNow', response);\r\n                // If player tries to rejoin but they are the only player left in game channel, then the game \r\n                // is already over and the user gets rerouted to dashboard page by PlayGame component.\r\n                if (props.isRejoiningGame && response.totalOccupancy <= 1) {\r\n                    props.navigateToDashboard();\r\n                    return;\r\n                }\r\n                // Response includes states of players that joined before.\r\n                const dataForGameChannel = response.channels[props.gameChannel];\r\n                if (dataForGameChannel) {\r\n                    const pubNubUserStates: PubNubUserState[] = [];\r\n                    dataForGameChannel.occupants.forEach(occupant => {\r\n                        const userState = occupant.state as PubNubUserState;\r\n                        // Safeguard in case that a user's state should be missing or corrupted.\r\n                        if (!!userState && !!userState.playerInfo) {\r\n                            pubNubUserStates.push(userState);\r\n                        }\r\n                    });\r\n                    props.addPlayers(...pubNubUserStates);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const pubNubListeners: Pubnub.ListenerParameters = {\r\n            message: messageEvent => {\r\n                console.log('PubNub message event', messageEvent);\r\n                // Make sure that message is controlled game message with 'type' attribute.\r\n                if (messageEvent.message.type) {\r\n                    props.processPubNubMessage(messageEvent);\r\n                }\r\n            },\r\n            presence: presenceEvent => {\r\n                console.log('PubNub presence event', presenceEvent);\r\n                // Check for 'state-change' events and process state from new player.\r\n                if (presenceEvent.action === 'state-change') {\r\n                    const userState = presenceEvent.state as PubNubUserState;\r\n                    if (userState.playerInfo.id !== props.playerInfo.id) {\r\n                        props.addPlayers(userState);\r\n                    }\r\n                }\r\n            },\r\n            status: statusEvent => {\r\n                console.log('PubNub status event', statusEvent);\r\n                if (statusEvent.category === 'PNConnectedCategory') {\r\n                    console.log('Player is connected to PubNub game channel');\r\n                    setUserStateAndGetHereNowIfGameIsOpen();\r\n                }\r\n            }\r\n        };\r\n        pubNubClient.addListener(pubNubListeners);\r\n        pubNubClient.subscribe({\r\n            channels: [props.gameChannel],\r\n            withPresence: true\r\n        });\r\n        // When this component is destroyed, we unsubscribe from game channel.\r\n        return () => {\r\n            pubNubClient.removeListener(pubNubListeners);\r\n            pubNubClient.unsubscribeAll();\r\n        }\r\n    });\r\n    return null;\r\n};\r\n\r\nexport default React.memo(PubNubEventHandler);\r\n","import PubNub from 'pubnub';\r\n\r\nconst PUBNUB_KEYS = require('./pubnub.config.json');\r\n\r\nexport const PUBNUB_CONFIG: PubNub.PubnubConfig = {\r\n    publishKey: PUBNUB_KEYS.publishKey,\r\n    subscribeKey: PUBNUB_KEYS.subscribeKey,\r\n    uuid: undefined, // ⇨ is set by PlayGame component,\r\n    ssl: true\r\n};\r\n","import { cloneDeep } from 'lodash';\r\nimport Pubnub from 'pubnub';\r\nimport { PubNubProvider } from 'pubnub-react';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport AdminPanel from '../../components/AdminPanel/AdminPanel';\r\nimport { LetterAnimation } from '../../components/LetterAnimation/LetterAnimation';\r\nimport LoadingScreen from '../../components/LoadingScreen/LoadingScreen';\r\nimport PhaseEvaluateRound from '../../components/PhaseEvaluateRound/PhaseEvaluateRound';\r\nimport PhaseFillOutTextfields from '../../components/PhaseFillOutTextfields/PhaseFillOutTextfields';\r\nimport PhaseWaitingToStart from '../../components/PhaseWaitingToStart/PhaseWaitingToStart';\r\nimport PubNubEventHandler from '../../components/PubNubEventHandler/PubNubEventHandler';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { GamePhase } from '../../constants/game.constant';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    PubNubCurrentRoundInputsMessage,\r\n    PubNubDataForCurrentGameMessage,\r\n    PubNubDataForCurrentGameMessagePayload,\r\n    PubNubEvaluationOfPlayerInputMessage,\r\n    PubNubKickPlayerMessage,\r\n    PubNubMessage,\r\n    PubNubMessageType,\r\n    PubNubUserState,\r\n} from '../../models/pub-nub-data.model';\r\nimport { AppAction, resetAppState, setDataOfFinishedGame, SetDataOfFinishedGamePayload } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport {\r\n    calculatePointsForCategory,\r\n    calculatePointsForRound,\r\n    compressGameRoundEvaluation,\r\n    createGameRoundEvaluation,\r\n    decompressGameRoundEvaluation,\r\n    getEmptyRoundInputs,\r\n    getMinNumberOfInvalids,\r\n    getNumberOfInvalids,\r\n    getPlayersInAlphabeticalOrder,\r\n    markEmptyPlayerInputsAsInvalid,\r\n    restoreGameRoundsOfRunningGameFromLocalStorage,\r\n    shouldUserRespondToRequestGameDataMessage,\r\n    setPointsAndValidityOfPlayerInputs,\r\n} from '../../utils/game.utils';\r\nimport { convertCollectionToMap, convertMapToCollection } from '../../utils/general.utils';\r\nimport {\r\n    getRunningGameConfigFromLocalStorage,\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setRunningGameConfigInLocalStorage,\r\n    setRunningGameRoundInLocalStorage,\r\n} from '../../utils/local-storage.utils';\r\n\r\ninterface PlayGamePropsFromStore {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string | null;\r\n    isRejoiningGame: boolean;\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n}\r\ninterface PlayGameDispatchProps {\r\n    onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => void;\r\n    onResetAppState: () => void;\r\n}\r\ninterface PlayGameProps extends PlayGamePropsFromStore, PlayGameDispatchProps, RouterProps { }\r\nexport interface PlayGameState {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentPhase: GamePhase;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    currentRoundInputs: PlayerInput[];\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[];\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    showLetterAnimation: boolean;\r\n    showLoadingScreen: boolean;\r\n}\r\n\r\nclass PlayGame extends Component<PlayGameProps, PlayGameState> {\r\n    public state: PlayGameState = {\r\n        allPlayers: new Map<string, PlayerInfo>(),\r\n        currentPhase: GamePhase.waitingToStart,\r\n        currentRound: 1,\r\n        currentRoundEvaluation: new Map<string, PlayerInputEvaluation[]>(),\r\n        currentRoundInputs: [],\r\n        gameConfig: null,\r\n        gameRounds: [],\r\n        playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n        showLetterAnimation: false,\r\n        showLoadingScreen: true\r\n    };\r\n    private pubNubClient: any;\r\n\r\n    public render() {\r\n        // This check serves as a route guard. If gameId and playerInfo aren't present in state,\r\n        // then user wasn't redirected here from NewGame or JoinGame component.\r\n        if (this.props.gameId === null || this.props.playerInfo === null) { return null; }\r\n\r\n        const { gameId, playerInfo } = this.props;\r\n        const { showLetterAnimation, showLoadingScreen } = this.state;\r\n        if (!this.pubNubClient) {\r\n            this.pubNubClient = new Pubnub({ ...PUBNUB_CONFIG, uuid: playerInfo.id });\r\n        }\r\n\r\n        let currentPhaseElement: JSX.Element | null = null;\r\n        switch (this.state.currentPhase) {\r\n            case GamePhase.waitingToStart:\r\n                currentPhaseElement = (\r\n                    <PhaseWaitingToStart\r\n                        allPlayers={this.state.allPlayers}\r\n                        gameConfig={this.state.gameConfig}\r\n                        gameId={gameId}\r\n                        playerInfo={playerInfo}\r\n                        sendMessage={this.sendMessage}\r\n                    />\r\n                );\r\n                break;\r\n            case GamePhase.fillOutTextfields:\r\n                currentPhaseElement = (\r\n                    <PhaseFillOutTextfields\r\n                        currentRound={this.state.currentRound}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRoundInputs={this.state.currentRoundInputs}\r\n                        updateCurrentRoundInputs={this.updateCurrentRoundInputs}\r\n                        sendRoundFinishedMessage={this.sendRoundFinishedMessage}\r\n                    />\r\n                );\r\n                break;\r\n            case GamePhase.evaluateRound:\r\n                currentPhaseElement = (\r\n                    <PhaseEvaluateRound\r\n                        allPlayers={this.state.allPlayers}\r\n                        currentRound={this.state.currentRound}\r\n                        currentRoundEvaluation={this.state.currentRoundEvaluation}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRounds={this.state.gameRounds}\r\n                        playerInfo={playerInfo}\r\n                        playersThatFinishedEvaluation={this.state.playersThatFinishedEvaluation}\r\n                        updateEvaluationOfPlayerInput={this.updateEvaluationOfPlayerInput}\r\n                        sendEvaluationFinishedMessage={this.sendEvaluationFinishedMessage}\r\n                    />\r\n                );\r\n                break;\r\n            default:\r\n        }\r\n        const letterAnimationElement = (\r\n            <LetterAnimation\r\n                letterToUnveil={this.state.gameConfig ? this.state.gameConfig.letters[this.state.currentRound - 1] : ''}\r\n                callbackWhenAnimationDone={this.callbackWhenAnimationDone}\r\n            />\r\n        );\r\n        const adminPanel = <AdminPanel allPlayers={this.state.allPlayers} kickPlayer={this.sendKickPlayerMessage} />;\r\n\r\n        return (\r\n            <PubNubProvider client={this.pubNubClient}>\r\n                {/* The props passed to PubNubEventHandler must never be changed,\r\n                    in order to ensure that the component is not rerendered!\r\n                    (PubNubEventHandler is wrapped in React.memo) */}\r\n                <PubNubEventHandler\r\n                    gameChannel={this.props.gameId}\r\n                    gameConfig={this.props.gameConfig}\r\n                    isRejoiningGame={this.props.isRejoiningGame}\r\n                    playerInfo={this.props.playerInfo}\r\n                    navigateToDashboard={this.navigateToDashboard}\r\n                    addPlayers={this.addPlayers}\r\n                    processPubNubMessage={this.processPubNubMessage}\r\n                />\r\n                {showLetterAnimation ? letterAnimationElement : null}\r\n                {showLoadingScreen ? <LoadingScreen /> : null}\r\n                {!showLoadingScreen && !showLetterAnimation ? (\r\n                    <div className=\"main-content-wrapper\">\r\n                        {currentPhaseElement}\r\n                    </div>\r\n                ) : null}\r\n                {playerInfo.isAdmin && this.state.allPlayers.size > 1 ? adminPanel : null}\r\n            </PubNubProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { gameConfig, gameId, isRejoiningGame, playerInfo } = this.props;\r\n        // If gameId and playerInfo aren't present in application state, then reroute user to dashboard.\r\n        if (gameId === null || playerInfo === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        // If player is rejoining the game, we need to request the game data from the other players.\r\n        if (isRejoiningGame) {\r\n            this.sendMessage({ type: PubNubMessageType.requestGameData });\r\n        } else {\r\n            const allPlayers = new Map<string, PlayerInfo>();\r\n            allPlayers.set(playerInfo.id, playerInfo);\r\n            // If user is the game admin, the gameConfig can be taken from application state\r\n            // and we can hide the loading screen and show PhaseWaitingToStart component right away.\r\n            if (playerInfo.isAdmin) {\r\n                setRunningGameConfigInLocalStorage(gameConfig as GameConfig);\r\n                this.setState({ allPlayers, gameConfig, showLoadingScreen: false });\r\n            } else {\r\n                this.setState({ allPlayers });\r\n            }\r\n        }\r\n    }\r\n\r\n    private sendMessage = (message: PubNubMessage) => {\r\n        this.pubNubClient.publish(\r\n            {\r\n                channel: this.props.gameId as string,\r\n                message,\r\n                storeInHistory: true,\r\n                ttl: 1 // time to live (in hours)\r\n            },\r\n            (status: any, response: any) => console.log('PubNub Publish:', status, response)\r\n        );\r\n    };\r\n\r\n    private callbackWhenAnimationDone = () => {\r\n        this.setState({ showLetterAnimation: false });\r\n    }\r\n\r\n    private navigateToDashboard = () => {\r\n        removeAllDataOfRunningGameFromLocalStorage();\r\n        this.props.onResetAppState();\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    /**\r\n     * Called by PubNubEventHandler when it receives a PubNub presence event with action 'state-change'.\r\n     * It processes information about players that had already joined the game before this user joined\r\n     * (hereNow result) or about a player that joins the game after this user joined.\r\n     */\r\n    private addPlayers = (...newPlayers: PubNubUserState[]) => {\r\n        // Ignore information about players that try to join after the game has already started.\r\n        if (this.state.currentPhase !== GamePhase.waitingToStart) { return; }\r\n        let gameConfig: GameConfig | null = null;\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        newPlayers.forEach(newPlayer => {\r\n            allPlayers.set(newPlayer.playerInfo.id, newPlayer.playerInfo);\r\n            // If we are not the game admin, we obtain the game config from the admin's PubNubUserState.\r\n            if (newPlayer.gameConfig && !this.state.gameConfig) {\r\n                gameConfig = newPlayer.gameConfig;\r\n            }\r\n        });\r\n        // Only after we received the gameConfig from the admin, we hide the loading screen\r\n        // and render the PhaseWaitingToStart component instead.\r\n        if (gameConfig) {\r\n            setRunningGameConfigInLocalStorage(gameConfig);\r\n            this.setState({ allPlayers, gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with attribute 'type'.\r\n     */\r\n    private processPubNubMessage = (event: Pubnub.MessageEvent) => {\r\n        const message = event.message as PubNubMessage;\r\n        switch (message.type) {\r\n            case PubNubMessageType.startGame:\r\n                this.startGame();\r\n                break;\r\n            case PubNubMessageType.roundFinished:\r\n                this.stopRoundAndSendInputs();\r\n                break;\r\n            case PubNubMessageType.currentRoundInputs:\r\n                this.addPlayerInputForFinishedRound(event.publisher, message.payload);\r\n                break;\r\n            case PubNubMessageType.evaluationOfPlayerInput:\r\n                this.processEvaluationOfPlayerInput(event.publisher, message.payload);\r\n                break;\r\n            case PubNubMessageType.evaluationFinished:\r\n                this.countPlayerAsEvaluationFinished(event.publisher);\r\n                break;\r\n            case PubNubMessageType.kickPlayer:\r\n                this.removePlayerFromGame(message.payload)\r\n                break;\r\n            case PubNubMessageType.requestGameData:\r\n                if (shouldUserRespondToRequestGameDataMessage(this.props.playerInfo, this.state.allPlayers, event.publisher)) {\r\n                    if (this.state.allPlayers.has(event.publisher)) {\r\n                        // Only send data to a rejoining player who hasn't been kicked out by the admin.\r\n                        this.sendDataForCurrentGame(event.publisher);\r\n                    } else {\r\n                        // Send kickPlayer message again for kicked out player that tried to rejoin game.\r\n                        this.sendKickPlayerMessage(event.publisher);\r\n                    }\r\n                }\r\n                break;\r\n            case PubNubMessageType.dataForCurrentGame:\r\n                this.processDataForCurrentGame(message.payload);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    /**\r\n    * This method is called when the PubNub message 'startGame' is received.\r\n    */\r\n    private startGame = () => {\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const currentRoundEvaluation = createGameRoundEvaluation(this.state.allPlayers, gameConfig.categories);\r\n        this.setState({\r\n            currentPhase: GamePhase.fillOutTextfields,\r\n            currentRoundEvaluation,\r\n            currentRoundInputs: getEmptyRoundInputs(gameConfig.categories.length),\r\n            showLetterAnimation: true\r\n        });\r\n    }\r\n\r\n    private updateCurrentRoundInputs = (newCurrentRoundInputs: PlayerInput[]) => {\r\n        this.setState({ currentRoundInputs: newCurrentRoundInputs });\r\n    }\r\n\r\n    private sendRoundFinishedMessage = () => {\r\n        this.setState({ showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.roundFinished });\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'roundFinished' is received.\r\n     */\r\n    private stopRoundAndSendInputs = () => {\r\n        // Prepare new GameRound object for addPlayerInputForFinishedRound method\r\n        // as well as new currentRoundEvaluation object for evaluation phase.\r\n        const gameRounds: GameRound[] = [...this.state.gameRounds, new Map<string, PlayerInput[]>()];\r\n        this.setState({ gameRounds, showLoadingScreen: true });\r\n        // Send this player's text inputs of current round to other players (and herself/himself).\r\n        const message = new PubNubCurrentRoundInputsMessage(markEmptyPlayerInputsAsInvalid(this.state.currentRoundInputs));\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'currentRoundInputs' is received.\r\n     */\r\n    private addPlayerInputForFinishedRound = (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => {\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        const roundIndex = this.state.currentRound - 1;\r\n        gameRounds[roundIndex].set(playerId, playerInputsForFinishedRound);\r\n        // Did we collect the inputs from all players?\r\n        if (gameRounds[roundIndex].size === this.state.allPlayers.size) {\r\n            // If yes, then calculate points and start the evaluation of the finished round.\r\n            calculatePointsForRound((this.state.gameConfig as GameConfig).scoringOptions, gameRounds[roundIndex]);\r\n            setRunningGameRoundInLocalStorage(this.state.currentRound, gameRounds[roundIndex]);\r\n            this.setState({ currentPhase: GamePhase.evaluateRound, gameRounds, showLoadingScreen: false });\r\n        } else {\r\n            // If no, then only store the updated gameRounds object in state.\r\n            this.setState({ gameRounds });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate a player input evaluation via a\r\n     * PubNub message. This message is then processed by all players in the game (including the user who sent it).\r\n     */\r\n    private updateEvaluationOfPlayerInput = (newEvaluation: EvaluationOfPlayerInput) => {\r\n        const message = new PubNubEvaluationOfPlayerInputMessage(newEvaluation);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'evaluationOfPlayerInput' is received.\r\n     * It processes the new evaluation and changes data in currentRoundEvaluation and gameRounds accordingly.\r\n     */\r\n    private processEvaluationOfPlayerInput = (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => {\r\n        if (!this.state.allPlayers.has(evaluatingPlayerId)) { return; }\r\n        const { categoryIndex, evaluatedPlayerId, markedAsValid } = newEvaluation;\r\n        const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n        const playerInputEvaluations = currentRoundEvaluation.get(evaluatedPlayerId) as PlayerInputEvaluation[];\r\n        playerInputEvaluations[categoryIndex].set(evaluatingPlayerId, markedAsValid);\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        const isInputValid = getNumberOfInvalids(playerInputEvaluations[categoryIndex]) < getMinNumberOfInvalids(this.state.allPlayers.size);\r\n        const finishedRound = gameRounds[this.state.currentRound - 1];\r\n        (finishedRound.get(evaluatedPlayerId) as PlayerInput[])[categoryIndex].valid = isInputValid;\r\n        calculatePointsForCategory((this.state.gameConfig as GameConfig).scoringOptions, finishedRound, categoryIndex);\r\n        this.setState({ currentRoundEvaluation, gameRounds });\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate to all players\r\n     * that the user of this instance of the game has finished evaluating the current round.\r\n     */\r\n    private sendEvaluationFinishedMessage = () => this.sendMessage({ type: PubNubMessageType.evaluationFinished });\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'evaluationFinished' is received.\r\n     */\r\n    private countPlayerAsEvaluationFinished = (evaluatingPlayerId: string) => {\r\n        const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n        playersThatFinishedEvaluation.set(evaluatingPlayerId, true);\r\n        if (playersThatFinishedEvaluation.size === this.state.allPlayers.size) {\r\n            this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n        } else {\r\n            this.setState({ playersThatFinishedEvaluation });\r\n        }\r\n    }\r\n\r\n    private processEvaluationsAndStartNextRoundOrFinishGame = () => {\r\n        const { allPlayers, currentRound, gameRounds } = this.state;\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        if (currentRound === gameConfig.numberOfRounds) {\r\n            // Finish game and show results.\r\n            removeAllDataOfRunningGameFromLocalStorage();\r\n            this.props.onSetDataOfFinishedGame({ allPlayers, gameConfig, gameRounds });\r\n            this.props.history.push('/results');\r\n        } else {\r\n            // Save finished game round in local storage and start next round of the game.\r\n            setRunningGameRoundInLocalStorage(this.state.currentRound, gameRounds[currentRound - 1]);\r\n            this.setState({\r\n                currentPhase: GamePhase.fillOutTextfields,\r\n                currentRoundEvaluation: createGameRoundEvaluation(allPlayers, gameConfig.categories),\r\n                currentRoundInputs: getEmptyRoundInputs(gameConfig.categories.length),\r\n                currentRound: currentRound + 1,\r\n                gameRounds,\r\n                playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n                showLetterAnimation: true\r\n            });\r\n        }\r\n    }\r\n\r\n    private sendKickPlayerMessage = (playerId: string) => {\r\n        const message = new PubNubKickPlayerMessage(playerId);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'kickPlayer' is received.\r\n     */\r\n    private removePlayerFromGame = (playerId: string) => {\r\n        // If the player to be removed is the user of this game instance, then navigate to dashboard.\r\n        if (this.props.playerInfo.id === playerId) {\r\n            removeAllDataOfRunningGameFromLocalStorage();\r\n            this.props.onResetAppState();\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        if (this.state.allPlayers.has(playerId)) {\r\n            // Remove player's data from component's state.\r\n            const allPlayers = cloneDeep(this.state.allPlayers);\r\n            allPlayers.delete(playerId);\r\n            const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n            currentRoundEvaluation.delete(playerId);\r\n            const gameRounds = cloneDeep(this.state.gameRounds);\r\n            gameRounds.forEach(round => round.delete(playerId));\r\n            const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n            playersThatFinishedEvaluation.delete(playerId);\r\n            this.setState({ allPlayers, currentRoundEvaluation, gameRounds, playersThatFinishedEvaluation });\r\n            // If we're currently in evaluation phase, check if remaining players have finished evaluation.\r\n            if (this.state.currentPhase === GamePhase.evaluateRound && playersThatFinishedEvaluation.size === allPlayers.size) {\r\n                this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n            }\r\n        }\r\n    }\r\n\r\n    private sendDataForCurrentGame = (requestingPlayerId: string) => {\r\n        const sortedPlayers = getPlayersInAlphabeticalOrder(this.state.allPlayers);\r\n        const compressedGameRoundEvaluation = this.state.currentPhase === GamePhase.evaluateRound\r\n            ? compressGameRoundEvaluation(this.state.currentRoundEvaluation, sortedPlayers) : [];\r\n        const message = new PubNubDataForCurrentGameMessage({\r\n            compressedGameRoundEvaluation,\r\n            currentPhase: this.state.currentPhase,\r\n            currentRound: this.state.currentRound,\r\n            playersThatFinishedEvaluation: convertMapToCollection<boolean>(this.state.playersThatFinishedEvaluation),\r\n            requestingPlayerId,\r\n            sortedPlayers\r\n        });\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'dataForCurrentGame' is received.\r\n     */\r\n    private processDataForCurrentGame = (payload: PubNubDataForCurrentGameMessagePayload) => {\r\n        // Only process the information and update state if the message was meant for this user.\r\n        if (this.props.playerInfo.id !== payload.requestingPlayerId) { return; }\r\n\r\n        const gameConfig = getRunningGameConfigFromLocalStorage();\r\n        // If we're in the evaluation phase, then we also need to restore the data for the current round.\r\n        // Otherwise we only need to restore the data of the finished rounds.\r\n        const numberOfRoundsToRestore = payload.currentPhase === GamePhase.evaluateRound ? payload.currentRound : payload.currentRound - 1;\r\n        const gameRounds = restoreGameRoundsOfRunningGameFromLocalStorage(numberOfRoundsToRestore);\r\n        if (gameConfig && gameRounds.length === numberOfRoundsToRestore) {\r\n            const allPlayers = new Map<string, PlayerInfo>();\r\n            payload.sortedPlayers.forEach(player => allPlayers.set(player.id, player));\r\n            let currentRoundEvaluation: GameRoundEvaluation;\r\n            // If we are in evaluation phase, then we received the current evaluations and need to apply them to the player inputs.\r\n            if (payload.currentPhase === GamePhase.evaluateRound) {\r\n                currentRoundEvaluation = decompressGameRoundEvaluation(payload.compressedGameRoundEvaluation, payload.sortedPlayers);\r\n                setPointsAndValidityOfPlayerInputs(\r\n                    gameConfig.scoringOptions, currentRoundEvaluation, getMinNumberOfInvalids(allPlayers.size), gameRounds[payload.currentRound - 1]\r\n                );\r\n            } else {\r\n                currentRoundEvaluation = createGameRoundEvaluation(allPlayers, gameConfig.categories);\r\n            }\r\n            this.setState({\r\n                allPlayers,\r\n                currentPhase: payload.currentPhase,\r\n                currentRound: payload.currentRound,\r\n                currentRoundEvaluation,\r\n                currentRoundInputs: getEmptyRoundInputs(gameConfig.categories.length),\r\n                gameConfig,\r\n                gameRounds,\r\n                playersThatFinishedEvaluation: convertCollectionToMap<boolean>(payload.playersThatFinishedEvaluation),\r\n                showLoadingScreen: false\r\n            });\r\n        } else {\r\n            console.log('Error: Can\\'t restore game session because data is missing in local storage!');\r\n            this.navigateToDashboard();\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): PlayGamePropsFromStore => {\r\n    return {\r\n        gameConfig: state.gameConfig,\r\n        gameId: state.gameId,\r\n        isRejoiningGame: state.isRejoiningGame,\r\n        playerInfo: state.playerInfo as PlayerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): PlayGameDispatchProps => {\r\n    return {\r\n        onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => dispatch(setDataOfFinishedGame(payload)),\r\n        onResetAppState: () => dispatch(resetAppState())\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);\r\n","import './App.css';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Header from './components/Header/Header';\r\nimport {\r\n    MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS,\r\n    MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS as MAX_PLAYER_ID_VALIDITY_IN_SECONDS,\r\n} from './constants/app.constant';\r\nimport { AppTheme, AppThemes } from './constants/themes.constant';\r\nimport Dashboard from './containers/Dashboard/Dashboard';\r\nimport GameManual from './containers/GameManual/GameManual';\r\nimport GameResults from './containers/GameResults/GameResults';\r\nimport JoinGame from './containers/JoinGame/JoinGame';\r\nimport NewGame from './containers/NewGame/NewGame';\r\nimport PlayGame from './containers/PlayGame/PlayGame';\r\nimport { StoredRunningGameInfo } from './models/game.interface';\r\nimport { StoredPlayerInfo } from './models/player.interface';\r\nimport { AppAction, setStoredPlayerInfo, setStoredRunningGameInfo } from './store/app.actions';\r\nimport { convertDateToUnixTimestamp } from './utils/general.utils';\r\nimport {\r\n    getAppThemeIdFromLocalStorage,\r\n    getPlayerInfoFromLocalStorage,\r\n    getRunningGameInfoFromLocalStorage,\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setAppThemeIdInLocalStorage,\r\n    setPlayerInfoInLocalStorage,\r\n} from './utils/local-storage.utils';\r\n\r\nconst backspaceDisabler = require('backspace-disabler');\r\n\r\ninterface AppDispatchProps {\r\n    onSetStoredPlayerInfo: (payload: StoredPlayerInfo) => void,\r\n    onSetStoredRunningGameInfo: (payload: StoredRunningGameInfo) => void\r\n}\r\ninterface AppState {\r\n    activeTheme: AppTheme;\r\n}\r\nclass App extends Component<AppDispatchProps, AppState> {\r\n    public state: AppState = {\r\n        activeTheme: AppThemes[0],\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ThemeProvider theme={this.state.activeTheme.muiTheme}>\r\n                <div className=\"app-container\">\r\n                    <HashRouter basename={process.env.PUBLIC_URL}>\r\n                        <Header\r\n                            theme={this.state.activeTheme}\r\n                            switchTheme={this.switchThemeHandler}\r\n                        />\r\n                        <main\r\n                            className={'app-main ' + this.state.activeTheme.className}\r\n                            style={this.state.activeTheme.style}\r\n                        >\r\n                            <Switch>\r\n                                <Route path=\"/manual\" exact component={GameManual} />\r\n                                <Route path=\"/newgame\" exact component={NewGame} />\r\n                                <Route path=\"/joingame\" exact component={JoinGame} />\r\n                                <Route path=\"/play\" exact component={PlayGame} />\r\n                                <Route path=\"/results\" exact component={GameResults} />\r\n                                <Route path=\"/\" component={Dashboard} />\r\n                            </Switch>\r\n                        </main>\r\n                    </HashRouter>\r\n                </div>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // Prevent browser back on backspace (e.g. in Firefox).\r\n        backspaceDisabler.disable();\r\n        const appThemeId = getAppThemeIdFromLocalStorage();\r\n        if (appThemeId) {\r\n            const appTheme = AppThemes.find(theme => theme.id === appThemeId);\r\n            if (appTheme) {\r\n                this.setState({ activeTheme: appTheme });\r\n            }\r\n        }\r\n        let storedPlayerInfo = getPlayerInfoFromLocalStorage();\r\n        const nowTimestamp = convertDateToUnixTimestamp(new Date());\r\n        // If no stored player info was found or player's id is past validity, create a new uuid and store in local storage.\r\n        if (!storedPlayerInfo || nowTimestamp - storedPlayerInfo.idCreationTimestamp > MAX_PLAYER_ID_VALIDITY_IN_SECONDS) {\r\n            storedPlayerInfo = { id: uuidv4(), idCreationTimestamp: nowTimestamp, name: storedPlayerInfo ? storedPlayerInfo.name : '' };\r\n            setPlayerInfoInLocalStorage(storedPlayerInfo);\r\n        }\r\n        this.props.onSetStoredPlayerInfo(storedPlayerInfo);\r\n        const runningGameInfo = getRunningGameInfoFromLocalStorage();\r\n        if (runningGameInfo) {\r\n            // A running game is only valid for the time specified in the max validity constant.\r\n            if (nowTimestamp - runningGameInfo.idCreationTimestamp <= MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS) {\r\n                this.props.onSetStoredRunningGameInfo(runningGameInfo);\r\n            } else {\r\n                removeAllDataOfRunningGameFromLocalStorage();\r\n            }\r\n        }\r\n    }\r\n\r\n    private switchThemeHandler = (newTheme: AppTheme) => {\r\n        this.setState({ activeTheme: newTheme });\r\n        setAppThemeIdInLocalStorage(newTheme.id);\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): AppDispatchProps => {\r\n    return {\r\n        onSetStoredPlayerInfo: (payload: StoredPlayerInfo) => dispatch(setStoredPlayerInfo(payload)),\r\n        onSetStoredRunningGameInfo: (payload: StoredRunningGameInfo) => dispatch(setStoredRunningGameInfo(payload))\r\n    }\r\n};\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","/** 7 days in seconds */\r\nexport const MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS = 7 * 24 * 60 * 60;\r\n/** 1 hour in seconds */\r\nexport const MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS = 60 * 60;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GameConfig, GameRound } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport {\r\n    AppAction,\r\n    RESET_APP_STATE,\r\n    SET_DATA_FOR_NEW_GAME,\r\n    SET_DATA_OF_FINISHED_GAME,\r\n    SET_STORED_PLAYER_INFO,\r\n    SET_STORED_RUNNING_GAME_INFO,\r\n    SetDataForNewGameAction,\r\n    SetDataOfFinishedGameAction,\r\n    SetStoredPlayerInfoAction,\r\n    SetStoredRunningGameInfoAction,\r\n} from './app.actions';\r\n\r\nexport interface AppState {\r\n    allPlayers: Map<string, PlayerInfo> | null;\r\n    gameId: string | null;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[] | null;\r\n    isRejoiningGame: boolean;\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\n\r\nconst initialState: AppState = {\r\n    allPlayers: null,\r\n    gameId: null,\r\n    gameConfig: null,\r\n    gameRounds: null,\r\n    isRejoiningGame: false,\r\n    playerIdCreationTimestamp: 0,\r\n    playerInfo: null\r\n};\r\n\r\nexport const appReducer = (state: AppState = initialState, action: AppAction): AppState => {\r\n    switch (action.type) {\r\n        case SET_STORED_PLAYER_INFO:\r\n            const storedPlayerInfo = (action as SetStoredPlayerInfoAction).payload;\r\n            return {\r\n                ...state,\r\n                isRejoiningGame: false,\r\n                playerIdCreationTimestamp: storedPlayerInfo.idCreationTimestamp,\r\n                playerInfo: {\r\n                    id: storedPlayerInfo.id,\r\n                    isAdmin: false,\r\n                    name: storedPlayerInfo.name\r\n                }\r\n            };\r\n        case SET_STORED_RUNNING_GAME_INFO:\r\n            const storedRunningGameInfo = (action as SetStoredRunningGameInfoAction).payload;\r\n            return {\r\n                ...state,\r\n                isRejoiningGame: true,\r\n                gameId: storedRunningGameInfo.gameId,\r\n                playerInfo: {\r\n                    ...state.playerInfo as PlayerInfo,\r\n                    isAdmin: storedRunningGameInfo.isPlayerAdmin\r\n                }\r\n            };\r\n        case SET_DATA_FOR_NEW_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataForNewGameAction).payload\r\n            };\r\n        case SET_DATA_OF_FINISHED_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataOfFinishedGameAction).payload,\r\n                // Set gameId to null to prevent player from manually opening PlayGame route.\r\n                gameId: null\r\n            };\r\n        case RESET_APP_STATE:\r\n            return {\r\n                ...state,\r\n                allPlayers: null,\r\n                gameId: null,\r\n                gameConfig: null,\r\n                gameRounds: null,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { appReducer } from './store/app.reducer';\r\nimport { Provider } from 'react-redux';\r\n\r\nexport const appStore = createStore(appReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={appStore}><App /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}