{"version":3,"sources":["constants/themes.constant.ts","components/ChipsArray/ChipsArray.tsx","components/Header/Header.tsx","components/SectionHeader/SectionHeader.tsx","containers/Dashboard/Dashboard.tsx","components/ToDashboardButton/ToDashboardButton.tsx","store/app.actions.ts","utils/game.utils.ts","utils/general.utils.ts","containers/GameResults/GameResults.tsx","config/pubnub.config.ts","containers/JoinGame/JoinGame.tsx","constants/game.constant.ts","containers/NewGame/NewGame.tsx","models/pub-nub-data.model.ts","components/LoadingScreen/LoadingScreen.tsx","components/GameRoundChip/GameRoundChip.tsx","components/PhaseEvaluateRound/PhaseEvaluateRound.tsx","components/PhaseFillOutTextfields/PhaseFillOutTextfields.tsx","components/JoinGameLink/JoinGameLink.tsx","components/PlayerList/PlayerList.tsx","components/PhaseWaitingToStart/PhaseWaitingToStart.tsx","components/PubNubEventHandler/PubNubEventHandler.tsx","containers/PlayGame/PlayGame.tsx","utils/local-storage.utils.ts","App.tsx","serviceWorker.ts","store/app.reducer.ts","index.tsx"],"names":["APP_THEME_ID","ChipType","AppThemes","id","green","className","displayName","muiTheme","createMuiTheme","palette","primary","secondary","red","style","background","process","blue","deepOrange","orange","indigo","pink","purple","amber","Header","state","anchorEl","version","handleClick","event","setState","currentTarget","handleClose","color","handleMenuItemClick","selectedTheme","props","switchTheme","playerNameParagraph","this","playerName","theme","Button","aria-controls","aria-haspopup","onClick","Menu","keepMounted","open","Boolean","onClose","map","item","index","MenuItem","key","packageJson","Component","connect","playerInfo","name","SectionHeader","Fragment","text","showDivider","Divider","Dashboard","Link","component","RouterLink","to","ToDashboardButton","type","variant","size","startIcon","onReturnToDashboard","setDataForNewGame","payload","getRandomnLetters","numberOfLetters","Error","randomnLetters","alphabetWithoutQXY","i","randomnLetter","randomnItem","push","filter","letter","markEmptyPlayerInputsAsInvalid","playerInputs","input","valid","createGameRoundEvaluation","players","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","_","evaluationForOneCategory","evaluatingPlayer","set","getMinNumberOfMarkedAsInvalid","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","processPlayerInputEvaluations","gameRound","roundEvaluation","minNumberOfInvalids","evaluatedGameRound","cloneDeep","playerId","get","length","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","points","round","reduce","total","Object","keys","sort","a","b","createAndFillArray","value","Array","fill","GameResults","getResultIcon","isWinner","fontSize","returnToDashboard","history","onResetAppState","gameConfig","mostPoints","Math","max","result","List","ListItem","ListItemIcon","ListItemText","singular","plural","numberOfRounds","letters","join","dispatch","PUBNUB_KEYS","require","PUBNUB_CONFIG","publishKey","subscribeKey","uuid","uuidv4","ssl","JoinGame","idInput","nameInput","validateInputs","handleInputChange","target","handleSubmit","preventDefault","onSetGameData","gameId","isAdmin","joinGameForm","onSubmit","noValidate","autoComplete","TextField","label","onChange","fullWidth","required","error","query","URLSearchParams","location","search","has","GamePhase","useStyles","makeStyles","createStyles","root","display","justifyContent","flexWrap","padding","spacing","chip","margin","ChipsArray","classes","chipsArray","Chip","chipType","undefined","onDelete","removeChip","deleteIcon","STANDARD_CATEGORIES","AVAILABLE_CATEGORIES","CategoryArray","PubNubMessageType","NewGame","availableCategories","numberOfRoundsInput","selectedCategories","handleNameInputChange","handleNumberOfRoundsInputChange","updateCategoryArrays","chipToRemove","removeFromArray","newSelectedCategories","newAvailableCategories","selected","category","numberOfRoundsInputLabel","newGameForm","available","loadingScreen","position","top","left","height","width","backgroundColor","centralContent","transform","marginBlockStart","fontWeight","loadingSpinner","loadingSpinnerSize","LoadingScreen","messageElement","message","CircularProgress","centerContent","marginTop","borderRadius","boxShadow","GameRoundChip","currentLetter","currentRound","icon","PhaseEvaluateRound","getMinNumberOfNecessaryMarkedAsInvalid","finishedGameRound","sortedPlayers","from","data","charCodeAt","createEvaluationCheckboxes","categoryIndex","indexInSortedPlayers","player","evaluationForCategory","currentRoundEvaluation","Tooltip","title","getEvaluatedByText","Checkbox","checked","inputProps","checkboxOwner","updateEvaluationOfPlayerInput","evaluatedPlayerId","handleCheckboxChange","InputProps","startAdornment","InputAdornment","IconButton","aria-label","sendEvaluationFinishedMessage","PhaseFillOutTextfields","gameRoundInputs","newGameRoundInputs","updateCurrentRoundInputs","sendRoundFinishedMessage","PubNubCurrentRoundInputsMessage","currentRoundInputs","PubNubEvaluationOfPlayerInputMessage","evaluationOfPlayerInput","JoinGameLink","url","window","href","joinGameLink","slice","OutlinedInput","disabled","endAdornment","element","document","createElement","setAttribute","body","appendChild","select","execCommand","removeChild","copyToClipboard","PlayerList","playerNames","PhaseWaitingToStart","waitForGameStartElement","createGameSettingsElement","sendMessage","startGame","React","memo","pubNubClient","usePubNub","setUserState","newUserState","channels","gameChannel","getHereNowData","hereNow","includeUUIDs","includeState","response","console","log","dataForGameChannel","addPlayers","occupants","occupant","useEffect","pubNubListeners","messageEvent","roundFinished","stopRoundAndSendInputs","addPlayerInputForFinishedRound","publisher","processEvaluationOfPlayerInput","evaluationFinished","countPlayerAsEvaluationFinished","presence","presenceEvent","action","userState","status","statusEvent","channel","messages","navigateToDashboard","addListener","subscribe","withPresence","removeListener","unsubscribeAll","PlayGame","currentPhase","waitingToStart","loadingScreenMessage","playersThatFinishedEvaluation","showLoadingScreen","PubNub","publish","storeInHistory","ttl","newPlayers","newPlayer","roundInputs","fillOutTextfields","newCurrentRoundInputs","toPubNubMessage","playerInputsForFinishedRound","evaluateRound","newEvaluation","evaluatingPlayerId","playerInputEvaluations","processEvaluationsAndStartNextRoundOrFinishGame","newGameRounds","onSetDataOfFinishedGame","currentPhaseElement","client","setDataOfFinishedGame","setAppThemeIdInLocalStorage","appTheme","localStorage","setItem","App","activeTheme","switchThemeHandler","newTheme","ThemeProvider","basename","path","exact","appThemeId","getItem","find","hostname","match","initialState","appStore","createStore","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.80f78833.chunk.js","sourcesContent":["import green from '@material-ui/core/colors/green';\r\nimport red from '@material-ui/core/colors/red';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport deepOrange from '@material-ui/core/colors/deepOrange';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport { createMuiTheme, Theme } from '@material-ui/core/styles';\r\nimport CSS from 'csstype';\r\n\r\nexport enum APP_THEME_ID {\r\n    green = 'green',\r\n    blue = 'blue',\r\n    orange = 'orange',\r\n    pink = 'pink'\r\n}\r\n\r\nexport interface AppTheme {\r\n    id: APP_THEME_ID;\r\n    /** The name of the CSS class that is applied to the header and the main element */\r\n    className: string;\r\n    /** The text displayed in the header's color picker dropdown */\r\n    displayName: string;\r\n    muiTheme: Theme;\r\n    style: CSS.Properties;\r\n}\r\n\r\nexport const AppThemes: AppTheme[] = [\r\n    {\r\n        id: APP_THEME_ID.green,\r\n        className: 'green-theme',\r\n        displayName: 'Grün/Wald',\r\n        muiTheme: createMuiTheme({ palette: { primary: green, secondary: red } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(60, 143, 80, 0.3), rgba(60, 143, 80, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/leaves-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.blue,\r\n        className: 'blue-theme',\r\n        displayName: 'Blau/Fluss',\r\n        muiTheme: createMuiTheme({ palette: { primary: blue, secondary: deepOrange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/river-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.orange,\r\n        className: 'orange-theme',\r\n        displayName: 'Orange/Strand',\r\n        muiTheme: createMuiTheme({ palette: { primary: orange, secondary: indigo } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(241, 179, 8, 0.1), rgba(240, 188, 47, 0.1)),\r\n                url('${process.env.PUBLIC_URL}/assets/beach-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.pink,\r\n        className: 'pink-theme',\r\n        displayName: 'Pink/Musik',\r\n        muiTheme: createMuiTheme({ palette: { primary: purple, secondary: amber } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(133, 14, 103, 0.3), rgba(133, 14, 103, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/music-pattern.jpg')`\r\n        }\r\n    },\r\n]\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport React from 'react';\r\n\r\nexport enum ChipType {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface ChipsArrayProps {\r\n    chipsArray: string[];\r\n    chipType: ChipType;\r\n    removeChip: (chip: string) => any;\r\n}\r\n\r\nconst ChipsArray = (props: ChipsArrayProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.chipsArray.map((chip, index) => (\r\n                <Chip\r\n                    key={`chip-to-${props.chipType}-${index}`}\r\n                    color={props.chipType === 'selected' ? 'primary' : undefined}\r\n                    label={chip}\r\n                    className={classes.chip}\r\n                    onDelete={() => props.removeChip(chip)}\r\n                    deleteIcon={props.chipType === 'selected' ? <HighlightOffIcon /> : <DoneIcon />}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChipsArray;\r\n","import React, { Component } from 'react';\r\nimport './Header.css';\r\nimport { Button, Menu, MenuItem } from '@material-ui/core';\r\nimport { AppThemes, AppTheme } from '../../constants/themes.constant';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport packageJson from '../../../package.json';\r\n\r\ninterface HeaderPropsFromStore {\r\n    playerName: string | null;\r\n}\r\ninterface HeaderProps extends HeaderPropsFromStore {\r\n    switchTheme: (newTheme: AppTheme) => any;\r\n    theme: AppTheme;\r\n}\r\ninterface HeaderState {\r\n    anchorEl: EventTarget | null;\r\n    version: string;\r\n}\r\n\r\nexport class Header extends Component<HeaderProps, HeaderState> {\r\n    public state = {\r\n        anchorEl: null,\r\n        version: ''\r\n    };\r\n\r\n    public render() {\r\n        const playerNameParagraph = (\r\n            <p>Spieler: {this.props.playerName ? this.props.playerName : '-'}</p>\r\n        );\r\n        return (\r\n            <header className={'app-header ' + this.props.theme.className}>\r\n                <h1>Stadt-Land-Fluss</h1>\r\n                {playerNameParagraph}\r\n                <p className=\"version\">v{this.state.version}</p>\r\n                <Button\r\n                    className=\"color-picker-button\"\r\n                    aria-controls=\"color-picker-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={this.handleClick}\r\n                >\r\n                    Theme\r\n                </Button>\r\n                <Menu\r\n                    id=\"color-picker-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {AppThemes.map((item, index) => (\r\n                        <MenuItem\r\n                            key={'color-picker-menu-item-' + index}\r\n                            onClick={() => this.handleMenuItemClick(item)}\r\n                        >{item.displayName}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({ version: packageJson.version });\r\n    }\r\n\r\n    private handleClick = (event: any) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    private handleClose = (color: string) => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    private handleMenuItemClick = (selectedTheme: AppTheme) => {\r\n        this.setState({ anchorEl: null });\r\n        this.props.switchTheme(selectedTheme);\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): HeaderPropsFromStore => {\r\n    return {\r\n        playerName: state.playerInfo ? state.playerInfo.name : ''\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Header);\r\n","import './SectionHeader.css';\r\nimport { Divider } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ninterface SectionHeaderProps {\r\n    showDivider: boolean;\r\n    text: string;\r\n}\r\n\r\nexport const SectionHeader: React.FunctionComponent<SectionHeaderProps> = props => (\r\n    <React.Fragment>\r\n        <h2 className=\"section-header\">{props.text}</h2>\r\n        {props.showDivider ? <Divider /> : null}\r\n    </React.Fragment>\r\n);\r\n","import './Dashboard.css';\r\nimport Link from '@material-ui/core/Link';\r\nimport React, { Component } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\n\r\nexport class Dashboard extends Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"dashboard-container material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Dashboard\"></SectionHeader>\r\n                    <div className=\"link-container\">\r\n                        <Link component={RouterLink} to=\"/newgame\">Neues Spiel</Link>\r\n                        <Link component={RouterLink} to=\"/joingame\">Spiel beitreten</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './ToDashboardButton.css';\r\nimport { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton = (props: ToDashboardButtonProps) => {\r\n    return (\r\n        <div className=\"button-wrapper to-dashboard-button\">\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDashboardButton;\r\n","import { PlayerInfo } from './../models/player.interface';\r\nimport { Action } from \"redux\";\r\nimport { GameConfig, GameRound } from \"../models/game.interface\";\r\n\r\nexport const SET_DATA_FOR_NEW_GAME = 'SET_DATA_FOR_NEW_GAME';\r\nexport const SET_DATA_OF_FINISHED_GAME = 'SET_DATA_OF_FINISHED_GAME';\r\nexport const RESET_APP_STATE = 'RESET_APP_STATE';\r\n\r\nexport interface SetDataForNewGamePayload {\r\n    gameId: string;\r\n    gameConfig: GameConfig | null;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\nexport interface SetDataForNewGameAction extends Action {\r\n    payload: SetDataForNewGamePayload\r\n}\r\nexport interface SetDataOfFinishedGamePayload {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n}\r\nexport interface SetDataOfFinishedGameAction extends Action {\r\n    payload: SetDataOfFinishedGamePayload\r\n}\r\nexport interface ResetAppStateAction extends Action {}\r\nexport type AppAction = SetDataForNewGameAction | SetDataOfFinishedGameAction | ResetAppStateAction;\r\n\r\n/*\r\n * Action Creators\r\n */\r\nexport const setDataForNewGame = (payload: SetDataForNewGamePayload): SetDataForNewGameAction => {\r\n    return { type: SET_DATA_FOR_NEW_GAME, payload }\r\n};\r\nexport const setDataOfFinishedGame = (payload: SetDataOfFinishedGamePayload): SetDataOfFinishedGameAction => {\r\n    return { type: SET_DATA_OF_FINISHED_GAME, payload }\r\n};\r\nexport const resetAppState = (): ResetAppStateAction => {\r\n    return { type: RESET_APP_STATE }\r\n};\r\n","import randomnItem from 'random-item';\r\nimport { cloneDeep } from 'lodash';\r\nimport { PlayerInput } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { GameRound, GameRoundEvaluation, PlayerInputEvaluation, GameResultForPlayer } from './../models/game.interface';\r\n\r\n/**\r\n* Returns an array of unique letters of the alphabet (excluding Q, X and Y).\r\n* The number of letters is defined by the parameter numberOfLetters (max: 23).\r\n*/\r\nexport const getRandomnLetters = (numberOfLetters: number): string[] => {\r\n    if (numberOfLetters > 23) {\r\n        throw new Error('Cannot create more than 23 randomn unique letters of the alphabet (without Q, X and Y)!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let alphabetWithoutQXY = [\r\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\r\n        'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'Z'\r\n    ];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(alphabetWithoutQXY);\r\n        randomnLetters.push(randomnLetter);\r\n        alphabetWithoutQXY = alphabetWithoutQXY.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\n /**\r\n * Checks each PlayerInput object whether it contains text.\r\n * If text string is empty, valid is set to false, otherwise to true.\r\n */\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(_ => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfMarkedAsInvalid = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\nexport const processPlayerInputEvaluations = (\r\n    gameRound: GameRound, roundEvaluation: GameRoundEvaluation, minNumberOfInvalids: number\r\n): GameRound => {\r\n    const evaluatedGameRound = cloneDeep(gameRound);\r\n    evaluatedGameRound.forEach((playerInputs, playerId) => {\r\n        const evaluations = roundEvaluation.get(playerId) as PlayerInputEvaluation[];\r\n        for (let i = 0; i < playerInputs.length; i++) {\r\n            // Only process evaluations for inputs that were not\r\n            // already marked as invalid because of being empty strings.\r\n            if (playerInputs[i].valid) {\r\n                playerInputs[i].valid = getNumberOfInvalids(evaluations[i]) < minNumberOfInvalids;\r\n            }\r\n        }\r\n    });\r\n    return evaluatedGameRound;\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: { [key: string]: GameResultForPlayer } = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => input.valid ? total + 1 : total, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n}\r\n","export const copyToClipboard = (text: string) => {\r\n    const element = document.createElement('textarea');\r\n    element.value = text;\r\n    element.setAttribute('readonly', '');\r\n    element.style.position = 'absolute';\r\n    element.style.left = '-9999px';\r\n    document.body.appendChild(element);\r\n    element.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(element);\r\n};\r\n\r\nexport const createAndFillArray = <T>(length: number, value: T): T[] => {\r\n    return new Array(length).fill(value);\r\n};\r\n\r\nexport const makePluralIfCountIsNotOne = (count: number, singular: string, plural: string): string => {\r\n    return count === 1 ? singular : plural;\r\n};\r\n","import { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\n\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { GameConfig, GameResultForPlayer } from '../../models/game.interface';\r\nimport { AppAction, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { calculateGameResults } from '../../utils/game.utils';\r\nimport { makePluralIfCountIsNotOne } from '../../utils/general.utils';\r\n\r\ninterface GameResultsDispatchProps {\r\n    onResetAppState: () => void;\r\n}\r\ninterface GameResultsProps extends AppState, GameResultsDispatchProps, RouterProps { }\r\ninterface GameResultsState {\r\n    gameResults: GameResultForPlayer[];\r\n}\r\n\r\nclass GameResults extends Component<GameResultsProps, GameResultsState> {\r\n    public state: GameResultsState = { gameResults: [] };\r\n\r\n    public render() {\r\n        if (this.props.gameRounds === null) { return null; }\r\n        const gameConfig = this.props.gameConfig as GameConfig;\r\n        const mostPoints = Math.max(...this.state.gameResults.map(result => result.points));\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Ergebnis\"></SectionHeader>\r\n                    <List>\r\n                        {this.state.gameResults.map((result, index) => (\r\n                            <ListItem key={'results-for-player-' + index}>\r\n                                <ListItemIcon>\r\n                                    {this.getResultIcon(result.points === mostPoints)}\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary={result.playerName}\r\n                                    secondary={`${result.points} ${makePluralIfCountIsNotOne(result.points, 'Punkt', 'Punkte')}`}\r\n                                />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </div>\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiele-Settings\"></SectionHeader>\r\n                    <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                    <p>Buchstaben: {gameConfig.letters.join(', ')}</p>\r\n                    <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // If there are no allPlayers or gameRounds present in application state, then reroute user to dashboard.\r\n        if (this.props.allPlayers === null || this.props.gameRounds === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        this.setState({ gameResults: calculateGameResults(this.props.allPlayers, this.props.gameRounds) });\r\n    }\r\n\r\n    private getResultIcon = (isWinner: boolean): JSX.Element => {\r\n        return isWinner ? <StarIcon color=\"primary\" fontSize=\"large\" /> : <FaceIcon fontSize=\"large\" />;\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n        this.props.onResetAppState();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppState => state;\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): GameResultsDispatchProps => {\r\n    return {\r\n        onResetAppState: () => {\r\n            dispatch(resetAppState())\r\n        }\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults);\r\n","import PubNub from 'pubnub';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst PUBNUB_KEYS = require('./pubnub.config.json');\r\n\r\nexport const PUBNUB_CONFIG: PubNub.PubnubConfig = {\r\n    publishKey: PUBNUB_KEYS.publishKey,\r\n    subscribeKey: PUBNUB_KEYS.subscribeKey,\r\n    uuid: uuidv4(), // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d',\r\n    ssl: true\r\n};\r\n","import './JoinGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\n\r\ninterface JoinGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface JoinGameProps extends JoinGameDispatchProps, RouteComponentProps {}\r\ninterface JoinGameState {\r\n    idInput: string;\r\n    nameInput: string;\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass JoinGame extends Component<JoinGameProps, JoinGameState> {\r\n    public state: JoinGameState = {\r\n        idInput: '',\r\n        nameInput: '',\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const joinGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"idInput\"\r\n                    label=\"Spiel-ID\"\r\n                    value={this.state.idInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.idInput}\r\n                />\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                />\r\n                <div className=\"button-wrapper\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<DirectionsWalkIcon />}\r\n                    >Beitreten</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiel beitreten\"></SectionHeader>\r\n                    {joinGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        if (query.has('id')) {\r\n            this.setState({ idInput: query.get('id') as string });\r\n        }\r\n    }\r\n\r\n    private handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value } as any);\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        this.setState({ validateInputs: true });\r\n        if (this.state.idInput && this.state.nameInput) {\r\n            this.props.onSetGameData({\r\n                gameConfig: null,\r\n                gameId: this.state.idInput,\r\n                playerInfo: {\r\n                    id: PUBNUB_CONFIG.uuid as string,\r\n                    isAdmin: false,\r\n                    name: this.state.nameInput\r\n                }\r\n            });\r\n            this.props.history.push('/play');\r\n        }\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): JoinGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => {\r\n            dispatch(setDataForNewGame(payload))\r\n        }\r\n    }\r\n};\r\nexport default connect(null, mapDispatchToProps)(JoinGame);\r\n","export const MIN_NUMBER_OF_ROUNDS = 3;\r\nexport const MAX_NUMBER_OF_ROUNDS = 10;\r\n\r\nexport const STANDARD_CATEGORIES = ['Stadt', 'Land', 'Fluss'];\r\nexport const AVAILABLE_CATEGORIES = [\r\n    'Band/Musiker',\r\n    'Beruf',\r\n    'Berühmte Person',\r\n    'Fiktiver Charakter',\r\n    'Film/Serie',\r\n    'Getränk',\r\n    'Hobby',\r\n    'Krankheit',\r\n    'Laster',\r\n    'Marke',\r\n    'Mordwaffe',\r\n    'Pflanze',\r\n    'Scheidungsgrund',\r\n    'Sehenswürdigkeit',\r\n    'Speise',\r\n    'Tier'\r\n];\r\n\r\nexport enum GamePhase {\r\n    waitingToStart = 'waitingToStart',\r\n    fillOutTextfields = 'fillOutTextfields',\r\n    evaluateRound = 'evaluateRound',\r\n    gameResult = 'gameResult'\r\n}\r\n\r\nexport const MIN_NUMBER_OF_PLAYERS = 2;\r\n","import './NewGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ChipsArray, { ChipType } from '../../components/ChipsArray/ChipsArray';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport {\r\n    AVAILABLE_CATEGORIES,\r\n    MAX_NUMBER_OF_ROUNDS,\r\n    MIN_NUMBER_OF_ROUNDS,\r\n    STANDARD_CATEGORIES,\r\n} from '../../constants/game.constant';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\n\r\nenum CategoryArray {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\ninterface NewGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface NewGameProps extends NewGameDispatchProps, RouteComponentProps {}\r\ninterface NewGameState {\r\n    availableCategories: string[];\r\n    nameInput: string;\r\n    numberOfRoundsInput: number;\r\n    selectedCategories: string[];\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass NewGame extends Component<NewGameProps, NewGameState> {\r\n    public state: NewGameState = {\r\n        availableCategories: AVAILABLE_CATEGORIES,\r\n        nameInput: '',\r\n        numberOfRoundsInput: MIN_NUMBER_OF_ROUNDS,\r\n        selectedCategories: STANDARD_CATEGORIES,\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const numberOfRoundsInputLabel = `Anzahl Runden (${MIN_NUMBER_OF_ROUNDS}-${MAX_NUMBER_OF_ROUNDS})`;\r\n        const newGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleNameInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                />\r\n                <TextField\r\n                    name=\"numberOfRoundsInput\"\r\n                    label={numberOfRoundsInputLabel}\r\n                    type=\"number\"\r\n                    value={this.state.numberOfRoundsInput}\r\n                    onChange={this.handleNumberOfRoundsInputChange}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                />\r\n                <p className=\"category-array-label\">Ausgewählte Kategorien:</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.selectedCategories}\r\n                    chipType={ChipType.selected}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.selected)}\r\n                />\r\n                <p className=\"category-array-label\">Verfügbare Kategorien:</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.availableCategories}\r\n                    chipType={ChipType.available}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.available)}\r\n                />\r\n                <div className=\"button-wrapper add-margin-top\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<AddCircleIcon />}\r\n                    >Spiel erstellen</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Neues Spiel\" />\r\n                    {newGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleNameInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ nameInput: event.target.value });\r\n    }\r\n\r\n    private handleNumberOfRoundsInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +event.target.value;\r\n        value = value < MIN_NUMBER_OF_ROUNDS ? MIN_NUMBER_OF_ROUNDS : value;\r\n        value = value > MAX_NUMBER_OF_ROUNDS ? MAX_NUMBER_OF_ROUNDS : value;\r\n        this.setState({ numberOfRoundsInput: value });\r\n    }\r\n\r\n    private updateCategoryArrays = (chipToRemove: string, removeFromArray: CategoryArray) => {\r\n        let newSelectedCategories: string[];\r\n        let newAvailableCategories: string[];\r\n        if (removeFromArray === CategoryArray.selected) {\r\n            newSelectedCategories = this.state.selectedCategories.filter(category => category !== chipToRemove);\r\n            newAvailableCategories = [...this.state.availableCategories];\r\n            newAvailableCategories.push(chipToRemove);\r\n        } else {\r\n            newAvailableCategories = this.state.availableCategories.filter(category => category !== chipToRemove);\r\n            newSelectedCategories = [...this.state.selectedCategories];\r\n            newSelectedCategories.push(chipToRemove);\r\n        }\r\n        this.setState({\r\n            availableCategories: newAvailableCategories,\r\n            selectedCategories: newSelectedCategories\r\n        });\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        this.setState({ validateInputs: true });\r\n        if (this.state.nameInput && this.state.selectedCategories.length >= 3) {\r\n            const gameId = uuidv4(); // ⇨ e.g. '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n            const letters = getRandomnLetters(this.state.numberOfRoundsInput);\r\n            this.props.onSetGameData({\r\n                gameConfig: {\r\n                    categories: this.state.selectedCategories,\r\n                    letters,\r\n                    numberOfRounds: this.state.numberOfRoundsInput\r\n                },\r\n                gameId,\r\n                playerInfo: {\r\n                    id: PUBNUB_CONFIG.uuid as string,\r\n                    isAdmin: true,\r\n                    name: this.state.nameInput\r\n                }\r\n            });\r\n            this.props.history.push('/play');\r\n        }\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): NewGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => {\r\n            dispatch(setDataForNewGame(payload))\r\n        }\r\n    }\r\n};\r\nexport default connect(null, mapDispatchToProps)(NewGame);\r\n","import { GameConfig, PlayerInput, EvaluationOfPlayerInput } from './game.interface';\r\nimport { PlayerInfo } from './player.interface';\r\n\r\nexport interface PubNubUserState {\r\n    gameConfig?: GameConfig;\r\n    playerInfo: PlayerInfo;\r\n}\r\n\r\nexport enum PubNubMessageType {\r\n    startGame = 'startGame',\r\n    roundFinished = 'roundFinished',\r\n    currentRoundInputs = 'currentRoundInputs',\r\n    evaluationOfPlayerInput = 'evaluationOfPlayerInput',\r\n    evaluationFinished = 'evaluationFinished'\r\n}\r\n\r\nexport interface PubNubMessage {\r\n    type: PubNubMessageType;\r\n    payload?: any;\r\n}\r\n\r\nexport class PubNubCurrentRoundInputsMessage {\r\n    constructor(private payload: PlayerInput[]) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.currentRoundInputs,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport class PubNubEvaluationOfPlayerInputMessage {\r\n    constructor(private payload: EvaluationOfPlayerInput) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.evaluationOfPlayerInput,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst loadingSpinnerSize = 60;\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        loadingScreen: {\r\n            position: 'absolute',\r\n            top: '0',\r\n            left: '0',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n        },\r\n        centralContent: {\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)'\r\n        },\r\n        text: {\r\n            marginBlockStart: '0',\r\n            color: 'white',\r\n            fontSize: '1.5rem',\r\n            fontWeight: 'bold'\r\n        },\r\n        loadingSpinner: {\r\n            margin: '0 auto',\r\n            width: loadingSpinnerSize + 'px'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface LoadingScreenProps {\r\n    message: string | null;\r\n}\r\n\r\nconst LoadingScreen = (props: LoadingScreenProps) => {\r\n    const classes = useStyles();\r\n    const messageElement = props.message ? (<p className={classes.text}>{props.message}</p>) : null;\r\n    return (\r\n        <div className={classes.loadingScreen}>\r\n            <div className={classes.centralContent}>\r\n                {messageElement}\r\n                <div className={classes.loadingSpinner}>\r\n                    <CircularProgress color=\"secondary\" size={loadingSpinnerSize} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        centerContent: {\r\n            display: 'flex',\r\n            justifyContent: 'center'\r\n        },\r\n        chip: {\r\n            height: '3rem',\r\n            marginTop: '1rem',\r\n            borderRadius: '5px',\r\n            fontSize: '1.2rem',\r\n            boxShadow: '0 2px 4px rgba(0,0,0,.501961)'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface GameRoundChipProps {\r\n    currentLetter: string;\r\n    currentRound: number;\r\n}\r\n\r\nconst GameRoundChip = (props: GameRoundChipProps) => {\r\n    const classes = useStyles();\r\n    const { currentLetter, currentRound } = props;\r\n    return (\r\n        <div className={classes.centerContent}>\r\n            <Chip\r\n                color=\"primary\"\r\n                icon={<EmojiObjectsIcon />}\r\n                label={`Runde ${currentRound}: „${currentLetter}“`}\r\n                className={classes.chip}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameRoundChip;\r\n","import './PhaseEvaluateRound.css';\r\nimport { Checkbox, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport React, { ChangeEvent } from 'react';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    getMinNumberOfMarkedAsInvalid as getMinNumberOfNecessaryMarkedAsInvalid,\r\n    getNumberOfInvalids,\r\n} from '../../utils/game.utils';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseEvaluateRoundProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n    updateEvaluationOfPlayerInput: (newEvaluation: EvaluationOfPlayerInput) => void;\r\n    sendEvaluationFinishedMessage: () => void;\r\n}\r\n\r\nconst PhaseEvaluateRound = (props: PhaseEvaluateRoundProps) => {\r\n    const { allPlayers, currentRound, gameConfig, playerInfo } = props;\r\n    const minNumberOfInvalids = getMinNumberOfNecessaryMarkedAsInvalid(allPlayers.size);\r\n    // Retrieve data for finished round; e.g. if current round is 1, then data is at index 0.\r\n    const finishedGameRound = props.gameRounds[currentRound - 1];\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n    // Sort players alphabetically.\r\n    let sortedPlayers = Array.from(allPlayers).map(data => data[1]);\r\n    sortedPlayers = sortedPlayers.sort((a, b) => a.name.charCodeAt(0) - b.name.charCodeAt(0));\r\n\r\n    const handleCheckboxChange = (\r\n        event: ChangeEvent<HTMLInputElement>, checkboxOwner: PlayerInfo, categoryIndex: number, indexInSortedPlayers: number\r\n    ) => {\r\n        // Only accept checkbox changes for the user's evaluation checkboxes.\r\n        if (checkboxOwner.id === playerInfo.id) {\r\n            const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n            props.updateEvaluationOfPlayerInput({\r\n                evaluatedPlayerId: evaluatedPlayer.id,\r\n                categoryIndex,\r\n                markedAsValid: event.target.checked\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Creates a group of checkboxes for each player in the game that represent their evaluation of\r\n     * the text input of one of the players (including themselves) for one category. Users can either\r\n     * mark a text input as valid (= checkbox checked) or invalid (= checkbox not checked).\r\n     * The first checkbox represents the user's evaluation and is the only one that triggers a PubNub\r\n     * message to the other players (and themselves) with the updated state of the checkbox.\r\n     */\r\n    const createEvaluationCheckboxes = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        // Make sure that current player's checkbox is first in line.\r\n        const players = [playerInfo, ...(sortedPlayers.filter(player => player.id !== playerInfo.id))];\r\n        const evaluationForPlayer = props.currentRoundEvaluation.get(sortedPlayers[indexInSortedPlayers].id) as PlayerInputEvaluation[];\r\n        const evaluationForCategory = evaluationForPlayer[categoryIndex];\r\n        return (\r\n            <div\r\n                key={`slf-evaluation-checkboxes-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-evaluation-checkboxes-wrapper\"\r\n            >\r\n                {players.map((player, index) => (\r\n                    <Tooltip\r\n                        key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}-${index}`}\r\n                        title={getEvaluatedByText(player)}\r\n                    >\r\n                        <Checkbox\r\n                            key={`slf-evaluation-checkbox-${categoryIndex}-${indexInSortedPlayers}-${index}`}\r\n                            color={player.id === playerInfo.id ? 'primary' : 'default'}\r\n                            checked={!!evaluationForCategory.get(player.id)}\r\n                            inputProps={{ 'aria-label': getEvaluatedByText(player) }}\r\n                            onChange={event => handleCheckboxChange(event, player, categoryIndex, indexInSortedPlayers)}\r\n                        />\r\n                    </Tooltip>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n    const getEvaluatedByText = (player: PlayerInfo): string => {\r\n        return player.id === playerInfo.id ? 'Deine Bewertung' : 'Bewertung von ' + player.name;\r\n    };\r\n    /**\r\n     * Creates a section for each category of the current game. It displays the category in the header,\r\n     * followed by one textfield for each player showing their input for the finished round. If the\r\n     * player input isn't an empty string, then on the right side of the textfield a group of\r\n     * checkboxes is displayed which serve to evaluate the player's input (valid or invalid).\r\n     */\r\n    const createCategorySection = (category: string, categoryIndex: number): JSX.Element => (\r\n        <div\r\n            key={'slf-evaluation-for-category-no-' + categoryIndex}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            {sortedPlayers.map((player, indexInSortedPlayers) => (\r\n                <div\r\n                    key={`slf-evaluation-textfield-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                    className=\"slf-evaluation-textfield-wrapper\"\r\n                >\r\n                    <TextField\r\n                        key={'slf-textfield-category-no-' + categoryIndex + '-player-' + indexInSortedPlayers}\r\n                        value={(finishedGameRound.get(player.id) as PlayerInput[])[categoryIndex].text}\r\n                        className=\"slf-evaluation-textfield\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">{player.name}:</InputAdornment>,\r\n                            className: getNumberOfInvalids(\r\n                                (props.currentRoundEvaluation.get(player.id) as PlayerInputEvaluation[])[categoryIndex]\r\n                            ) >= minNumberOfInvalids ? 'text-decoration-line-through' : ''\r\n                        }}\r\n                    />\r\n                    {(finishedGameRound.get(player.id) as PlayerInput[])[categoryIndex].text ?\r\n                        createEvaluationCheckboxes(categoryIndex, indexInSortedPlayers) : null}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip currentLetter={currentLetter} currentRound={currentRound} />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createCategorySection)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"secondary\"\r\n                    title=\"Akzeptieren\"\r\n                    aria-label=\"Akzeptieren\"\r\n                    onClick={() => props.sendEvaluationFinishedMessage()}\r\n                >\r\n                    <CheckCircleIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseEvaluateRound;\r\n","import { IconButton, InputAdornment, TextField } from '@material-ui/core';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { GameConfig, PlayerInput } from '../../models/game.interface';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseFillOutTextfieldsProps {\r\n    currentRound: number;\r\n    gameConfig: GameConfig;\r\n    gameRoundInputs: PlayerInput[];\r\n    updateCurrentRoundInputs: (newCurrentRoundInputs: PlayerInput[]) => void;\r\n    sendRoundFinishedMessage: () => void;\r\n}\r\n\r\nconst PhaseFillOutTextfields = (props: PhaseFillOutTextfieldsProps) => {\r\n    const { currentRound, gameConfig, gameRoundInputs } = props;\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number) => {\r\n        const newGameRoundInputs = [...gameRoundInputs];\r\n        newGameRoundInputs[index] = { ...newGameRoundInputs[index], text: event.target.value };\r\n        props.updateCurrentRoundInputs(newGameRoundInputs);\r\n    };\r\n    const createTextfieldElement = (category: string, index: number): JSX.Element => (\r\n        <div\r\n            key={'slf-input-for-category-no-' + index}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            <TextField\r\n                value={gameRoundInputs[index].text}\r\n                onChange={event => handleInputChange(event, index)}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">{currentLetter}:</InputAdornment>\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip currentLetter={currentLetter} currentRound={currentRound} />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createTextfieldElement)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"secondary\"\r\n                    title=\"Abschicken\"\r\n                    aria-label=\"Abschicken\"\r\n                    onClick={() => props.sendRoundFinishedMessage()}\r\n                >\r\n                    <EmailIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseFillOutTextfields;\r\n","import './JoinGameLink.css';\r\nimport { IconButton, InputAdornment, OutlinedInput } from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport React from 'react';\r\nimport { copyToClipboard } from '../../utils/general.utils';\r\n\r\ninterface JoinGameLinkProps {\r\n    gameId: string;\r\n}\r\n\r\nexport const JoinGameLink = (props: JoinGameLinkProps) => {\r\n    const url = window.location.href;\r\n    // Cut off \"/play\" from the end of the url and add route plus game id.\r\n    const joinGameLink = url.slice(0, url.length - 5) + '/joingame?id=' + props.gameId;\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"join-game-link-label\">Teile diesen Link mit Freunden:</p>\r\n            <OutlinedInput\r\n                name=\"idInput\"\r\n                value={joinGameLink}\r\n                className=\"app-form-input\"\r\n                disabled\r\n                fullWidth\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            title=\"Link kopieren\"\r\n                            aria-label=\"Link kopieren\"\r\n                            onClick={() => copyToClipboard(joinGameLink)}\r\n                        >\r\n                            <FileCopyIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport React from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface PlayerListProps {\r\n    players: Map<string, PlayerInfo>;\r\n}\r\n\r\nconst PlayerList = (props: PlayerListProps) => {\r\n    const classes = useStyles();\r\n    const playerNames: string[] = [];\r\n    props.players.forEach(player => playerNames.push(player.name));\r\n    return (\r\n        <div className={classes.root}>\r\n            {playerNames.map((name, index) => (\r\n                <Chip\r\n                    key={`player-name-${index}`}\r\n                    icon={<FaceIcon />}\r\n                    color=\"primary\"\r\n                    label={name}\r\n                    className={classes.chip}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerList;\r\n","import './PhaseWaitingToStart.css';\r\nimport { Button, Divider } from '@material-ui/core';\r\nimport PlayCircleFilled from '@material-ui/icons/PlayCircleFilled';\r\nimport React from 'react';\r\nimport { MIN_NUMBER_OF_PLAYERS } from '../../constants/game.constant';\r\nimport { GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport { JoinGameLink } from '../JoinGameLink/JoinGameLink';\r\nimport PlayerList from '../PlayerList/PlayerList';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseWaitingToStartProps {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string;\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    playerInfo: PlayerInfo;\r\n    sendMessage: (message: PubNubMessage) => void;\r\n}\r\n\r\nconst PhaseWaitingToStart = (props: PhaseWaitingToStartProps) => {\r\n    const { gameId, allPlayers, playerInfo } = props;\r\n    const waitForGameStartElement = (\r\n        <p className=\"wait-for-start-animation\">Warte auf Spielbeginn <span>.</span><span>.</span><span>.</span></p>\r\n    );\r\n\r\n    const createGameSettingsElement = (): JSX.Element => {\r\n        const gameConfig = props.gameConfig as GameConfig;\r\n        return (\r\n            <React.Fragment>\r\n                <Divider />\r\n                <h3>Spiele-Settings:</h3>\r\n                <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const createStartGameButton = (): JSX.Element => {\r\n        return (\r\n            <div className=\"button-wrapper add-margin-top\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    startIcon={<PlayCircleFilled />}\r\n                    disabled={allPlayers.size < MIN_NUMBER_OF_PLAYERS}\r\n                    onClick={() => props.sendMessage({ type: PubNubMessageType.startGame })}\r\n                >Starten</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const createInvitePlayersElement = (): JSX.Element => {\r\n        return (\r\n            <div className=\"material-card-style\">\r\n                <JoinGameLink gameId={gameId as string} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"material-card-style\">\r\n                <SectionHeader showDivider={true} text=\"Gleich geht's los...\"></SectionHeader>\r\n                <div className=\"players-wrapper\">\r\n                    <h3>Mitspieler:</h3>\r\n                    <PlayerList players={props.allPlayers} />\r\n                </div>\r\n                {props.gameConfig ? createGameSettingsElement() : null}\r\n                <Divider />\r\n                {playerInfo.isAdmin ? createStartGameButton() : waitForGameStartElement}\r\n            </div>\r\n            {playerInfo.isAdmin ? createInvitePlayersElement() : null}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseWaitingToStart;\r\n","import { usePubNub } from 'pubnub-react';\r\nimport React, { useEffect } from 'react';\r\nimport { GameConfig, PlayerInput, EvaluationOfPlayerInput } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubUserState, PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport Pubnub from 'pubnub';\r\n\r\ninterface PubNubEventHandlerProps {\r\n    gameChannel: string;\r\n    gameConfig: GameConfig | null;\r\n    playerInfo: PlayerInfo;\r\n    navigateToDashboard: () => void;\r\n    addPlayers: (...newPlayers: PubNubUserState[]) => void;\r\n    startGame: () => void;\r\n    stopRoundAndSendInputs: () => void;\r\n    addPlayerInputForFinishedRound: (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => void;\r\n    processEvaluationOfPlayerInput: (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => void;\r\n    countPlayerAsEvaluationFinished: (evaluatingPlayerId: string) => void;\r\n}\r\n\r\nconst PubNubEventHandler = (props: PubNubEventHandlerProps) => {\r\n    const pubNubClient = usePubNub();\r\n\r\n    const setUserStateAndGetHereNowIfGameIsOpen = () => {\r\n        pubNubClient.history(\r\n            { channel: props.gameChannel, count: 10 },\r\n            (_, response) => {\r\n                // If history includes messages, then game has already started and user can't join.\r\n                // User gets rerouted to dashboard page by PlayGame component.\r\n                if (response.messages.length > 0) {\r\n                    props.navigateToDashboard();\r\n                } else {\r\n                    setUserState();\r\n                    if (!props.playerInfo.isAdmin) {\r\n                        getHereNowData();\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    };\r\n    const setUserState = () => {\r\n        let newUserState: PubNubUserState;\r\n        if (props.playerInfo.isAdmin) {\r\n            newUserState = { gameConfig: props.gameConfig as GameConfig, playerInfo: props.playerInfo };\r\n        } else {\r\n            newUserState = { playerInfo: props.playerInfo };\r\n        }\r\n        // Set this user's state in game channel.\r\n        pubNubClient.setState({\r\n            channels: [props.gameChannel],\r\n            state: newUserState\r\n        });\r\n    };\r\n    const getHereNowData = () => {\r\n        pubNubClient.hereNow(\r\n            { channels: [props.gameChannel], includeUUIDs: true, includeState: true },\r\n            (_, response) => {\r\n                console.log('PubNub hereNow', response);\r\n                // Response includes states of players that joined before.\r\n                const dataForGameChannel = response.channels[props.gameChannel];\r\n                if (dataForGameChannel) {\r\n                    props.addPlayers(...dataForGameChannel.occupants.map(occupant => occupant.state as PubNubUserState));\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const pubNubListeners: Pubnub.ListenerParameters = {\r\n            message: messageEvent => {\r\n                console.log('PubNub message event', messageEvent);\r\n                const message = messageEvent.message as PubNubMessage;\r\n                switch (message.type) {\r\n                    case PubNubMessageType.startGame:\r\n                        props.startGame();\r\n                        break;\r\n                    case PubNubMessageType.roundFinished:\r\n                        props.stopRoundAndSendInputs();\r\n                        break;\r\n                    case PubNubMessageType.currentRoundInputs:\r\n                        props.addPlayerInputForFinishedRound(messageEvent.publisher, message.payload);\r\n                        break;\r\n                    case PubNubMessageType.evaluationOfPlayerInput:\r\n                        props.processEvaluationOfPlayerInput(messageEvent.publisher, message.payload);\r\n                        break;\r\n                    case PubNubMessageType.evaluationFinished:\r\n                        props.countPlayerAsEvaluationFinished(messageEvent.publisher);\r\n                        break;\r\n                    default:\r\n                }\r\n            },\r\n            presence: presenceEvent => {\r\n                console.log('PubNub presence event', presenceEvent);\r\n                // Check for 'state-change' events and process state from new player.\r\n                if (presenceEvent.action === 'state-change') {\r\n                    const userState = presenceEvent.state as PubNubUserState;\r\n                    if (userState.playerInfo.id !== props.playerInfo.id) {\r\n                        props.addPlayers(userState);\r\n                    }\r\n                }\r\n            },\r\n            status: statusEvent => {\r\n                console.log('PubNub status event', statusEvent);\r\n                if (statusEvent.category === 'PNConnectedCategory') {\r\n                    console.log('Player is connected to PubNub game channel');\r\n                    setUserStateAndGetHereNowIfGameIsOpen();\r\n                }\r\n            }\r\n        };\r\n        pubNubClient.addListener(pubNubListeners);\r\n        pubNubClient.subscribe({\r\n            channels: [props.gameChannel],\r\n            withPresence: true\r\n        });\r\n        // When this component is destroyed, we unsubscribe from game channel.\r\n        return () => {\r\n            pubNubClient.removeListener(pubNubListeners);\r\n            pubNubClient.unsubscribeAll();\r\n        }\r\n    });\r\n    return null;\r\n};\r\n\r\nexport default React.memo(PubNubEventHandler);\r\n","import { cloneDeep } from 'lodash';\r\nimport PubNub from 'pubnub';\r\nimport { PubNubProvider } from 'pubnub-react';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport LoadingScreen from '../../components/LoadingScreen/LoadingScreen';\r\nimport PhaseEvaluateRound from '../../components/PhaseEvaluateRound/PhaseEvaluateRound';\r\nimport PhaseFillOutTextfields from '../../components/PhaseFillOutTextfields/PhaseFillOutTextfields';\r\nimport PhaseWaitingToStart from '../../components/PhaseWaitingToStart/PhaseWaitingToStart';\r\nimport PubNubEventHandler from '../../components/PubNubEventHandler/PubNubEventHandler';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { GamePhase } from '../../constants/game.constant';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    PubNubCurrentRoundInputsMessage,\r\n    PubNubEvaluationOfPlayerInputMessage,\r\n    PubNubMessage,\r\n    PubNubMessageType,\r\n    PubNubUserState,\r\n} from '../../models/pub-nub-data.model';\r\nimport { SetDataOfFinishedGamePayload, AppAction, setDataOfFinishedGame, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport {\r\n    createGameRoundEvaluation,\r\n    getMinNumberOfMarkedAsInvalid,\r\n    markEmptyPlayerInputsAsInvalid,\r\n    processPlayerInputEvaluations,\r\n} from '../../utils/game.utils';\r\nimport { createAndFillArray } from '../../utils/general.utils';\r\n\r\ninterface PlayGamePropsFromStore {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string | null;\r\n    playerInfo: PlayerInfo;\r\n}\r\ninterface PlayGameDispatchProps {\r\n    onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => void;\r\n    onResetAppState: () => void;\r\n}\r\ninterface PlayGameProps extends PlayGamePropsFromStore, PlayGameDispatchProps, RouterProps {}\r\ninterface PlayGameState {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentPhase: GamePhase;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    currentRoundInputs: PlayerInput[];\r\n    currentRound: number;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[];\r\n    loadingScreenMessage: string | null;\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    showLoadingScreen: boolean;\r\n}\r\n\r\nclass PlayGame extends Component<PlayGameProps, PlayGameState> {\r\n    public state: PlayGameState = {\r\n        allPlayers: new Map<string, PlayerInfo>(),\r\n        currentPhase: GamePhase.waitingToStart,\r\n        currentRoundEvaluation: new Map<string, PlayerInputEvaluation[]>(),\r\n        currentRoundInputs: [],\r\n        currentRound: 1,\r\n        gameConfig: null,\r\n        gameRounds: [],\r\n        loadingScreenMessage: null,\r\n        playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n        showLoadingScreen: true\r\n    };\r\n    private pubNubClient = new PubNub(PUBNUB_CONFIG);\r\n\r\n    public render() {\r\n        if (this.props.gameId === null) { return null; }\r\n        const { gameId, playerInfo } = this.props;\r\n        let currentPhaseElement: JSX.Element | null = null;\r\n        if (this.state.currentPhase === GamePhase.waitingToStart) {\r\n            currentPhaseElement = (\r\n                <PhaseWaitingToStart\r\n                    gameConfig={this.state.gameConfig}\r\n                    gameId={gameId}\r\n                    allPlayers={this.state.allPlayers}\r\n                    playerInfo={playerInfo}\r\n                    sendMessage={this.sendMessage}\r\n                />\r\n            );\r\n        }\r\n        if (this.state.currentPhase === GamePhase.fillOutTextfields) {\r\n            currentPhaseElement = (\r\n                <PhaseFillOutTextfields\r\n                    currentRound={this.state.currentRound}\r\n                    gameConfig={this.state.gameConfig as GameConfig}\r\n                    gameRoundInputs={this.state.currentRoundInputs}\r\n                    updateCurrentRoundInputs={this.updateCurrentRoundInputs}\r\n                    sendRoundFinishedMessage={this.sendRoundFinishedMessage}\r\n                />\r\n            )\r\n        }\r\n        if (this.state.currentPhase === GamePhase.evaluateRound) {\r\n            currentPhaseElement = (\r\n                <PhaseEvaluateRound\r\n                    allPlayers={this.state.allPlayers}\r\n                    currentRound={this.state.currentRound}\r\n                    currentRoundEvaluation={this.state.currentRoundEvaluation}\r\n                    gameConfig={this.state.gameConfig as GameConfig}\r\n                    gameRounds={this.state.gameRounds}\r\n                    playerInfo={playerInfo}\r\n                    updateEvaluationOfPlayerInput={this.updateEvaluationOfPlayerInput}\r\n                    sendEvaluationFinishedMessage={this.sendEvaluationFinishedMessage}\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            <PubNubProvider client={this.pubNubClient}>\r\n                {/* The props passed to PubNubEventHandler must never be changed,\r\n                    in order to ensure that the component is not rerendered!\r\n                    (PubNubEventHandler is wrapped in React.memo) */}\r\n                <PubNubEventHandler\r\n                    gameChannel={this.props.gameId}\r\n                    gameConfig={this.props.gameConfig}\r\n                    playerInfo={this.props.playerInfo}\r\n                    navigateToDashboard={this.navigateToDashboard}\r\n                    addPlayers={this.addPlayers}\r\n                    startGame={this.startGame}\r\n                    stopRoundAndSendInputs={this.stopRoundAndSendInputs}\r\n                    addPlayerInputForFinishedRound={this.addPlayerInputForFinishedRound}\r\n                    processEvaluationOfPlayerInput={this.processEvaluationOfPlayerInput}\r\n                    countPlayerAsEvaluationFinished={this.countPlayerAsEvaluationFinished}\r\n                />\r\n                {this.state.showLoadingScreen ? <LoadingScreen message={this.state.loadingScreenMessage} /> : (\r\n                    <div className=\"main-content-wrapper\">\r\n                        {currentPhaseElement}\r\n                    </div>\r\n                )}\r\n            </PubNubProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // If there is no gameId present in application state, then reroute user to dashboard.\r\n        if (this.props.gameId === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        allPlayers.set(this.props.playerInfo.id, this.props.playerInfo);\r\n        // If player is the game admin, the gameConfig can be taken from application state\r\n        // and we can hide the loading screen and show PhaseWaitingToStart component right away.\r\n        if (this.props.playerInfo.isAdmin) {\r\n            this.setState({ allPlayers, gameConfig: this.props.gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    private sendMessage = (message: PubNubMessage) => {\r\n        this.pubNubClient.publish(\r\n            {\r\n                channel: this.props.gameId as string,\r\n                message,\r\n                storeInHistory: true,\r\n                ttl: 1 // time to live (in hours)\r\n            },\r\n            (status, response) => console.log('PubNub Publish:', status, response)\r\n        );\r\n    };\r\n\r\n    private navigateToDashboard = () => {\r\n        this.props.history.push('/');\r\n        this.props.onResetAppState();\r\n    }\r\n\r\n    /**\r\n     * Called by PubNubEventHandler when it receives a PubNub presence event with action 'state-change'.\r\n     * It processes information about players that had already joined the game before this user\r\n     * joined (hereNow result) or about a player that joins the game after this user joined.\r\n     */\r\n    private addPlayers = (...newPlayers: PubNubUserState[]) => {\r\n        // Ignore information about players that try to join after the game has already started.\r\n        if (this.state.currentPhase !== GamePhase.waitingToStart) { return; }\r\n        let gameConfig: GameConfig | null = null;\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        newPlayers.forEach(newPlayer => {\r\n            allPlayers.set(newPlayer.playerInfo.id, newPlayer.playerInfo);\r\n            // If we are not the game admin, we obtain the game config from the admin's PubNubUserState.\r\n            if (newPlayer.gameConfig) {\r\n                gameConfig = newPlayer.gameConfig;\r\n            }\r\n        });\r\n        // Only after we received the gameConfig from the admin, we hide the loading screen\r\n        // and render the PhaseWaitingToStart component instead.\r\n        if (gameConfig) {\r\n            this.setState({ allPlayers, gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'startGame'.\r\n     */\r\n    private startGame = () => {\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const roundInputs = createAndFillArray<PlayerInput>(gameConfig.categories.length, { text: '', valid: true });\r\n        this.setState({\r\n            currentPhase: GamePhase.fillOutTextfields,\r\n            currentRoundInputs: roundInputs\r\n        });\r\n    }\r\n\r\n    private updateCurrentRoundInputs = (newCurrentRoundInputs: PlayerInput[]) => {\r\n        this.setState({ currentRoundInputs: newCurrentRoundInputs });\r\n    }\r\n\r\n    private sendRoundFinishedMessage = () => {\r\n        this.setState({ showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.roundFinished });\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'roundFinished'.\r\n     */\r\n    private stopRoundAndSendInputs = () => {\r\n        // Prepare new GameRound object for addPlayerInputForFinishedRound method\r\n        // as well as new currentRoundEvaluation object for evaluation phase.\r\n        const gameRounds: GameRound[] = [...this.state.gameRounds, new Map<string, PlayerInput[]>()];\r\n        const currentRoundEvaluation = createGameRoundEvaluation(\r\n            this.state.allPlayers, (this.state.gameConfig as GameConfig).categories\r\n        );\r\n        this.setState({ currentRoundEvaluation, gameRounds, showLoadingScreen: true });\r\n        // Send this player's text inputs of current round to other players (and herself/himself).\r\n        const message = new PubNubCurrentRoundInputsMessage(markEmptyPlayerInputsAsInvalid(this.state.currentRoundInputs));\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'currentRoundInputs'.\r\n     */\r\n    private addPlayerInputForFinishedRound = (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => {\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        gameRounds[this.state.currentRound - 1].set(playerId, playerInputsForFinishedRound);\r\n        // Did we collect the inputs from all players?\r\n        if (gameRounds[this.state.currentRound - 1].size === this.state.allPlayers.size) {\r\n            // If yes, then start the evaluation of the finished round.\r\n            this.setState({ currentPhase: GamePhase.evaluateRound, gameRounds, showLoadingScreen: false });\r\n        } else {\r\n            // If no, then only store the updated gameRounds object in state.\r\n            this.setState({ gameRounds });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate a player input evaluation via a\r\n     * PubNub message. This message is then processed by all players in the game (including the user who sent it).\r\n     */\r\n    private updateEvaluationOfPlayerInput = (newEvaluation: EvaluationOfPlayerInput) => {\r\n        const message = new PubNubEvaluationOfPlayerInputMessage(newEvaluation);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'evaluationOfPlayerInput'.\r\n     */\r\n    private processEvaluationOfPlayerInput = (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => {\r\n        const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n        const playerInputEvaluations = currentRoundEvaluation.get(newEvaluation.evaluatedPlayerId);\r\n        if (playerInputEvaluations) {\r\n            playerInputEvaluations[newEvaluation.categoryIndex].set(evaluatingPlayerId, newEvaluation.markedAsValid);\r\n        }\r\n        this.setState({ currentRoundEvaluation });\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate to all players\r\n     * that the user of this instance of the game has finished evaluating the current round.\r\n     */\r\n    private sendEvaluationFinishedMessage = () => {\r\n        this.setState({ loadingScreenMessage: 'Warte auf Mitspieler', showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.evaluationFinished });\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'evaluationFinished'.\r\n     */\r\n    private countPlayerAsEvaluationFinished = (evaluatingPlayerId: string) => {\r\n        const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n        playersThatFinishedEvaluation.set(evaluatingPlayerId, true);\r\n        if (playersThatFinishedEvaluation.size === this.state.allPlayers.size) {\r\n            this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n        } else {\r\n            this.setState({ playersThatFinishedEvaluation });\r\n        }\r\n    }\r\n\r\n    private processEvaluationsAndStartNextRoundOrFinishGame = () => {\r\n        const { allPlayers, currentRound, currentRoundEvaluation, gameRounds } = this.state;\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const newGameRounds = cloneDeep(gameRounds);\r\n        newGameRounds[currentRound - 1] = processPlayerInputEvaluations(\r\n            gameRounds[currentRound - 1], currentRoundEvaluation, getMinNumberOfMarkedAsInvalid(allPlayers.size)\r\n        );\r\n        if (currentRound === gameConfig.numberOfRounds) {\r\n            // Finish game and show results.\r\n            this.props.onSetDataOfFinishedGame({ allPlayers, gameConfig, gameRounds: newGameRounds });\r\n            this.props.history.push('/results');\r\n        } else {\r\n            // Start next round of the game.\r\n            this.setState({\r\n                currentPhase: GamePhase.fillOutTextfields,\r\n                currentRoundEvaluation: createGameRoundEvaluation(allPlayers, gameConfig.categories),\r\n                currentRoundInputs: createAndFillArray<PlayerInput>(gameConfig.categories.length, { text: '', valid: true }),\r\n                currentRound: currentRound + 1,\r\n                gameRounds: newGameRounds,\r\n                loadingScreenMessage: null,\r\n                playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n                showLoadingScreen: false\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): PlayGamePropsFromStore => {\r\n    return {\r\n        gameConfig: state.gameConfig,\r\n        gameId: state.gameId,\r\n        playerInfo: state.playerInfo as PlayerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): PlayGameDispatchProps => {\r\n    return {\r\n        onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => {\r\n            dispatch(setDataOfFinishedGame(payload))\r\n        },\r\n        onResetAppState: () => {\r\n            dispatch(resetAppState())\r\n        }\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);\r\n","import { APP_THEME_ID } from './../constants/themes.constant';\r\nconst APP_THEME_LOCAL_STORAGE_KEY = 'SLF-APP-THEME';\r\n\r\nexport const getAppThemeIdFromLocalStorage = (): string | null => {\r\n    return localStorage.getItem(APP_THEME_LOCAL_STORAGE_KEY);\r\n};\r\n\r\nexport const setAppThemeIdInLocalStorage = (appTheme: APP_THEME_ID) => {\r\n    return localStorage.setItem(APP_THEME_LOCAL_STORAGE_KEY, appTheme);\r\n};\r\n","import './App.css';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport Header from './components/Header/Header';\r\nimport { AppTheme, AppThemes } from './constants/themes.constant';\r\nimport { Dashboard } from './containers/Dashboard/Dashboard';\r\nimport GameResults from './containers/GameResults/GameResults';\r\nimport JoinGame from './containers/JoinGame/JoinGame';\r\nimport NewGame from './containers/NewGame/NewGame';\r\nimport PlayGame from './containers/PlayGame/PlayGame';\r\nimport { getAppThemeIdFromLocalStorage, setAppThemeIdInLocalStorage } from './utils/local-storage.utils';\r\n\r\ninterface AppState {\r\n    activeTheme: AppTheme;\r\n}\r\n\r\nclass App extends Component<any, AppState> {\r\n    public state: AppState = {\r\n        activeTheme: AppThemes[0],\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ThemeProvider theme={this.state.activeTheme.muiTheme}>\r\n                <div className=\"app-container\">\r\n                    <Header\r\n                        theme={this.state.activeTheme}\r\n                        switchTheme={this.switchThemeHandler}\r\n                    />\r\n                    <main\r\n                        className={'app-main ' + this.state.activeTheme.className}\r\n                        style={this.state.activeTheme.style}\r\n                    >\r\n                        <HashRouter basename={process.env.PUBLIC_URL}>\r\n                            <Switch>\r\n                                <Route path=\"/\" exact component={Dashboard} />\r\n                                <Route path=\"/newgame\" exact component={NewGame} />\r\n                                <Route path=\"/joingame\" exact component={JoinGame} />\r\n                                <Route path=\"/play\" exact component={PlayGame} />\r\n                                <Route path=\"/results\" exact component={GameResults} />\r\n                            </Switch>\r\n                        </HashRouter>\r\n                    </main>\r\n                </div>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const appThemeId = getAppThemeIdFromLocalStorage();\r\n        if (appThemeId) {\r\n            const appTheme = AppThemes.find(theme => theme.id === appThemeId);\r\n            if (appTheme) {\r\n                this.setState({ activeTheme: appTheme });\r\n            }\r\n        }\r\n    }\r\n\r\n    private switchThemeHandler = (newTheme: AppTheme) => {\r\n        this.setState({ activeTheme: newTheme });\r\n        setAppThemeIdInLocalStorage(newTheme.id);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GameConfig, GameRound } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport {\r\n    AppAction,\r\n    RESET_APP_STATE,\r\n    SET_DATA_FOR_NEW_GAME,\r\n    SET_DATA_OF_FINISHED_GAME,\r\n    SetDataForNewGameAction,\r\n    SetDataOfFinishedGameAction,\r\n} from './app.actions';\r\n\r\nexport interface AppState {\r\n    allPlayers: Map<string, PlayerInfo> | null;\r\n    gameId: string | null;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[] | null;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\n\r\nconst initialState: AppState = {\r\n    allPlayers: null,\r\n    gameId: null,\r\n    gameConfig: null,\r\n    gameRounds: null,\r\n    playerInfo: null\r\n};\r\n\r\nexport const appReducer = (state: AppState = initialState, action: AppAction): AppState => {\r\n    switch (action.type) {\r\n        case SET_DATA_FOR_NEW_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataForNewGameAction).payload\r\n            };\r\n        case SET_DATA_OF_FINISHED_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataOfFinishedGameAction).payload,\r\n                // Set gameId to null to prevent player from manually opening PlayGame route.\r\n                gameId: null\r\n            };\r\n        case RESET_APP_STATE:\r\n            return { ...initialState };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { appReducer } from './store/app.reducer';\r\nimport { Provider } from 'react-redux';\r\n\r\nexport const appStore = createStore(appReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={appStore}><App /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}