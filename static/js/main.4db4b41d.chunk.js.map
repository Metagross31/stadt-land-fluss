{"version":3,"sources":["constants/themes.constant.ts","components/ChipsArray/ChipsArray.tsx","components/Header/Header.tsx","components/SectionHeader/SectionHeader.tsx","containers/Dashboard/Dashboard.tsx","utils/game.utils.ts","store/app.actions.ts","containers/GameResults/GameResults.tsx","config/pubnub.config.ts","containers/JoinGame/JoinGame.tsx","constants/game.constant.ts","containers/NewGame/NewGame.tsx","models/pub-nub-data.model.ts","components/LoadingScreen/LoadingScreen.tsx","components/GameRoundChip/GameRoundChip.tsx","components/PhaseEvaluateRound/PhaseEvaluateRound.tsx","components/PhaseFillOutTextfields/PhaseFillOutTextfields.tsx","utils/general.utils.ts","components/JoinGameLink/JoinGameLink.tsx","components/OtherPlayers/OtherPlayers.tsx","components/PhaseWaitingToStart/PhaseWaitingToStart.tsx","components/PubNubEventHandler/PubNubEventHandler.tsx","containers/PlayGame/PlayGame.tsx","utils/local-storage.utils.ts","App.tsx","serviceWorker.ts","store/app.reducer.ts","index.tsx"],"names":["APP_THEME_ID","ChipType","AppThemes","id","green","className","displayName","muiTheme","createMuiTheme","palette","primary","orange","pink","purple","Header","state","anchorEl","handleClick","event","setState","currentTarget","handleClose","color","handleMenuItemClick","selectedTheme","props","switchTheme","playerNameParagraph","this","playerName","theme","Button","aria-controls","aria-haspopup","onClick","Menu","keepMounted","open","Boolean","onClose","map","item","index","MenuItem","key","Component","connect","playerInfo","name","SectionHeader","Fragment","text","showDivider","Divider","Dashboard","Link","component","RouterLink","to","getRandomnLetters","numberOfLetters","Error","randomnLetters","alphabetWithoutQXY","i","randomnLetter","randomnItem","push","filter","letter","markEmptyPlayerInputsAsInvalid","playerInputs","input","valid","createGameRoundEvaluation","players","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","_","evaluationForOneCategory","evaluatingPlayer","set","getMinNumberOfMarkedAsInvalid","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","processPlayerInputEvaluations","gameRound","roundEvaluation","minNumberOfInvalids","evaluatedGameRound","cloneDeep","playerId","get","length","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","points","round","reduce","total","Object","keys","sort","a","b","setDataForNewGame","payload","type","GameResults","returnToDashboard","history","onResetAppState","gameConfig","result","numberOfRounds","join","variant","size","startIcon","dispatch","PUBNUB_KEYS","require","PUBNUB_CONFIG","publishKey","subscribeKey","uuid","uuidv4","ssl","JoinGame","idInput","nameInput","validateInputs","handleInputChange","target","value","handleSubmit","preventDefault","onSetGameData","gameId","isAdmin","joinGameForm","onSubmit","noValidate","autoComplete","TextField","label","onChange","fullWidth","required","error","query","URLSearchParams","location","search","has","GamePhase","CategoryArray","useStyles","makeStyles","createStyles","root","display","justifyContent","flexWrap","padding","spacing","chip","margin","ChipsArray","classes","chipsArray","Chip","chipType","undefined","onDelete","removeChip","deleteIcon","STANDARD_CATEGORIES","AVAILABLE_CATEGORIES","PubNubMessageType","NewGame","availableCategories","numberOfRoundsInput","selectedCategories","handleNameInputChange","handleNumberOfRoundsInputChange","updateCategoryArrays","chipToRemove","removeFromArray","newSelectedCategories","newAvailableCategories","selected","category","letters","numberOfRoundsInputLabel","newGameForm","available","loadingScreen","position","top","left","height","width","backgroundColor","loadingSpinner","transform","LoadingScreen","CircularProgress","centerContent","marginTop","borderRadius","fontSize","boxShadow","GameRoundChip","currentLetter","currentRound","icon","PhaseEvaluateRound","getMinNumberOfNecessaryMarkedAsInvalid","finishedGameRound","sortedPlayers","Array","from","data","charCodeAt","createEvaluationCheckboxes","categoryIndex","indexInSortedPlayers","player","evaluationForCategory","currentRoundEvaluation","Tooltip","title","Checkbox","checked","inputProps","checkboxOwner","updateEvaluationOfPlayerInput","evaluatedPlayerId","handleCheckboxChange","InputProps","startAdornment","InputAdornment","IconButton","aria-label","sendEvaluationFinishedMessage","PhaseFillOutTextfields","gameRoundInputs","newGameRoundInputs","updateCurrentRoundInputs","sendRoundFinishedMessage","createAndFillArray","fill","JoinGameLink","url","window","href","joinGameLink","slice","OutlinedInput","disabled","endAdornment","element","document","createElement","setAttribute","style","body","appendChild","select","execCommand","removeChild","copyToClipboard","OtherPlayers","playerNames","otherPlayers","PubNubCurrentRoundInputsMessage","currentRoundInputs","PubNubEvaluationOfPlayerInputMessage","evaluationOfPlayerInput","PhaseWaitingToStart","waitForGameStartElement","createGameSettingsElement","sendMessage","startGame","React","memo","pubNubClient","usePubNub","setUserState","newUserState","channels","gameChannel","getHereNowData","hereNow","includeUUIDs","includeState","response","console","log","dataForGameChannel","addPlayers","occupants","occupant","useEffect","pubNubListeners","message","messageEvent","roundFinished","stopRoundAndSendInputs","addPlayerInputForFinishedRound","publisher","processEvaluationOfPlayerInput","evaluationFinished","countPlayerAsEvaluationFinished","presence","presenceEvent","action","userState","status","statusEvent","channel","messages","navigateToDashboard","addListener","subscribe","withPresence","removeListener","unsubscribeAll","PlayGame","currentPhase","waitingToStart","playersThatFinishedEvaluation","showLoadingScreen","PubNub","publish","storeInHistory","ttl","newPlayers","newPlayer","roundInputs","fillOutTextfields","newCurrentRoundInputs","toPubNubMessage","playerInputsForFinishedRound","evaluateRound","newEvaluation","evaluatingPlayerId","playerInputEvaluations","processEvaluationsAndStartNextRoundOrFinishGame","newGameRounds","onSetDataOfFinishedGame","delete","currentPhaseElement","client","setDataOfFinishedGame","setAppThemeIdInLocalStorage","appTheme","localStorage","setItem","App","activeTheme","switchThemeHandler","newTheme","ThemeProvider","basename","process","path","exact","appThemeId","getItem","find","hostname","match","initialState","appStore","createStore","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4db4b41d.chunk.js","sourcesContent":["import { createMuiTheme, Theme } from '@material-ui/core/styles';\r\nimport green from '@material-ui/core/colors/green';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport purple from '@material-ui/core/colors/purple';\r\n\r\nexport enum APP_THEME_ID {\r\n    green = 'green',\r\n    orange = 'orange',\r\n    pink = 'pink'\r\n}\r\n\r\nexport interface AppTheme {\r\n    id: APP_THEME_ID;\r\n    /** The name of the CSS class that is applied to the header and the main element */\r\n    className: string;\r\n    /** The text displayed in the header's color picker dropdown */\r\n    displayName: string;\r\n    muiTheme: Theme;\r\n}\r\n\r\nexport const AppThemes: AppTheme[] = [\r\n    {\r\n        id: APP_THEME_ID.green,\r\n        className: 'green-theme',\r\n        displayName: 'Grün',\r\n        muiTheme: createMuiTheme({ palette: { primary: green } })\r\n    },\r\n    {\r\n        id: APP_THEME_ID.orange,\r\n        className: 'orange-theme',\r\n        displayName: 'Orange',\r\n        muiTheme: createMuiTheme({ palette: { primary: orange } })\r\n    },\r\n    {\r\n        id: APP_THEME_ID.pink,\r\n        className: 'pink-theme',\r\n        displayName: 'Pink',\r\n        muiTheme: createMuiTheme({ palette: { primary: purple } })\r\n    },\r\n]\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport React from 'react';\r\n\r\nexport enum ChipType {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface ChipsArrayProps {\r\n    chipsArray: string[];\r\n    chipType: ChipType;\r\n    removeChip: (chip: string) => any;\r\n}\r\n\r\nconst ChipsArray = (props: ChipsArrayProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.chipsArray.map((chip, index) => (\r\n                <Chip\r\n                    key={`chip-to-${props.chipType}-${index}`}\r\n                    color={props.chipType === 'selected' ? 'primary' : undefined}\r\n                    label={chip}\r\n                    className={classes.chip}\r\n                    onDelete={() => props.removeChip(chip)}\r\n                    deleteIcon={props.chipType === 'selected' ? <HighlightOffIcon /> : <DoneIcon />}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChipsArray;\r\n","import React, { Component } from 'react';\r\nimport './Header.css';\r\nimport { Button, Menu, MenuItem } from '@material-ui/core';\r\nimport { AppThemes, AppTheme } from '../../constants/themes.constant';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../store/app.reducer';\r\n\r\ninterface HeaderPropsFromStore {\r\n    playerName: string | null;\r\n}\r\ninterface HeaderProps extends HeaderPropsFromStore {\r\n    switchTheme: (newTheme: AppTheme) => any;\r\n    theme: AppTheme;\r\n}\r\ninterface HeaderState {\r\n    anchorEl: EventTarget | null;\r\n}\r\n\r\nexport class Header extends Component<HeaderProps, HeaderState> {\r\n    public state = { anchorEl: null };\r\n\r\n    public render() {\r\n        const playerNameParagraph = (\r\n            <p>Spieler: {this.props.playerName ? this.props.playerName : '-'}</p>\r\n        );\r\n        return (\r\n            <header\r\n                className={'app-header ' + this.props.theme.className}\r\n            >\r\n                <h1>Stadt-Land-Fluss</h1>\r\n                {playerNameParagraph}\r\n                <Button\r\n                    className=\"color-picker-button\"\r\n                    aria-controls=\"color-picker-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={this.handleClick}\r\n                >\r\n                    Theme\r\n                </Button>\r\n                <Menu\r\n                    id=\"color-picker-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {AppThemes.map((item, index) => (\r\n                        <MenuItem\r\n                            key={'color-picker-menu-item-' + index}\r\n                            onClick={() => this.handleMenuItemClick(item)}\r\n                        >{item.displayName}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    private handleClick = (event: any) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    private handleClose = (color: string) => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    private handleMenuItemClick = (selectedTheme: AppTheme) => {\r\n        this.setState({ anchorEl: null });\r\n        this.props.switchTheme(selectedTheme);\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): HeaderPropsFromStore => {\r\n    return {\r\n        playerName: state.playerInfo ? state.playerInfo.name : ''\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Header);\r\n","import './SectionHeader.css';\r\nimport { Divider } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ninterface SectionHeaderProps {\r\n    showDivider: boolean;\r\n    text: string;\r\n}\r\n\r\nexport const SectionHeader: React.FunctionComponent<SectionHeaderProps> = props => (\r\n    <React.Fragment>\r\n        <h2 className=\"section-header\">{props.text}</h2>\r\n        {props.showDivider ? <Divider /> : null}\r\n    </React.Fragment>\r\n);\r\n","import './Dashboard.css';\r\nimport Link from '@material-ui/core/Link';\r\nimport React, { Component } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\n\r\nexport class Dashboard extends Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"dashboard-container material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Dashboard\"></SectionHeader>\r\n                    <div className=\"link-container\">\r\n                        <Link component={RouterLink} to=\"/newgame\">Neues Spiel</Link>\r\n                        <Link component={RouterLink} to=\"/joingame\">Spiel beitreten</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import randomnItem from 'random-item';\r\nimport { cloneDeep } from 'lodash';\r\nimport { PlayerInput } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { GameRound, GameRoundEvaluation, PlayerInputEvaluation, GameResultForPlayer } from './../models/game.interface';\r\n\r\n/**\r\n* Returns an array of unique letters of the alphabet (excluding Q, X and Y).\r\n* The number of letters is defined by the parameter numberOfLetters (max: 23).\r\n*/\r\nexport const getRandomnLetters = (numberOfLetters: number): string[] => {\r\n    if (numberOfLetters > 23) {\r\n        throw new Error('Cannot create more than 23 randomn unique letters of the alphabet (without Q, X and Y)!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let alphabetWithoutQXY = [\r\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\r\n        'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'Z'\r\n    ];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(alphabetWithoutQXY);\r\n        randomnLetters.push(randomnLetter);\r\n        alphabetWithoutQXY = alphabetWithoutQXY.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\n /**\r\n * Checks each PlayerInput object whether it contains text.\r\n * If text string is empty, valid is set to false, otherwise to true.\r\n */\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(_ => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfMarkedAsInvalid = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\nexport const processPlayerInputEvaluations = (\r\n    gameRound: GameRound, roundEvaluation: GameRoundEvaluation, minNumberOfInvalids: number\r\n): GameRound => {\r\n    const evaluatedGameRound = cloneDeep(gameRound);\r\n    evaluatedGameRound.forEach((playerInputs, playerId) => {\r\n        const evaluations = roundEvaluation.get(playerId) as PlayerInputEvaluation[];\r\n        for (let i = 0; i < playerInputs.length; i++) {\r\n            // Only process evaluations for inputs that were not\r\n            // already marked as invalid because of being empty strings.\r\n            if (playerInputs[i].valid) {\r\n                playerInputs[i].valid = getNumberOfInvalids(evaluations[i]) < minNumberOfInvalids;\r\n            }\r\n        }\r\n    });\r\n    return evaluatedGameRound;\r\n};\r\n\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: { [key: string]: GameResultForPlayer } = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => input.valid ? total + 1 : total, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n}\r\n","import { PlayerInfo } from './../models/player.interface';\r\nimport { Action } from \"redux\";\r\nimport { GameConfig, GameRound } from \"../models/game.interface\";\r\n\r\nexport const SET_DATA_FOR_NEW_GAME = 'SET_DATA_FOR_NEW_GAME';\r\nexport const SET_DATA_OF_FINISHED_GAME = 'SET_DATA_OF_FINISHED_GAME';\r\nexport const RESET_APP_STATE = 'RESET_APP_STATE';\r\n\r\nexport interface SetDataForNewGamePayload {\r\n    gameId: string;\r\n    gameConfig: GameConfig | null;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\nexport interface SetDataForNewGameAction extends Action {\r\n    payload: SetDataForNewGamePayload\r\n}\r\nexport interface SetDataOfFinishedGamePayload {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n}\r\nexport interface SetDataOfFinishedGameAction extends Action {\r\n    payload: SetDataOfFinishedGamePayload\r\n}\r\nexport interface ResetAppStateAction extends Action {}\r\nexport type AppAction = SetDataForNewGameAction | SetDataOfFinishedGameAction | ResetAppStateAction;\r\n\r\n/*\r\n * Action Creators\r\n */\r\nexport const setDataForNewGame = (payload: SetDataForNewGamePayload): SetDataForNewGameAction => {\r\n    return { type: SET_DATA_FOR_NEW_GAME, payload }\r\n};\r\nexport const setDataOfFinishedGame = (payload: SetDataOfFinishedGamePayload): SetDataOfFinishedGameAction => {\r\n    return { type: SET_DATA_OF_FINISHED_GAME, payload }\r\n};\r\nexport const resetAppState = (): ResetAppStateAction => {\r\n    return { type: RESET_APP_STATE }\r\n};\r\n","import { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport { GameConfig, GameResultForPlayer } from '../../models/game.interface';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { calculateGameResults } from '../../utils/game.utils';\r\nimport { AppAction, resetAppState } from '../../store/app.actions';\r\n\r\ninterface GameResultsDispatchProps {\r\n    onResetAppState: () => void;\r\n}\r\ninterface GameResultsProps extends AppState, GameResultsDispatchProps, RouterProps { }\r\ninterface GameResultsState {\r\n    gameResults: GameResultForPlayer[];\r\n}\r\n\r\nclass GameResults extends Component<GameResultsProps, GameResultsState> {\r\n    public state: GameResultsState = { gameResults: [] };\r\n\r\n    public render() {\r\n        if (this.props.gameRounds === null) { return null; }\r\n        const gameConfig = this.props.gameConfig as GameConfig;\r\n        // todo: add key to gameResults.map content\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Ergebnis\"></SectionHeader>\r\n                    {this.state.gameResults.map((result, index) => (\r\n                        <p key={'results-for-player-' + index}>{result.playerName}: {result.points}</p>\r\n                    ))}\r\n                </div>\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiel-Settings\"></SectionHeader>\r\n                    <h3>Spiele-Settings:</h3>\r\n                    <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                    <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n                </div>\r\n                <div className=\"button-wrapper add-margin-top\">\r\n                    <Button\r\n                        type=\"button\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<ExitToAppIcon />}\r\n                        onClick={this.returnToDashboard}\r\n                    >Dashboard</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // If there are no allPlayers or gameRounds present in application state, then reroute user to dashboard.\r\n        if (this.props.allPlayers === null || this.props.gameRounds === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        this.setState({ gameResults: calculateGameResults(this.props.allPlayers, this.props.gameRounds) });\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n        this.props.onResetAppState();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppState => state;\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): GameResultsDispatchProps => {\r\n    return {\r\n        onResetAppState: () => {\r\n            dispatch(resetAppState())\r\n        }\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults);\r\n","import PubNub from 'pubnub';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst PUBNUB_KEYS = require('./pubnub.config.json');\r\n\r\nexport const PUBNUB_CONFIG: PubNub.PubnubConfig = {\r\n    publishKey: PUBNUB_KEYS.publishKey,\r\n    subscribeKey: PUBNUB_KEYS.subscribeKey,\r\n    uuid: uuidv4(), // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d',\r\n    ssl: true\r\n};\r\n","import './JoinGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\n\r\ninterface JoinGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface JoinGameProps extends JoinGameDispatchProps, RouteComponentProps {}\r\ninterface JoinGameState {\r\n    idInput: string;\r\n    nameInput: string;\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass JoinGame extends Component<JoinGameProps, JoinGameState> {\r\n    public state: JoinGameState = {\r\n        idInput: '',\r\n        nameInput: '',\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const joinGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"idInput\"\r\n                    label=\"Spiel-ID\"\r\n                    value={this.state.idInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.idInput}\r\n                />\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                />\r\n                <div className=\"button-wrapper\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<DirectionsWalkIcon />}\r\n                    >Beitreten</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiel beitreten\"></SectionHeader>\r\n                    {joinGameForm}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        if (query.has('id')) {\r\n            this.setState({ idInput: query.get('id') as string });\r\n        }\r\n    }\r\n\r\n    private handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value } as any);\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        this.setState({ validateInputs: true });\r\n        if (this.state.idInput && this.state.nameInput) {\r\n            this.props.onSetGameData({\r\n                gameConfig: null,\r\n                gameId: this.state.idInput,\r\n                playerInfo: {\r\n                    id: PUBNUB_CONFIG.uuid as string,\r\n                    isAdmin: false,\r\n                    name: this.state.nameInput\r\n                }\r\n            });\r\n            this.props.history.push('/play');\r\n        }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): JoinGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => {\r\n            dispatch(setDataForNewGame(payload))\r\n        }\r\n    }\r\n};\r\nexport default connect(null, mapDispatchToProps)(JoinGame);\r\n","export const MIN_NUMBER_OF_ROUNDS = 3;\r\nexport const MAX_NUMBER_OF_ROUNDS = 10;\r\n\r\nexport const STANDARD_CATEGORIES = ['Stadt', 'Land', 'Fluss'];\r\nexport const AVAILABLE_CATEGORIES = [\r\n    'Band/Musiker',\r\n    'Beruf',\r\n    'Berühmte Person',\r\n    'Fiktiver Charakter',\r\n    'Film/Serie',\r\n    'Getränk',\r\n    'Hobby',\r\n    'Krankheit',\r\n    'Laster',\r\n    'Marke',\r\n    'Mordwaffe',\r\n    'Pflanze',\r\n    'Scheidungsgrund',\r\n    'Sehenswürdigkeit',\r\n    'Speise',\r\n    'Tier'\r\n];\r\n\r\nexport enum GamePhase {\r\n    waitingToStart = 'waitingToStart',\r\n    fillOutTextfields = 'fillOutTextfields',\r\n    evaluateRound = 'evaluateRound',\r\n    gameResult = 'gameResult'\r\n}\r\n","import './NewGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ChipsArray, { ChipType } from '../../components/ChipsArray/ChipsArray';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport {\r\n    AVAILABLE_CATEGORIES,\r\n    MAX_NUMBER_OF_ROUNDS,\r\n    MIN_NUMBER_OF_ROUNDS,\r\n    STANDARD_CATEGORIES,\r\n} from '../../constants/game.constant';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\n\r\nenum CategoryArray {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\ninterface NewGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface NewGameProps extends NewGameDispatchProps, RouteComponentProps {}\r\ninterface NewGameState {\r\n    availableCategories: string[];\r\n    nameInput: string;\r\n    numberOfRoundsInput: number;\r\n    selectedCategories: string[];\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass NewGame extends Component<NewGameProps, NewGameState> {\r\n    public state: NewGameState = {\r\n        availableCategories: AVAILABLE_CATEGORIES,\r\n        nameInput: '',\r\n        numberOfRoundsInput: MIN_NUMBER_OF_ROUNDS,\r\n        selectedCategories: STANDARD_CATEGORIES,\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const numberOfRoundsInputLabel = `Anzahl Runden (${MIN_NUMBER_OF_ROUNDS}-${MAX_NUMBER_OF_ROUNDS})`;\r\n        const newGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleNameInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                />\r\n                <TextField\r\n                    name=\"numberOfRoundsInput\"\r\n                    label={numberOfRoundsInputLabel}\r\n                    type=\"number\"\r\n                    value={this.state.numberOfRoundsInput}\r\n                    onChange={this.handleNumberOfRoundsInputChange}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                />\r\n                <p className=\"category-array-label\">Ausgewählte Kategorien:</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.selectedCategories}\r\n                    chipType={ChipType.selected}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.selected)}\r\n                />\r\n                <p className=\"category-array-label\">Verfügbare Kategorien:</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.availableCategories}\r\n                    chipType={ChipType.available}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.available)}\r\n                />\r\n                <div className=\"button-wrapper add-margin-top\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<AddCircleIcon />}\r\n                    >Spiel erstellen</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Neues Spiel\" />\r\n                    {newGameForm}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleNameInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ nameInput: event.target.value });\r\n    }\r\n\r\n    private handleNumberOfRoundsInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +event.target.value;\r\n        value = value < MIN_NUMBER_OF_ROUNDS ? MIN_NUMBER_OF_ROUNDS : value;\r\n        value = value > MAX_NUMBER_OF_ROUNDS ? MAX_NUMBER_OF_ROUNDS : value;\r\n        this.setState({ numberOfRoundsInput: value });\r\n    }\r\n\r\n    private updateCategoryArrays = (chipToRemove: string, removeFromArray: CategoryArray) => {\r\n        let newSelectedCategories: string[];\r\n        let newAvailableCategories: string[];\r\n        if (removeFromArray === CategoryArray.selected) {\r\n            newSelectedCategories = this.state.selectedCategories.filter(category => category !== chipToRemove);\r\n            newAvailableCategories = [...this.state.availableCategories];\r\n            newAvailableCategories.push(chipToRemove);\r\n        } else {\r\n            newAvailableCategories = this.state.availableCategories.filter(category => category !== chipToRemove);\r\n            newSelectedCategories = [...this.state.selectedCategories];\r\n            newSelectedCategories.push(chipToRemove);\r\n        }\r\n        this.setState({\r\n            availableCategories: newAvailableCategories,\r\n            selectedCategories: newSelectedCategories\r\n        });\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        this.setState({ validateInputs: true });\r\n        if (this.state.nameInput && this.state.selectedCategories.length >= 3) {\r\n            const gameId = uuidv4(); // ⇨ e.g. '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n            const letters = getRandomnLetters(this.state.numberOfRoundsInput);\r\n            this.props.onSetGameData({\r\n                gameConfig: {\r\n                    categories: this.state.selectedCategories,\r\n                    letters,\r\n                    numberOfRounds: this.state.numberOfRoundsInput\r\n                },\r\n                gameId,\r\n                playerInfo: {\r\n                    id: PUBNUB_CONFIG.uuid as string,\r\n                    isAdmin: true,\r\n                    name: this.state.nameInput\r\n                }\r\n            });\r\n            this.props.history.push('/play');\r\n        }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): NewGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => {\r\n            dispatch(setDataForNewGame(payload))\r\n        }\r\n    }\r\n};\r\nexport default connect(null, mapDispatchToProps)(NewGame);\r\n","import { GameConfig, PlayerInput, EvaluationOfPlayerInput } from './game.interface';\r\nimport { PlayerInfo } from './player.interface';\r\n\r\nexport interface PubNubUserState {\r\n    gameConfig?: GameConfig;\r\n    playerInfo: PlayerInfo;\r\n}\r\n\r\nexport enum PubNubMessageType {\r\n    startGame = 'startGame',\r\n    roundFinished = 'roundFinished',\r\n    currentRoundInputs = 'currentRoundInputs',\r\n    evaluationOfPlayerInput = 'evaluationOfPlayerInput',\r\n    evaluationFinished = 'evaluationFinished'\r\n}\r\n\r\nexport interface PubNubMessage {\r\n    type: PubNubMessageType;\r\n    payload?: any;\r\n}\r\n\r\nexport class PubNubCurrentRoundInputsMessage {\r\n    constructor(private payload: PlayerInput[]) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.currentRoundInputs,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport class PubNubEvaluationOfPlayerInputMessage {\r\n    constructor(private payload: EvaluationOfPlayerInput) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.evaluationOfPlayerInput,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        loadingScreen: {\r\n            position: 'absolute',\r\n            top: '0',\r\n            left: '0',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n        },\r\n        loadingSpinner: {\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)'\r\n        }\r\n    }),\r\n);\r\n\r\nconst LoadingScreen = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.loadingScreen}>\r\n            <div className={classes.loadingSpinner}>\r\n                <CircularProgress />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        centerContent: {\r\n            display: 'flex',\r\n            justifyContent: 'center'\r\n        },\r\n        chip: {\r\n            height: '3rem',\r\n            marginTop: '1rem',\r\n            borderRadius: '5px',\r\n            fontSize: '1.2rem',\r\n            boxShadow: '0 2px 4px rgba(0,0,0,.501961)'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface GameRoundChipProps {\r\n    currentLetter: string;\r\n    currentRound: number;\r\n}\r\n\r\nconst GameRoundChip = (props: GameRoundChipProps) => {\r\n    const classes = useStyles();\r\n    const { currentLetter, currentRound } = props;\r\n    return (\r\n        <div className={classes.centerContent}>\r\n            <Chip\r\n                color=\"primary\"\r\n                icon={<EmojiObjectsIcon />}\r\n                label={`Runde ${currentRound}: „${currentLetter}“`}\r\n                className={classes.chip}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameRoundChip;\r\n","import './PhaseEvaluateRound.css';\r\nimport { Checkbox, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport React, { ChangeEvent } from 'react';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    getMinNumberOfMarkedAsInvalid as getMinNumberOfNecessaryMarkedAsInvalid,\r\n    getNumberOfInvalids,\r\n} from '../../utils/game.utils';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseEvaluateRoundProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n    updateEvaluationOfPlayerInput: (newEvaluation: EvaluationOfPlayerInput) => void;\r\n    sendEvaluationFinishedMessage: () => void;\r\n}\r\n\r\nconst PhaseEvaluateRound = (props: PhaseEvaluateRoundProps) => {\r\n    const { allPlayers, currentRound, gameConfig, playerInfo } = props;\r\n    const minNumberOfInvalids = getMinNumberOfNecessaryMarkedAsInvalid(allPlayers.size);\r\n    // Retrieve data for finished round; e.g. if current round is 1, then data is at index 0.\r\n    const finishedGameRound = props.gameRounds[currentRound - 1];\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n    // Sort players alphabetically.\r\n    let sortedPlayers = Array.from(allPlayers).map(data => data[1]);\r\n    sortedPlayers = sortedPlayers.sort((a, b) => a.name.charCodeAt(0) - b.name.charCodeAt(0));\r\n\r\n    const handleCheckboxChange = (\r\n        event: ChangeEvent<HTMLInputElement>, checkboxOwner: PlayerInfo, categoryIndex: number, indexInSortedPlayers: number\r\n    ) => {\r\n        // Only accept checkbox changes for the user's evaluation checkboxes.\r\n        if (checkboxOwner.id === playerInfo.id) {\r\n            const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n            props.updateEvaluationOfPlayerInput({\r\n                evaluatedPlayerId: evaluatedPlayer.id,\r\n                categoryIndex,\r\n                markedAsValid: event.target.checked\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Creates a group of checkboxes for each player in the game that represent their evaluation of\r\n     * the text input of one of the players (including themselves) for one category. Users can either\r\n     * mark a text input as valid (= checkbox checked) or invalid (= checkbox not checked).\r\n     * The first checkbox represents the user's evaluation and is the only one that triggers a PubNub\r\n     * message to the other players (and themselves) with the updated state of the checkbox.\r\n     */\r\n    const createEvaluationCheckboxes = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        // Make sure that current player's checkbox is first in line.\r\n        const players = [playerInfo, ...(sortedPlayers.filter(player => player.id !== playerInfo.id))];\r\n        const evaluationForPlayer = props.currentRoundEvaluation.get(sortedPlayers[indexInSortedPlayers].id) as PlayerInputEvaluation[];\r\n        const evaluationForCategory = evaluationForPlayer[categoryIndex];\r\n        return (\r\n            <div\r\n                key={`slf-evaluation-checkboxes-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-evaluation-checkboxes-wrapper\"\r\n            >\r\n                {players.map((player, index) => (\r\n                    <Tooltip\r\n                        key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}-${index}`}\r\n                        title={player.name}\r\n                    >\r\n                        <Checkbox\r\n                            key={`slf-evaluation-checkbox-${categoryIndex}-${indexInSortedPlayers}-${index}`}\r\n                            color={player.id === playerInfo.id ? 'primary' : 'default'}\r\n                            checked={!!evaluationForCategory.get(player.id)}\r\n                            inputProps={{ 'aria-label': 'Bestätigt von ' + player.name }}\r\n                            onChange={event => handleCheckboxChange(event, player, categoryIndex, indexInSortedPlayers)}\r\n                        />\r\n                    </Tooltip>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n    /**\r\n     * Creates a section for each category of the current game. It displays the category in the header,\r\n     * followed by one textfield for each player showing their input for the finished round. If the\r\n     * player input isn't an empty string, then on the right side of the textfield a group of\r\n     * checkboxes is displayed which serve to evaluate the player's input (valid or invalid).\r\n     */\r\n    const createCategorySection = (category: string, categoryIndex: number): JSX.Element => (\r\n        <div\r\n            key={'slf-evaluation-for-category-no-' + categoryIndex}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            {sortedPlayers.map((player, indexInSortedPlayers) => (\r\n                <div\r\n                    key={`slf-evaluation-textfield-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                    className=\"slf-evaluation-textfield-wrapper\"\r\n                >\r\n                    <TextField\r\n                        key={'slf-textfield-category-no-' + categoryIndex + '-player-' + indexInSortedPlayers}\r\n                        value={(finishedGameRound.get(player.id) as PlayerInput[])[categoryIndex].text}\r\n                        className=\"slf-evaluation-textfield\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">{player.name}:</InputAdornment>,\r\n                            className: getNumberOfInvalids(\r\n                                (props.currentRoundEvaluation.get(player.id) as PlayerInputEvaluation[])[categoryIndex]\r\n                            ) >= minNumberOfInvalids ? 'text-decoration-line-through' : ''\r\n                        }}\r\n                    />\r\n                    {(finishedGameRound.get(player.id) as PlayerInput[])[categoryIndex].text ?\r\n                        createEvaluationCheckboxes(categoryIndex, indexInSortedPlayers) : null}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip currentLetter={currentLetter} currentRound={currentRound} />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createCategorySection)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"primary\"\r\n                    title=\"Akzeptieren\"\r\n                    aria-label=\"Akzeptieren\"\r\n                    onClick={() => props.sendEvaluationFinishedMessage()}\r\n                >\r\n                    <CheckCircleIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseEvaluateRound;\r\n","import { IconButton, InputAdornment, TextField } from '@material-ui/core';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { GameConfig, PlayerInput } from '../../models/game.interface';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseFillOutTextfieldsProps {\r\n    currentRound: number;\r\n    gameConfig: GameConfig;\r\n    gameRoundInputs: PlayerInput[];\r\n    updateCurrentRoundInputs: (newCurrentRoundInputs: PlayerInput[]) => void;\r\n    sendRoundFinishedMessage: () => void;\r\n}\r\n\r\nconst PhaseFillOutTextfields = (props: PhaseFillOutTextfieldsProps) => {\r\n    const { currentRound, gameConfig, gameRoundInputs } = props;\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number) => {\r\n        const newGameRoundInputs = [...gameRoundInputs];\r\n        newGameRoundInputs[index] = { ...newGameRoundInputs[index], text: event.target.value };\r\n        props.updateCurrentRoundInputs(newGameRoundInputs);\r\n    };\r\n    const createTextfieldElement = (category: string, index: number): JSX.Element => (\r\n        <div\r\n            key={'slf-input-for-category-no-' + index}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            <TextField\r\n                value={gameRoundInputs[index].text}\r\n                onChange={event => handleInputChange(event, index)}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">{currentLetter}:</InputAdornment>\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip currentLetter={currentLetter} currentRound={currentRound} />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createTextfieldElement)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"primary\"\r\n                    title=\"Abschicken\"\r\n                    aria-label=\"Abschicken\"\r\n                    onClick={() => props.sendRoundFinishedMessage()}\r\n                >\r\n                    <EmailIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseFillOutTextfields;\r\n","export const copyToClipboard = (text: string) => {\r\n    const element = document.createElement('textarea');\r\n    element.value = text;\r\n    element.setAttribute('readonly', '');\r\n    element.style.position = 'absolute';\r\n    element.style.left = '-9999px';\r\n    document.body.appendChild(element);\r\n    element.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(element);\r\n};\r\n\r\nexport const createAndFillArray = <T>(length: number, value: T): T[] => {\r\n    return new Array(length).fill(value);\r\n};\r\n","import './JoinGameLink.css';\r\nimport { IconButton, InputAdornment, OutlinedInput } from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport React from 'react';\r\nimport { copyToClipboard } from '../../utils/general.utils';\r\n\r\ninterface JoinGameLinkProps {\r\n    gameId: string;\r\n}\r\n\r\nexport const JoinGameLink = (props: JoinGameLinkProps) => {\r\n    const url = window.location.href;\r\n    // Cut off \"/play\" from the end of the url and add route plus game id.\r\n    const joinGameLink = url.slice(0, url.length - 5) + '/joingame?id=' + props.gameId;\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"join-game-link-label\">Teile diesen Link mit Freunden:</p>\r\n            <OutlinedInput\r\n                name=\"idInput\"\r\n                value={joinGameLink}\r\n                className=\"app-form-input\"\r\n                disabled\r\n                fullWidth\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            title=\"Link kopieren\"\r\n                            aria-label=\"Link kopieren\"\r\n                            onClick={() => copyToClipboard(joinGameLink)}\r\n                        >\r\n                            <FileCopyIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport React from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface OtherPlayersProps {\r\n    otherPlayers: Map<string, PlayerInfo>;\r\n}\r\n\r\nconst OtherPlayers = (props: OtherPlayersProps) => {\r\n    const classes = useStyles();\r\n    const playerNames: string[] = [];\r\n    props.otherPlayers.forEach(player => playerNames.push(player.name));\r\n    return (\r\n        <div className={classes.root}>\r\n            {playerNames.map((name, index) => (\r\n                <Chip\r\n                    key={`player-name-${index}`}\r\n                    icon={<FaceIcon />}\r\n                    color=\"primary\"\r\n                    label={name}\r\n                    className={classes.chip}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OtherPlayers;\r\n","import { Button, Divider } from '@material-ui/core';\r\nimport PlayCircleFilled from '@material-ui/icons/PlayCircleFilled';\r\nimport React from 'react';\r\nimport { GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { JoinGameLink } from '../JoinGameLink/JoinGameLink';\r\nimport OtherPlayers from '../OtherPlayers/OtherPlayers';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\nimport { PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\n\r\ninterface PhaseWaitingToStartProps {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string;\r\n    otherPlayers: Map<string, PlayerInfo>;\r\n    playerInfo: PlayerInfo;\r\n    sendMessage: (message: PubNubMessage) => void;\r\n}\r\n\r\nconst PhaseWaitingToStart = (props: PhaseWaitingToStartProps) => {\r\n    const { gameId, otherPlayers, playerInfo } = props;\r\n    const waitForGameStartElement = (<p>Warte auf Spielbeginn...</p>);\r\n\r\n    const createGameSettingsElement = (): JSX.Element => {\r\n        const gameConfig = props.gameConfig as GameConfig;\r\n        return (\r\n            <React.Fragment>\r\n                <Divider />\r\n                <h3>Spiele-Settings:</h3>\r\n                <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const createStartGameButton = (): JSX.Element => {\r\n        return (\r\n            <div className=\"button-wrapper add-margin-top\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    startIcon={<PlayCircleFilled />}\r\n                    disabled={otherPlayers.size < 1}\r\n                    onClick={() => props.sendMessage({ type: PubNubMessageType.startGame })}\r\n                >Starten</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const createInvitePlayersElement = (): JSX.Element => {\r\n        return (\r\n            <div className=\"material-card-style\">\r\n                <JoinGameLink gameId={gameId as string} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"material-card-style\">\r\n                <SectionHeader showDivider={true} text=\"Gleich geht's los...\"></SectionHeader>\r\n                <h3 className=\"other-players-headline\">Mitspieler:</h3>\r\n                <OtherPlayers otherPlayers={props.otherPlayers} />\r\n                {props.gameConfig ? createGameSettingsElement() : null}\r\n                <Divider />\r\n                {playerInfo.isAdmin ? createStartGameButton() : waitForGameStartElement}\r\n            </div>\r\n            {playerInfo.isAdmin ? createInvitePlayersElement() : null}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseWaitingToStart;\r\n","import { usePubNub } from 'pubnub-react';\r\nimport React, { useEffect } from 'react';\r\nimport { GameConfig, PlayerInput, EvaluationOfPlayerInput } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubUserState, PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport Pubnub from 'pubnub';\r\n\r\ninterface PubNubEventHandlerProps {\r\n    gameChannel: string;\r\n    gameConfig: GameConfig | null;\r\n    playerInfo: PlayerInfo;\r\n    navigateToDashboard: () => void;\r\n    addPlayers: (...newPlayers: PubNubUserState[]) => void;\r\n    startGame: () => void;\r\n    stopRoundAndSendInputs: () => void;\r\n    addPlayerInputForFinishedRound: (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => void;\r\n    processEvaluationOfPlayerInput: (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => void;\r\n    countPlayerAsEvaluationFinished: (evaluatingPlayerId: string) => void;\r\n}\r\n\r\nconst PubNubEventHandler = (props: PubNubEventHandlerProps) => {\r\n    const pubNubClient = usePubNub();\r\n\r\n    const setUserStateAndGetHereNowIfGameIsOpen = () => {\r\n        pubNubClient.history(\r\n            { channel: props.gameChannel, count: 10 },\r\n            (_, response) => {\r\n                // If history includes messages, then game has already started and user can't join.\r\n                // User gets rerouted to dashboard page by PlayGame component.\r\n                if (response.messages.length > 0) {\r\n                    props.navigateToDashboard();\r\n                } else {\r\n                    setUserState();\r\n                    if (!props.playerInfo.isAdmin) {\r\n                        getHereNowData();\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    };\r\n    const setUserState = () => {\r\n        let newUserState: PubNubUserState;\r\n        if (props.playerInfo.isAdmin) {\r\n            newUserState = { gameConfig: props.gameConfig as GameConfig, playerInfo: props.playerInfo };\r\n        } else {\r\n            newUserState = { playerInfo: props.playerInfo };\r\n        }\r\n        // Set this user's state in game channel.\r\n        pubNubClient.setState({\r\n            channels: [props.gameChannel],\r\n            state: newUserState\r\n        });\r\n    };\r\n    const getHereNowData = () => {\r\n        pubNubClient.hereNow(\r\n            { channels: [props.gameChannel], includeUUIDs: true, includeState: true },\r\n            (_, response) => {\r\n                console.log('PubNub hereNow', response);\r\n                // Response includes states of players that joined before.\r\n                const dataForGameChannel = response.channels[props.gameChannel];\r\n                if (dataForGameChannel) {\r\n                    props.addPlayers(...dataForGameChannel.occupants.map(occupant => occupant.state as PubNubUserState));\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const pubNubListeners: Pubnub.ListenerParameters = {\r\n            message: messageEvent => {\r\n                console.log('PubNub message event', messageEvent);\r\n                const message = messageEvent.message as PubNubMessage;\r\n                switch (message.type) {\r\n                    case PubNubMessageType.startGame:\r\n                        props.startGame();\r\n                        break;\r\n                    case PubNubMessageType.roundFinished:\r\n                        props.stopRoundAndSendInputs();\r\n                        break;\r\n                    case PubNubMessageType.currentRoundInputs:\r\n                        props.addPlayerInputForFinishedRound(messageEvent.publisher, message.payload);\r\n                        break;\r\n                    case PubNubMessageType.evaluationOfPlayerInput:\r\n                        props.processEvaluationOfPlayerInput(messageEvent.publisher, message.payload);\r\n                        break;\r\n                    case PubNubMessageType.evaluationFinished:\r\n                        props.countPlayerAsEvaluationFinished(messageEvent.publisher);\r\n                        break;\r\n                    default:\r\n                }\r\n            },\r\n            presence: presenceEvent => {\r\n                console.log('PubNub presence event', presenceEvent);\r\n                // Check for 'state-change' events and process state from new player.\r\n                if (presenceEvent.action === 'state-change') {\r\n                    const userState = presenceEvent.state as PubNubUserState;\r\n                    if (userState.playerInfo.id !== props.playerInfo.id) {\r\n                        props.addPlayers(userState);\r\n                    }\r\n                }\r\n            },\r\n            status: statusEvent => {\r\n                console.log('PubNub status event', statusEvent);\r\n                if (statusEvent.category === 'PNConnectedCategory') {\r\n                    console.log('Player is connected to PubNub game channel');\r\n                    setUserStateAndGetHereNowIfGameIsOpen();\r\n                }\r\n            }\r\n        };\r\n        pubNubClient.addListener(pubNubListeners);\r\n        pubNubClient.subscribe({\r\n            channels: [props.gameChannel],\r\n            withPresence: true\r\n        });\r\n        // When this component is destroyed, we unsubscribe from game channel.\r\n        return () => {\r\n            pubNubClient.removeListener(pubNubListeners);\r\n            pubNubClient.unsubscribeAll();\r\n        }\r\n    });\r\n    return null;\r\n};\r\n\r\nexport default React.memo(PubNubEventHandler);\r\n","import './PlayGame.css';\r\nimport { cloneDeep } from 'lodash';\r\nimport PubNub from 'pubnub';\r\nimport { PubNubProvider } from 'pubnub-react';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport LoadingScreen from '../../components/LoadingScreen/LoadingScreen';\r\nimport PhaseEvaluateRound from '../../components/PhaseEvaluateRound/PhaseEvaluateRound';\r\nimport PhaseFillOutTextfields from '../../components/PhaseFillOutTextfields/PhaseFillOutTextfields';\r\nimport PhaseWaitingToStart from '../../components/PhaseWaitingToStart/PhaseWaitingToStart';\r\nimport PubNubEventHandler from '../../components/PubNubEventHandler/PubNubEventHandler';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { GamePhase } from '../../constants/game.constant';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    PubNubCurrentRoundInputsMessage,\r\n    PubNubEvaluationOfPlayerInputMessage,\r\n    PubNubMessage,\r\n    PubNubMessageType,\r\n    PubNubUserState,\r\n} from '../../models/pub-nub-data.model';\r\nimport { SetDataOfFinishedGamePayload, AppAction, setDataOfFinishedGame, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport {\r\n    createGameRoundEvaluation,\r\n    getMinNumberOfMarkedAsInvalid,\r\n    markEmptyPlayerInputsAsInvalid,\r\n    processPlayerInputEvaluations,\r\n} from '../../utils/game.utils';\r\nimport { createAndFillArray } from '../../utils/general.utils';\r\n\r\ninterface PlayGamePropsFromStore {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string | null;\r\n    playerInfo: PlayerInfo;\r\n}\r\ninterface PlayGameDispatchProps {\r\n    onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => void;\r\n    onResetAppState: () => void;\r\n}\r\ninterface PlayGameProps extends PlayGamePropsFromStore, PlayGameDispatchProps, RouterProps {}\r\ninterface PlayGameState {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentPhase: GamePhase;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    currentRoundInputs: PlayerInput[];\r\n    currentRound: number;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[];\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    showLoadingScreen: boolean;\r\n}\r\n\r\nclass PlayGame extends Component<PlayGameProps, PlayGameState> {\r\n    public state: PlayGameState = {\r\n        allPlayers: new Map<string, PlayerInfo>(),\r\n        currentPhase: GamePhase.waitingToStart,\r\n        currentRoundEvaluation: new Map<string, PlayerInputEvaluation[]>(),\r\n        currentRoundInputs: [],\r\n        currentRound: 1,\r\n        gameConfig: null,\r\n        gameRounds: [],\r\n        playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n        showLoadingScreen: true\r\n    };\r\n    private pubNubClient = new PubNub(PUBNUB_CONFIG);\r\n\r\n    public render() {\r\n        if (this.props.gameId === null) { return null; }\r\n        const { gameId, playerInfo } = this.props;\r\n        const otherPlayers = cloneDeep(this.state.allPlayers);\r\n        otherPlayers.delete(playerInfo.id);\r\n        let currentPhaseElement: JSX.Element | null = null;\r\n        if (this.state.currentPhase === GamePhase.waitingToStart) {\r\n            currentPhaseElement = (\r\n                <PhaseWaitingToStart\r\n                    gameConfig={this.state.gameConfig}\r\n                    gameId={gameId}\r\n                    otherPlayers={otherPlayers}\r\n                    playerInfo={playerInfo}\r\n                    sendMessage={this.sendMessage}\r\n                />\r\n            );\r\n        }\r\n        if (this.state.currentPhase === GamePhase.fillOutTextfields) {\r\n            currentPhaseElement = (\r\n                <PhaseFillOutTextfields\r\n                    currentRound={this.state.currentRound}\r\n                    gameConfig={this.state.gameConfig as GameConfig}\r\n                    gameRoundInputs={this.state.currentRoundInputs}\r\n                    updateCurrentRoundInputs={this.updateCurrentRoundInputs}\r\n                    sendRoundFinishedMessage={this.sendRoundFinishedMessage}\r\n                />\r\n            )\r\n        }\r\n        if (this.state.currentPhase === GamePhase.evaluateRound) {\r\n            currentPhaseElement = (\r\n                <PhaseEvaluateRound\r\n                    allPlayers={this.state.allPlayers}\r\n                    currentRound={this.state.currentRound}\r\n                    currentRoundEvaluation={this.state.currentRoundEvaluation}\r\n                    gameConfig={this.state.gameConfig as GameConfig}\r\n                    gameRounds={this.state.gameRounds}\r\n                    playerInfo={playerInfo}\r\n                    updateEvaluationOfPlayerInput={this.updateEvaluationOfPlayerInput}\r\n                    sendEvaluationFinishedMessage={this.sendEvaluationFinishedMessage}\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            <PubNubProvider client={this.pubNubClient}>\r\n                {/* The props passed to PubNubEventHandler must never be changed,\r\n                    in order to ensure that the component is not rerendered!\r\n                    (PubNubEventHandler is wrapped in React.memo) */}\r\n                <PubNubEventHandler\r\n                    gameChannel={this.props.gameId}\r\n                    gameConfig={this.props.gameConfig}\r\n                    playerInfo={this.props.playerInfo}\r\n                    navigateToDashboard={this.navigateToDashboard}\r\n                    addPlayers={this.addPlayers}\r\n                    startGame={this.startGame}\r\n                    stopRoundAndSendInputs={this.stopRoundAndSendInputs}\r\n                    addPlayerInputForFinishedRound={this.addPlayerInputForFinishedRound}\r\n                    processEvaluationOfPlayerInput={this.processEvaluationOfPlayerInput}\r\n                    countPlayerAsEvaluationFinished={this.countPlayerAsEvaluationFinished}\r\n                />\r\n                {this.state.showLoadingScreen ? <LoadingScreen /> : (\r\n                    <div className=\"main-content-wrapper\">\r\n                        {currentPhaseElement}\r\n                    </div>\r\n                )}\r\n            </PubNubProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // If there is no gameId present in application state, then reroute user to dashboard.\r\n        if (this.props.gameId === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        allPlayers.set(this.props.playerInfo.id, this.props.playerInfo);\r\n        // If player is the game admin, the gameConfig can be taken from application state\r\n        // and we can hide the loading screen and show PhaseWaitingToStart component right away.\r\n        if (this.props.playerInfo.isAdmin) {\r\n            this.setState({ allPlayers, gameConfig: this.props.gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    private sendMessage = (message: PubNubMessage) => {\r\n        this.pubNubClient.publish(\r\n            {\r\n                channel: this.props.gameId as string,\r\n                message,\r\n                storeInHistory: true,\r\n                ttl: 1 // time to live (in hours)\r\n            },\r\n            (status, response) => console.log('PubNub Publish:', status, response)\r\n        );\r\n    };\r\n\r\n    private navigateToDashboard = () => {\r\n        this.props.history.push('/');\r\n        this.props.onResetAppState();\r\n    }\r\n\r\n    /**\r\n     * Called by PubNubEventHandler when it receives a PubNub presence event with action 'state-change'.\r\n     * It processes information about players that had already joined the game before this user\r\n     * joined (hereNow result) or about a player that joins the game after this user joined.\r\n     */\r\n    private addPlayers = (...newPlayers: PubNubUserState[]) => {\r\n        // Ignore information about players that try to join after the game has already started.\r\n        if (this.state.currentPhase !== GamePhase.waitingToStart) { return; }\r\n        let gameConfig: GameConfig | null = null;\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        newPlayers.forEach(newPlayer => {\r\n            allPlayers.set(newPlayer.playerInfo.id, newPlayer.playerInfo);\r\n            // If we are not the game admin, we obtain the game config from the admin's PubNubUserState.\r\n            if (newPlayer.gameConfig) {\r\n                gameConfig = newPlayer.gameConfig;\r\n            }\r\n        });\r\n        // Only after we received the gameConfig from the admin, we hide the loading screen\r\n        // and render the PhaseWaitingToStart component instead.\r\n        if (gameConfig) {\r\n            this.setState({ allPlayers, gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'startGame'.\r\n     */\r\n    private startGame = () => {\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const roundInputs = createAndFillArray<PlayerInput>(gameConfig.categories.length, { text: '', valid: true });\r\n        this.setState({\r\n            currentPhase: GamePhase.fillOutTextfields,\r\n            currentRoundInputs: roundInputs\r\n        });\r\n    }\r\n\r\n    private updateCurrentRoundInputs = (newCurrentRoundInputs: PlayerInput[]) => {\r\n        this.setState({ currentRoundInputs: newCurrentRoundInputs });\r\n    }\r\n\r\n    private sendRoundFinishedMessage = () => {\r\n        this.setState({ showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.roundFinished });\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'roundFinished'.\r\n     */\r\n    private stopRoundAndSendInputs = () => {\r\n        // Prepare new GameRound object for addPlayerInputForFinishedRound method\r\n        // as well as new currentRoundEvaluation object for evaluation phase.\r\n        const gameRounds: GameRound[] = [...this.state.gameRounds, new Map<string, PlayerInput[]>()];\r\n        const currentRoundEvaluation = createGameRoundEvaluation(\r\n            this.state.allPlayers, (this.state.gameConfig as GameConfig).categories\r\n        );\r\n        this.setState({ currentRoundEvaluation, gameRounds, showLoadingScreen: true });\r\n        // Send this player's text inputs of current round to other players (and herself/himself).\r\n        const message = new PubNubCurrentRoundInputsMessage(markEmptyPlayerInputsAsInvalid(this.state.currentRoundInputs));\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'currentRoundInputs'.\r\n     */\r\n    private addPlayerInputForFinishedRound = (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => {\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        gameRounds[this.state.currentRound - 1].set(playerId, playerInputsForFinishedRound);\r\n        // Did we collect the inputs from all players?\r\n        if (gameRounds[this.state.currentRound - 1].size === this.state.allPlayers.size) {\r\n            // If yes, then start the evaluation of the finished round.\r\n            this.setState({ currentPhase: GamePhase.evaluateRound, gameRounds, showLoadingScreen: false });\r\n        } else {\r\n            // If no, then only store the updated gameRounds object in state.\r\n            this.setState({ gameRounds });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate a player input evaluation via a\r\n     * PubNub message. This message is then processed by all players in the game (including the user who sent it).\r\n     */\r\n    private updateEvaluationOfPlayerInput = (newEvaluation: EvaluationOfPlayerInput) => {\r\n        const message = new PubNubEvaluationOfPlayerInputMessage(newEvaluation);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'evaluationOfPlayerInput'.\r\n     */\r\n    private processEvaluationOfPlayerInput = (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => {\r\n        const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n        const playerInputEvaluations = currentRoundEvaluation.get(newEvaluation.evaluatedPlayerId);\r\n        if (playerInputEvaluations) {\r\n            playerInputEvaluations[newEvaluation.categoryIndex].set(evaluatingPlayerId, newEvaluation.markedAsValid);\r\n        }\r\n        this.setState({ currentRoundEvaluation });\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate to all players\r\n     * that the user of this instance of the game has finished evaluating the current round.\r\n     */\r\n    private sendEvaluationFinishedMessage = () => {\r\n        this.setState({ showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.evaluationFinished });\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'evaluationFinished'.\r\n     */\r\n    private countPlayerAsEvaluationFinished = (evaluatingPlayerId: string) => {\r\n        const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n        playersThatFinishedEvaluation.set(evaluatingPlayerId, true);\r\n        if (playersThatFinishedEvaluation.size === this.state.allPlayers.size) {\r\n            this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n        } else {\r\n            this.setState({ playersThatFinishedEvaluation });\r\n        }\r\n    }\r\n\r\n    private processEvaluationsAndStartNextRoundOrFinishGame = () => {\r\n        const { allPlayers, currentRound, currentRoundEvaluation, gameRounds } = this.state;\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const newGameRounds = cloneDeep(gameRounds);\r\n        newGameRounds[currentRound - 1] = processPlayerInputEvaluations(\r\n            gameRounds[currentRound - 1], currentRoundEvaluation, getMinNumberOfMarkedAsInvalid(allPlayers.size)\r\n        );\r\n        if (currentRound === gameConfig.numberOfRounds) {\r\n            // Finish game and show results.\r\n            this.props.onSetDataOfFinishedGame({ allPlayers, gameConfig, gameRounds: newGameRounds });\r\n            this.props.history.push('/results');\r\n        } else {\r\n            // Start next round of the game.\r\n            this.setState({\r\n                currentPhase: GamePhase.fillOutTextfields,\r\n                currentRoundEvaluation: createGameRoundEvaluation(allPlayers, gameConfig.categories),\r\n                currentRoundInputs: createAndFillArray<PlayerInput>(gameConfig.categories.length, { text: '', valid: true }),\r\n                currentRound: currentRound + 1,\r\n                gameRounds: newGameRounds,\r\n                playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n                showLoadingScreen: false\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): PlayGamePropsFromStore => {\r\n    return {\r\n        gameConfig: state.gameConfig,\r\n        gameId: state.gameId,\r\n        playerInfo: state.playerInfo as PlayerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): PlayGameDispatchProps => {\r\n    return {\r\n        onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => {\r\n            dispatch(setDataOfFinishedGame(payload))\r\n        },\r\n        onResetAppState: () => {\r\n            dispatch(resetAppState())\r\n        }\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);\r\n","import { APP_THEME_ID } from './../constants/themes.constant';\r\nconst APP_THEME_LOCAL_STORAGE_KEY = 'SLF-APP-THEME';\r\n\r\nexport const getAppThemeIdFromLocalStorage = (): string | null => {\r\n    return localStorage.getItem(APP_THEME_LOCAL_STORAGE_KEY);\r\n};\r\n\r\nexport const setAppThemeIdInLocalStorage = (appTheme: APP_THEME_ID) => {\r\n    return localStorage.setItem(APP_THEME_LOCAL_STORAGE_KEY, appTheme);\r\n};\r\n","import './App.css';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport Header from './components/Header/Header';\r\nimport { AppTheme, AppThemes } from './constants/themes.constant';\r\nimport { Dashboard } from './containers/Dashboard/Dashboard';\r\nimport GameResults from './containers/GameResults/GameResults';\r\nimport JoinGame from './containers/JoinGame/JoinGame';\r\nimport NewGame from './containers/NewGame/NewGame';\r\nimport PlayGame from './containers/PlayGame/PlayGame';\r\nimport { getAppThemeIdFromLocalStorage, setAppThemeIdInLocalStorage } from './utils/local-storage.utils';\r\n\r\ninterface AppState {\r\n    activeTheme: AppTheme;\r\n}\r\n\r\nclass App extends Component<any, AppState> {\r\n    public state: AppState = {\r\n        activeTheme: AppThemes[0],\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ThemeProvider theme={this.state.activeTheme.muiTheme}>\r\n                <div className=\"app-container\">\r\n                    <Header\r\n                        theme={this.state.activeTheme}\r\n                        switchTheme={this.switchThemeHandler}\r\n                    />\r\n                    <main className={'app-main ' + this.state.activeTheme.className}>\r\n                        <HashRouter basename={process.env.PUBLIC_URL}>\r\n                            <Switch>\r\n                                <Route path=\"/\" exact component={Dashboard} />\r\n                                <Route path=\"/newgame\" exact component={NewGame} />\r\n                                <Route path=\"/joingame\" exact component={JoinGame} />\r\n                                <Route path=\"/play\" exact component={PlayGame} />\r\n                                <Route path=\"/results\" exact component={GameResults} />\r\n                            </Switch>\r\n                        </HashRouter>\r\n                    </main>\r\n                </div>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const appThemeId = getAppThemeIdFromLocalStorage();\r\n        if (appThemeId) {\r\n            const appTheme = AppThemes.find(theme => theme.id === appThemeId);\r\n            if (appTheme) {\r\n                this.setState({ activeTheme: appTheme });\r\n            }\r\n        }\r\n    }\r\n\r\n    private switchThemeHandler = (newTheme: AppTheme) => {\r\n        this.setState({ activeTheme: newTheme });\r\n        setAppThemeIdInLocalStorage(newTheme.id);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GameConfig, GameRound } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport {\r\n    AppAction,\r\n    RESET_APP_STATE,\r\n    SET_DATA_FOR_NEW_GAME,\r\n    SET_DATA_OF_FINISHED_GAME,\r\n    SetDataForNewGameAction,\r\n    SetDataOfFinishedGameAction,\r\n} from './app.actions';\r\n\r\nexport interface AppState {\r\n    allPlayers: Map<string, PlayerInfo> | null;\r\n    gameId: string | null;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[] | null;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\n\r\nconst initialState: AppState = {\r\n    allPlayers: null,\r\n    gameId: null,\r\n    gameConfig: null,\r\n    gameRounds: null,\r\n    playerInfo: null\r\n};\r\n\r\nexport const appReducer = (state: AppState = initialState, action: AppAction): AppState => {\r\n    switch (action.type) {\r\n        case SET_DATA_FOR_NEW_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataForNewGameAction).payload\r\n            };\r\n        case SET_DATA_OF_FINISHED_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataOfFinishedGameAction).payload,\r\n                // Set gameId to null to prevent player from manually opening PlayGame route.\r\n                gameId: null\r\n            };\r\n        case RESET_APP_STATE:\r\n            return { ...initialState };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { appReducer } from './store/app.reducer';\r\nimport { Provider } from 'react-redux';\r\n\r\nexport const appStore = createStore(appReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={appStore}><App /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}