{"version":3,"sources":["utils/game.utils.ts","components/ToDashboardButton/ToDashboardButton.tsx","components/ToDashboardButton/ToDashboardButton.module.css","components/RejoinRunningGameHint/RejoinRunningGameHint.tsx","components/RejoinRunningGameHint/RejoinRunningGameHint.module.css","components/AddCustomCategory/AddCustomCategory.module.css","components/NewGameOptionsPanel/NewGameOptionsPanel.module.css","containers/NewGame/NewGame.module.css","components/ChipsArray/ChipsArray.tsx","components/AddCustomCategory/AddCustomCategory.tsx","models/game.interface.ts","containers/NewGame/NewGame.tsx","components/NewGameOptionsPanel/NewGameOptionsPanel.tsx"],"names":["getRandomnLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToRandomnlySelectFrom","i","randomnLetter","randomnItem","push","filter","letter","getPlayersInAlphabeticalOrder","players","Array","from","map","data","sort","a","b","name","toLowerCase","getEmptyRoundInputs","numberOfInputs","createAndFillArray","points","STANDARD_POINTS","star","text","valid","markEmptyPlayerInputsAsInvalid","playerInputs","input","trim","createGameRoundEvaluation","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","_","evaluationForOneCategory","evaluatingPlayer","set","id","calculatePointsForRound","scoringOptions","round","checkForDuplicates","onlyPlayerWithValidAnswer","playerId","keys","next","value","playerInputsOfPlayer1","get","categoryIndex","calculatePointsForCategory","isOnlyPlayerWithValidAnswer","ONLY_ANSWER_POINTS","isDuplicateOfOtherPlayersInput","SAME_WORD_POINTS","otherPlayersIds","isOnlyPlayer","playerInputText","replace","some","otherPlayersInput","getMinNumberOfInvalids","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","getRejectingPlayers","rejectingPlayers","playerInfo","applyValidFlagAndStarFlagToPoints","creativeAnswersExtraPoints","EXTRA_POINTS","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","playerName","reduce","total","Object","createHallOfFameData","gameConfig","hallOfFameData","playerInput","category","ToDashboardButton","props","className","styles","button_wrapper","type","color","variant","size","startIcon","onClick","onReturnToDashboard","module","exports","RejoinRunningGameHintContext","RejoinRunningGameHint","condition","context","hintText","hint_text","component","RouterLink","to","link","ChipType","CustomCategoryDialog","onClose","open","useState","categoryInput","setCategoryInput","validateInputs","setValidateInputs","handleClose","Dialog","onSubmit","event","preventDefault","stopPropagation","trimmedCategoryInput","dialog_min_width","noValidate","autoComplete","DialogContent","DialogContentText","TextField","autoFocus","margin","fullWidth","required","error","onChange","target","DialogActions","Button","AddCustomCategory","setOpen","Fragment","Tooltip","title","placement","IconButton","less_padding","aria-label","newCategory","addCustomCategory","GameOption","useStyles","makeStyles","theme","createStyles","root","display","justifyContent","flexWrap","padding","spacing","ChipsArray","classes","chipsArray","chip","index","Chip","key","chipType","undefined","icon","label","removeChip","children","CategoryArray","NewGameOptionsPanel","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","FormGroup","FormControlLabel","control","Checkbox","checked","handleGameOptionChange","GAME_OPTION_LABEL","Divider","FormControl","FormLabel","options_label","RadioGroup","radio_group","useCountdown","UseCountdownRadioButton","countdown","player","handleUseCountdownChange","Radio","Input","durationOfCountdown","countdown_input","disabled","inputProps","MIN_DURATION_OF_COUNTDOWN","handleCountdownInputChange","row","STANDARD_ALPHABET","letterIndex","lettersToExclude","includes","handleLetterToExcludeChange","NewGame","state","availableCategories","AVAILABLE_CATEGORIES","DEFAULT_DURATION_OF_COUNTDOWN","isSnackbarOpen","STANDARD_EXCLUDED_LETTERS","nameInput","numberOfRoundsInput","DEFAULT_NUMBER_OF_ROUNDS","selectedCategories","STANDARD_CATEGORIES","snackBarMessage","handleNameInputChange","setState","handleNumberOfRoundsInputChange","MIN_NUMBER_OF_ROUNDS","MAX_NUMBER_OF_ROUNDS","newLettersToExclude","l","updateCategoryArrays","chipToRemove","removeFromArray","newSelectedCategories","newAvailableCategories","selected","handleSubmit","isReadyToStartGame","startNewGame","MIN_NUMBER_OF_CATEGORIES","showSnackBar","message","handleSnackBarClose","idCreationTimestamp","playerIdCreationTimestamp","gameId","uuidv4","removeAllDataOfRunningGameFromLocalStorage","setPlayerInfoInLocalStorage","setRunningGameInfoInLocalStorage","convertDateToUnixTimestamp","Date","isPlayerAdmin","onSetGameData","letters","xor","numberOfRounds","isRejoiningGame","isAdmin","history","returnToDashboard","numberOfRoundsInputLabel","newGameForm","this","available","newgame","SectionHeader","showDivider","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","prevProps","Component","connect","dispatch","payload","setDataForNewGame"],"mappings":"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","file":"static/js/8.4af4f4cc.chunk.js","sourcesContent":["import { some } from 'lodash';\r\nimport randomnItem from 'random-item';\r\nimport { ONLY_ANSWER_POINTS, SAME_WORD_POINTS, STANDARD_POINTS } from '../constants/game.constant';\r\nimport { Collection } from '../models/collection.interface';\r\nimport { GameConfigScoringOptions, PlayerInput, HallOfFameEntry } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { EXTRA_POINTS } from './../constants/game.constant';\r\nimport { GameResultForPlayer, GameRound, GameRoundEvaluation, PlayerInputEvaluation, GameConfig } from './../models/game.interface';\r\nimport { createAndFillArray } from './general.utils';\r\n\r\n/**\r\n* Returns an array of unique letters. The number of letters is defined by the parameter numberOfLetters.\r\n* If the second argument is not provided, then the standard alphabet (excluding Q, X and Y) is used.\r\n*/\r\nexport const getRandomnLetters = (numberOfLetters: number, possibleLetters: string[]): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToRandomnlySelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToRandomnlySelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToRandomnlySelectFrom = lettersToRandomnlySelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\nexport const getPlayersInAlphabeticalOrder = (players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const playerInfoArray = Array.from(players).map(data => data[1]);\r\n    return playerInfoArray.sort((a, b) => {\r\n        if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\r\n        if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\r\n        return 0;\r\n    });\r\n};\r\n\r\n/**\r\n * Returns an array of PlayerInput objects with empty strings and default settings (isMarkedCreative=false, valid=true, standard points).\r\n */\r\nexport const getEmptyRoundInputs = (numberOfInputs: number): PlayerInput[] => {\r\n    return createAndFillArray<PlayerInput>(numberOfInputs, { points: STANDARD_POINTS, star: false, text: '', valid: true });\r\n};\r\n\r\n/**\r\n* Checks each PlayerInput object whether it contains text.\r\n* If text string is empty, valid is set to false, otherwise to true.\r\n* The text is also trimmed in order to support correct scoring (finding duplicates).\r\n*/\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, text: input.text.trim(), valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(_ => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs according to the active scoring options.\r\n */\r\nexport const calculatePointsForRound = (scoringOptions: GameConfigScoringOptions, round: GameRound) => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    const playerId = round.keys().next().value;\r\n    const playerInputsOfPlayer1 = round.get(playerId) as PlayerInput[];\r\n    // Loop through all categories.\r\n    for (let categoryIndex = 0; categoryIndex < playerInputsOfPlayer1.length; categoryIndex++) {\r\n        calculatePointsForCategory(scoringOptions, round, categoryIndex);\r\n    }\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs for one category according to the active scoring options.\r\n */\r\nexport const calculatePointsForCategory = (scoringOptions: GameConfigScoringOptions, round: GameRound, categoryIndex: number) => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    Array.from(round.keys()).forEach(playerId => {\r\n        const playerInputs = round.get(playerId) as PlayerInput[];\r\n        // Only check valid inputs.\r\n        if (playerInputs[categoryIndex].valid) {\r\n            if (scoringOptions.onlyPlayerWithValidAnswer && isOnlyPlayerWithValidAnswer(playerId, round, categoryIndex)) {\r\n                playerInputs[categoryIndex].points = ONLY_ANSWER_POINTS;\r\n            } else {\r\n                if (scoringOptions.checkForDuplicates && isDuplicateOfOtherPlayersInput(playerId, round, categoryIndex)) {\r\n                    playerInputs[categoryIndex].points = SAME_WORD_POINTS;\r\n                } else {\r\n                    playerInputs[categoryIndex].points = STANDARD_POINTS;\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport const isOnlyPlayerWithValidAnswer = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    let isOnlyPlayer = true;\r\n    otherPlayersIds.forEach(id => isOnlyPlayer = isOnlyPlayer && !(round.get(id) as PlayerInput[])[categoryIndex].valid);\r\n    return isOnlyPlayer;\r\n};\r\n\r\n/**\r\n * Returns true if a duplicate (removes all non-alphanumeric characters for comparison) for playerId's input was found.\r\n */\r\nexport const isDuplicateOfOtherPlayersInput = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    const playerInputText = (round.get(playerId) as PlayerInput[])[categoryIndex].text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    return some(otherPlayersIds, id => {\r\n        const otherPlayersInput = (round.get(id) as PlayerInput[])[categoryIndex];\r\n        return otherPlayersInput.valid && playerInputText === otherPlayersInput.text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    });\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfInvalids = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\n/**\r\n * Returns the players that marked the input as invalid in alphabetical order. Parameters:\r\n * - evaluations: Evaluations of all players for one player's input for one category.\r\n * - players: All players taking part in the running game of \"Stadt-Land-Fluss\".\r\n */\r\nexport const getRejectingPlayers = (evaluations: PlayerInputEvaluation, players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const rejectingPlayers = new Map<string, PlayerInfo>();\r\n    evaluations.forEach((markedAsValid, playerId) => {\r\n        if (!markedAsValid) {\r\n            const playerInfo = players.get(playerId);\r\n            if (playerInfo) {\r\n                rejectingPlayers.set(playerId, playerInfo);\r\n            }\r\n        }\r\n    });\r\n    return getPlayersInAlphabeticalOrder(rejectingPlayers);\r\n};\r\n\r\n/**\r\n * Adds extra points for \"very creative answers\" if scoring option is active\r\n * and sets invalid answer's points to zero.\r\n */\r\nexport const applyValidFlagAndStarFlagToPoints = (scoringOptions: GameConfigScoringOptions, round: GameRound) => {\r\n    round.forEach(playerInputs => {\r\n        playerInputs.forEach(input => {\r\n            if (!input.valid) {\r\n                input.points = 0;\r\n            } else if (scoringOptions.creativeAnswersExtraPoints && input.star) {\r\n                input.points = input.points + EXTRA_POINTS;\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: Collection<GameResultForPlayer> = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => total + input.points, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n};\r\n\r\n/**\r\n * Creates a list of entries for the \"Hall of Fame\", the list of answers marked as \"very creative\".\r\n */\r\nexport const createHallOfFameData = (allPlayers: Map<string, PlayerInfo>, gameConfig: GameConfig, gameRounds: GameRound[]): HallOfFameEntry[] => {\r\n    const hallOfFameData: HallOfFameEntry[] = [];\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const playerInfo = allPlayers.get(playerId) as PlayerInfo;\r\n            playerInputs.forEach((playerInput, categoryIndex) => {\r\n                if (playerInput.valid && playerInput.star) {\r\n                    hallOfFameData.push({\r\n                        category: gameConfig.categories[categoryIndex],\r\n                        playerName: playerInfo.name,\r\n                        text: playerInput.text\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n    return hallOfFameData;\r\n};\r\n","import { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\nimport styles from './ToDashboardButton.module.css';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton: React.FunctionComponent<ToDashboardButtonProps> = props => {\r\n    return (\r\n        <div className={styles.button_wrapper}>\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDashboardButton;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"ToDashboardButton_button_wrapper__1EtAB\"};","import { Link } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport styles from './RejoinRunningGameHint.module.css';\r\n\r\nexport enum RejoinRunningGameHintContext {\r\n    newgame = 'newgame',\r\n    joingame = 'joingame'\r\n};\r\n\r\ninterface RejoinRunningGameHintProps {\r\n    context: RejoinRunningGameHintContext;\r\n}\r\nexport const RejoinRunningGameHint: React.FunctionComponent<RejoinRunningGameHintProps> = props => {\r\n    const condition = props.context === 'newgame' ? 'ein neues Spiel erstellst' : 'einem anderen Spiel beitrittst';\r\n    const hintText = `Du nimmst bereits an einem laufenden Spiel teil. Wenn du ${condition},\r\n    kannst du nicht mehr in das alte Spiel zurückkehren!`;\r\n\r\n    return (\r\n        <div className=\"material-card-style\">\r\n            <p className={styles.hint_text}>\r\n                <span className=\"rejoin-running-game-hint-highlighted\">Achtung: </span>\r\n                {hintText}\r\n            </p>\r\n            <Link component={RouterLink} to=\"/play\" className={styles.link}>⇒ Zurück ins laufende Spiel</Link>\r\n        </div>\r\n    );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hint_text\":\"RejoinRunningGameHint_hint_text__24Gb_\",\"link\":\"RejoinRunningGameHint_link__2heEh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"less_padding\":\"AddCustomCategory_less_padding__t9AWk\",\"dialog_min_width\":\"AddCustomCategory_dialog_min_width__3OgRe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options_label\":\"NewGameOptionsPanel_options_label__21M5o\",\"radio_group\":\"NewGameOptionsPanel_radio_group__1oZ38\",\"countdown_input\":\"NewGameOptionsPanel_countdown_input__kNFVz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options_label\":\"NewGame_options_label__1i8NK\"};","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport React from 'react';\r\n\r\nexport enum ChipType {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        }\r\n    }),\r\n);\r\n\r\ninterface ChipsArrayProps {\r\n    chipsArray: string[];\r\n    chipType: ChipType;\r\n    removeChip: (chip: string) => any;\r\n}\r\n\r\nconst ChipsArray: React.FunctionComponent<ChipsArrayProps> = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.chipsArray.map((chip, index) => (\r\n                <Chip\r\n                    key={`chip-to-${props.chipType}-${index}`}\r\n                    color={props.chipType === 'selected' ? 'primary' : undefined}\r\n                    icon={props.chipType === 'selected' ? <DoneIcon className=\"chip-icon-no-bg\" /> : <ChevronRightIcon />}\r\n                    label={chip}\r\n                    className=\"slf-chip-array-item\"\r\n                    onClick={() => props.removeChip(chip)}\r\n                />\r\n            ))}\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChipsArray;\r\n","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    IconButton,\r\n    TextField,\r\n    Tooltip,\r\n} from '@material-ui/core';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport React, { FormEvent, useState } from 'react';\r\n\r\nimport styles from './AddCustomCategory.module.css';\r\n\r\nexport interface CustomCategoryDialogProps {\r\n    open: boolean;\r\n    onClose: (newCategory: string | null) => void;\r\n}\r\nconst CustomCategoryDialog: React.FunctionComponent<CustomCategoryDialogProps> = props => {\r\n    const { onClose, open } = props;\r\n    const [categoryInput, setCategoryInput] = useState('');\r\n    const [validateInputs, setValidateInputs] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        onClose(null);\r\n    };\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const trimmedCategoryInput = categoryInput.trim();\r\n        if (trimmedCategoryInput !== '') {\r\n            setCategoryInput('');\r\n            setValidateInputs(false);\r\n            onClose(trimmedCategoryInput);\r\n        } else {\r\n            setCategoryInput('');\r\n            setValidateInputs(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <form onSubmit={handleSubmit} className={styles.dialog_min_width} noValidate autoComplete=\"off\">\r\n                <DialogContent>\r\n                    <DialogContentText>Kategorie hinzufügen</DialogContentText>\r\n                    <TextField\r\n                        id=\"new-category-input\"\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        required\r\n                        value={categoryInput}\r\n                        error={validateInputs && !categoryInput}\r\n                        onChange={event => setCategoryInput(event.target.value)}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={handleClose}\r\n                    >Abbrechen</Button>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                    >Hinzufügen</Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\ninterface AddCustomCategoryProps {\r\n    addCustomCategory: (newCategory: string) => any;\r\n}\r\nconst AddCustomCategory: React.FunctionComponent<AddCustomCategoryProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = (newCategory: string | null) => {\r\n        setOpen(false);\r\n        if (newCategory) {\r\n            props.addCustomCategory(newCategory);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Tooltip\r\n                title=\"Kategorie hinzufügen\"\r\n                placement=\"right\"\r\n            >\r\n                <IconButton\r\n                    className={styles.less_padding}\r\n                    aria-label=\"Kategorie hinzufügen\"\r\n                    onClick={() => setOpen(true)}\r\n                >\r\n                    <AddCircleOutlineIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <CustomCategoryDialog open={open} onClose={newCategory => handleClose(newCategory)} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AddCustomCategory;\r\n","export enum GameOption {\r\n    checkForDuplicates = 'checkForDuplicates',\r\n    creativeAnswersExtraPoints = 'creativeAnswersExtraPoints',\r\n    onlyPlayerWithValidAnswer = 'onlyPlayerWithValidAnswer',\r\n}\r\n\r\nexport interface GameConfigScoringOptions {\r\n    [GameOption.checkForDuplicates]: boolean;\r\n    [GameOption.creativeAnswersExtraPoints]: boolean;\r\n    [GameOption.onlyPlayerWithValidAnswer]: boolean;\r\n}\r\n\r\nexport interface GameConfig {\r\n    categories: string[];\r\n    durationOfCountdown: number;\r\n    letters: string[];\r\n    numberOfRounds: number;\r\n    scoringOptions: GameConfigScoringOptions;\r\n    /**\r\n     * Whether to use a countdown that determines how much time each player has\r\n     * to fill out the text fields in one round of the game. If useCountdown is\r\n     * set to false, then the first player to click \"Finish round\" ends the round.\r\n     */\r\n    useCountdown: boolean;\r\n}\r\n\r\nexport interface StoredRunningGameInfo {\r\n    /** Version 4 UUID */\r\n    gameId: string;\r\n    /** UNIX timestamp */\r\n    idCreationTimestamp: number;\r\n    isPlayerAdmin: boolean;\r\n}\r\n\r\n/**\r\n * Represents a player's input for one category in one round of the game.\r\n */\r\nexport interface PlayerInput {\r\n    /** The points the player gains with this input if it is valid */\r\n    points: number;\r\n    /** Whether input is marked as very creative, funny etc answer */\r\n    star: boolean;\r\n    /** The text input by the player */\r\n    text: string;\r\n    /** Is the input valid or was it rejected by the other players */\r\n    valid: boolean;\r\n}\r\n\r\n/**\r\n * Holds the inputs for all players (key = player's id) for one round of the game.\r\n */\r\nexport type GameRound = Map<string, PlayerInput[]>;\r\n\r\n/**\r\n * Represents the evaluation of all players for one player's input for one category in one round of the game.\r\n * The players' ids are used as keys for the map. The value represents whether the input is valid.\r\n */\r\nexport type PlayerInputEvaluation = Map<string, boolean>;\r\n\r\n/**\r\n * Represents the evaluation of all players' inputs in one round of the game. The players' ids\r\n * are used as keys for the map. The array holds one PlayerInputEvaluation object for each category.\r\n */\r\nexport type GameRoundEvaluation = Map<string, PlayerInputEvaluation[]>;\r\n\r\n/**\r\n * Represents the user's evaluation of a player's input for a category.\r\n */\r\nexport interface EvaluationOfPlayerInput {\r\n    categoryIndex: number;\r\n    evaluatedPlayerId: string;\r\n    markedAsValid: boolean;\r\n}\r\n\r\n/**\r\n * Represents whether a player's input for a category is deemed a very creative answer.\r\n */\r\nexport interface IsPlayerInputVeryCreativeStatus {\r\n    categoryIndex: number;\r\n    evaluatedPlayerId: string;\r\n    markedAsCreative: boolean;\r\n}\r\n\r\nexport interface GameResultForPlayer {\r\n    playerName: string;\r\n    points: number;\r\n}\r\n\r\n/**\r\n * Player inputs that are marked as \"very creative\" by other players are\r\n * displayed in a \"Hall of Fame\" at the end of the game.\r\n */\r\nexport interface HallOfFameEntry {\r\n    category: string;\r\n    playerName: string;\r\n    text: string;\r\n}\r\n","import { Button, Snackbar, TextField } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { xor } from 'lodash';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport AddCustomCategory from '../../components/AddCustomCategory/AddCustomCategory';\r\nimport ChipsArray, { ChipType } from '../../components/ChipsArray/ChipsArray';\r\nimport NewGameOptionsPanel from '../../components/NewGameOptionsPanel/NewGameOptionsPanel';\r\nimport {\r\n    RejoinRunningGameHint,\r\n    RejoinRunningGameHintContext,\r\n} from '../../components/RejoinRunningGameHint/RejoinRunningGameHint';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport {\r\n    AVAILABLE_CATEGORIES,\r\n    DEFAULT_DURATION_OF_COUNTDOWN,\r\n    DEFAULT_NUMBER_OF_ROUNDS,\r\n    MAX_NUMBER_OF_ROUNDS,\r\n    MIN_NUMBER_OF_CATEGORIES,\r\n    MIN_NUMBER_OF_ROUNDS,\r\n    STANDARD_ALPHABET,\r\n    STANDARD_CATEGORIES,\r\n    STANDARD_EXCLUDED_LETTERS,\r\n    UseCountdownRadioButton,\r\n} from '../../constants/game.constant';\r\nimport { GameConfigScoringOptions } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\nimport { convertDateToUnixTimestamp } from '../../utils/general.utils';\r\nimport {\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setPlayerInfoInLocalStorage,\r\n    setRunningGameInfoInLocalStorage,\r\n} from '../../utils/local-storage.utils';\r\nimport styles from './NewGame.module.css';\r\n\r\nenum CategoryArray {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\ninterface NewGamePropsFromStore {\r\n    gameId: string | null;\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\ninterface NewGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface NewGameProps extends NewGamePropsFromStore, NewGameDispatchProps, RouteComponentProps { }\r\ninterface NewGameState {\r\n    availableCategories: string[];\r\n    durationOfCountdown: number;\r\n    isSnackbarOpen: boolean;\r\n    lettersToExclude: string[];\r\n    nameInput: string;\r\n    numberOfRoundsInput: number;\r\n    scoringOptions: GameConfigScoringOptions;\r\n    selectedCategories: string[];\r\n    snackBarMessage: string;\r\n    useCountdown: boolean;\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass NewGame extends Component<NewGameProps, NewGameState> {\r\n    public state: NewGameState = {\r\n        availableCategories: AVAILABLE_CATEGORIES,\r\n        durationOfCountdown: DEFAULT_DURATION_OF_COUNTDOWN,\r\n        isSnackbarOpen: false,\r\n        lettersToExclude: [...STANDARD_EXCLUDED_LETTERS],\r\n        nameInput: this.props.playerInfo ? this.props.playerInfo.name : '',\r\n        numberOfRoundsInput: DEFAULT_NUMBER_OF_ROUNDS,\r\n        selectedCategories: STANDARD_CATEGORIES,\r\n        scoringOptions: {\r\n            checkForDuplicates: true,\r\n            creativeAnswersExtraPoints: false,\r\n            onlyPlayerWithValidAnswer: true,\r\n        },\r\n        snackBarMessage: '',\r\n        useCountdown: false,\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const numberOfRoundsInputLabel = `Anzahl Runden (${MIN_NUMBER_OF_ROUNDS}-${MAX_NUMBER_OF_ROUNDS})`;\r\n        const newGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername (max. 20 Zeichen)\"\r\n                    value={this.state.nameInput}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    autoFocus\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                    inputProps={{ 'maxLength': '20' }}\r\n                    onChange={this.handleNameInputChange}\r\n                />\r\n                <TextField\r\n                    name=\"numberOfRoundsInput\"\r\n                    label={numberOfRoundsInputLabel}\r\n                    type=\"number\"\r\n                    value={this.state.numberOfRoundsInput}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    inputProps={{ 'min': MIN_NUMBER_OF_ROUNDS, 'max': MAX_NUMBER_OF_ROUNDS }}\r\n                    onChange={this.handleNumberOfRoundsInputChange}\r\n                />\r\n                <NewGameOptionsPanel\r\n                    durationOfCountdown={this.state.durationOfCountdown}\r\n                    lettersToExclude={this.state.lettersToExclude}\r\n                    scoringOptions={this.state.scoringOptions}\r\n                    useCountdown={this.state.useCountdown}\r\n                    handleCountdownInputChange={this.handleCountdownInputChange}\r\n                    handleGameOptionChange={this.handleGameOptionChange}\r\n                    handleLetterToExcludeChange={this.handleLetterToExcludeChange}\r\n                    handleUseCountdownChange={this.handleUseCountdownChange}\r\n                />\r\n                <p className={styles.options_label}>Ausgewählte Kategorien (mind. {MIN_NUMBER_OF_CATEGORIES}):</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.selectedCategories}\r\n                    chipType={ChipType.selected}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.selected)}\r\n                />\r\n                <p className={styles.options_label}>Verfügbare Kategorien:</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.availableCategories}\r\n                    chipType={ChipType.available}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.available)}\r\n                >\r\n                    <AddCustomCategory addCustomCategory={this.addCustomCategory} />\r\n                </ChipsArray>\r\n                <div className=\"button-wrapper add-margin-top\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<AddCircleIcon />}\r\n                    >Spiel erstellen</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                {this.props.gameId ? <RejoinRunningGameHint context={RejoinRunningGameHintContext.newgame} /> : null}\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Neues Spiel\" />\r\n                    {newGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n                    open={this.state.isSnackbarOpen}\r\n                    autoHideDuration={3000}\r\n                    message={this.state.snackBarMessage}\r\n                    onClose={this.handleSnackBarClose}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: NewGameProps) {\r\n        if (this.props.playerInfo && this.props.playerInfo !== prevProps.playerInfo) {\r\n            this.setState({ nameInput: this.props.playerInfo.name });\r\n        }\r\n    }\r\n\r\n    private handleNameInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ nameInput: event.target.value });\r\n    }\r\n\r\n    private handleNumberOfRoundsInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +event.target.value;\r\n        if (value >= MIN_NUMBER_OF_ROUNDS && value <= MAX_NUMBER_OF_ROUNDS) {\r\n            this.setState({ numberOfRoundsInput: value });\r\n        }\r\n    }\r\n\r\n    private handleGameOptionChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            scoringOptions: {\r\n                ...this.state.scoringOptions,\r\n                [event.target.name]: event.target.checked\r\n            }\r\n        });\r\n    }\r\n\r\n    private handleCountdownInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ durationOfCountdown: +event.target.value });\r\n    }\r\n\r\n    private handleLetterToExcludeChange = (event: ChangeEvent<HTMLInputElement>, letter: string) => {\r\n        const { lettersToExclude } = this.state;\r\n        const newLettersToExclude = event.target.checked ? [...lettersToExclude, letter] : lettersToExclude.filter(l => l !== letter);\r\n        this.setState({ lettersToExclude: newLettersToExclude });\r\n    }\r\n\r\n    private handleUseCountdownChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ useCountdown: (event.target as HTMLInputElement).value === UseCountdownRadioButton.countdown });\r\n    };\r\n\r\n    private updateCategoryArrays = (chipToRemove: string, removeFromArray: CategoryArray) => {\r\n        let newSelectedCategories: string[];\r\n        let newAvailableCategories: string[];\r\n        if (removeFromArray === CategoryArray.selected) {\r\n            newSelectedCategories = this.state.selectedCategories.filter(category => category !== chipToRemove);\r\n            newAvailableCategories = [...this.state.availableCategories];\r\n            newAvailableCategories.push(chipToRemove);\r\n        } else {\r\n            newAvailableCategories = this.state.availableCategories.filter(category => category !== chipToRemove);\r\n            newSelectedCategories = [...this.state.selectedCategories];\r\n            newSelectedCategories.push(chipToRemove);\r\n        }\r\n        this.setState({\r\n            availableCategories: newAvailableCategories,\r\n            selectedCategories: newSelectedCategories\r\n        });\r\n    }\r\n\r\n    private addCustomCategory = (newCategory: string) => {\r\n        this.setState({ availableCategories: [...this.state.availableCategories, newCategory] });\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (this.isReadyToStartGame()) {\r\n            this.startNewGame();\r\n        } else {\r\n            this.setState({ nameInput: this.state.nameInput.trim(), validateInputs: true });\r\n        }\r\n    }\r\n\r\n    private isReadyToStartGame = (): boolean => {\r\n        if (this.state.selectedCategories.length < MIN_NUMBER_OF_CATEGORIES) {\r\n            this.showSnackBar(`Du musst mindestens ${MIN_NUMBER_OF_CATEGORIES} Kategorien auswählen!`);\r\n            return false;\r\n        }\r\n        if (STANDARD_ALPHABET.length - this.state.lettersToExclude.length < this.state.numberOfRoundsInput) {\r\n            this.showSnackBar(`Du hast zu viele Buchstaben ausgeschlossen!`);\r\n            return false;\r\n        }\r\n        return !!this.state.nameInput.trim();\r\n    }\r\n\r\n    private showSnackBar = (message: string) => this.setState({ isSnackbarOpen: true, snackBarMessage: message });\r\n    private handleSnackBarClose = () => this.setState({ isSnackbarOpen: false });\r\n\r\n    private startNewGame = () => {\r\n        const playerInfo = this.props.playerInfo as PlayerInfo;\r\n        const idCreationTimestamp = this.props.playerIdCreationTimestamp\r\n        const { durationOfCountdown, nameInput, numberOfRoundsInput, scoringOptions, selectedCategories, useCountdown } = this.state;\r\n        const gameId = uuidv4(); // ⇨ e.g. '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n        removeAllDataOfRunningGameFromLocalStorage();\r\n        setPlayerInfoInLocalStorage({ id: playerInfo.id, idCreationTimestamp, name: nameInput.trim() });\r\n        setRunningGameInfoInLocalStorage({ gameId, idCreationTimestamp: convertDateToUnixTimestamp(new Date()), isPlayerAdmin: true });\r\n        this.props.onSetGameData({\r\n            gameConfig: {\r\n                categories: selectedCategories,\r\n                durationOfCountdown,\r\n                letters: getRandomnLetters(numberOfRoundsInput, xor(STANDARD_ALPHABET, this.state.lettersToExclude)),\r\n                numberOfRounds: numberOfRoundsInput,\r\n                scoringOptions,\r\n                useCountdown\r\n            },\r\n            gameId,\r\n            isRejoiningGame: false,\r\n            playerInfo: {\r\n                id: playerInfo.id,\r\n                isAdmin: true,\r\n                name: nameInput.trim()\r\n            }\r\n        });\r\n        this.props.history.push('/play');\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): NewGamePropsFromStore => {\r\n    return {\r\n        gameId: state.gameId,\r\n        playerIdCreationTimestamp: state.playerIdCreationTimestamp,\r\n        playerInfo: state.playerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): NewGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => dispatch(setDataForNewGame(payload))\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewGame);\r\n","import {\r\n    Checkbox,\r\n    Divider,\r\n    ExpansionPanel,\r\n    ExpansionPanelDetails,\r\n    ExpansionPanelSummary,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Input,\r\n    Radio,\r\n    RadioGroup,\r\n} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport React, { ChangeEvent } from 'react';\r\nimport {\r\n    GAME_OPTION_LABEL,\r\n    MIN_DURATION_OF_COUNTDOWN,\r\n    STANDARD_ALPHABET,\r\n    UseCountdownRadioButton,\r\n} from '../../constants/game.constant';\r\nimport { GameConfigScoringOptions, GameOption } from '../../models/game.interface';\r\nimport styles from './NewGameOptionsPanel.module.css';\r\n\r\ninterface NewGameOptionsPanelProps {\r\n    durationOfCountdown: number;\r\n    lettersToExclude: string[];\r\n    scoringOptions: GameConfigScoringOptions;\r\n    useCountdown: boolean;\r\n    handleCountdownInputChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n    handleGameOptionChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n    handleLetterToExcludeChange: (event: ChangeEvent<HTMLInputElement>, letter: string) => void;\r\n    handleUseCountdownChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst NewGameOptionsPanel: React.FunctionComponent<NewGameOptionsPanelProps> = props => {\r\n    return (\r\n        <ExpansionPanel className=\"new-game-expansion-panel\">\r\n            <ExpansionPanelSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n            >\r\n                Weitere Optionen\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n                <FormGroup className=\"game-options-list\">\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={props.scoringOptions.checkForDuplicates}\r\n                                name={GameOption.checkForDuplicates}\r\n                                color=\"primary\"\r\n                                onChange={props.handleGameOptionChange}\r\n                            />\r\n                        }\r\n                        label={GAME_OPTION_LABEL.checkForDuplicates}\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={props.scoringOptions.onlyPlayerWithValidAnswer}\r\n                                name={GameOption.onlyPlayerWithValidAnswer}\r\n                                color=\"primary\"\r\n                                onChange={props.handleGameOptionChange}\r\n                            />\r\n                        }\r\n                        label={GAME_OPTION_LABEL.onlyPlayerWithValidAnswer}\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={props.scoringOptions.creativeAnswersExtraPoints}\r\n                                name={GameOption.creativeAnswersExtraPoints}\r\n                                color=\"primary\"\r\n                                onChange={props.handleGameOptionChange}\r\n                            />\r\n                        }\r\n                        label={GAME_OPTION_LABEL.creativeAnswersExtraPoints}\r\n                    />\r\n                </FormGroup>\r\n                <Divider />\r\n                <FormControl component=\"fieldset\">\r\n                    <FormLabel\r\n                        component=\"legend\"\r\n                        className={styles.options_label}\r\n                    >Beenden der Runde durch:</FormLabel>\r\n                    <RadioGroup\r\n                        className={styles.radio_group}\r\n                        aria-label=\"Beenden der Runde\"\r\n                        name=\"usecountdown\"\r\n                        value={props.useCountdown ? UseCountdownRadioButton.countdown : UseCountdownRadioButton.player}\r\n                        onChange={props.handleUseCountdownChange}\r\n                    >\r\n                        <FormControlLabel\r\n                            value={UseCountdownRadioButton.player}\r\n                            control={<Radio color=\"primary\" />}\r\n                            label=\"Spieler\"\r\n                        />\r\n                        <FormControlLabel\r\n                            value={UseCountdownRadioButton.countdown}\r\n                            control={<Radio color=\"primary\" />}\r\n                            label=\"Countdown (in Sekunden)\"\r\n                        />\r\n                        <Input\r\n                            type=\"number\"\r\n                            value={props.durationOfCountdown}\r\n                            className={styles.countdown_input}\r\n                            disabled={!props.useCountdown}\r\n                            inputProps={{ 'aria-label': 'Dauer des Countdowns', 'min': MIN_DURATION_OF_COUNTDOWN }}\r\n                            onChange={props.handleCountdownInputChange}\r\n                        />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n                <Divider />\r\n                <p className={styles.options_label}>Folgende Buchstaben ausschließen:</p>\r\n                <FormGroup row className=\"letters-to-exclude\">\r\n                    {STANDARD_ALPHABET.map((letter, letterIndex) => (\r\n                        <FormControlLabel\r\n                            key={`slf-letters-to-exclude-${letterIndex}`}\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={props.lettersToExclude.includes(letter)}\r\n                                    color=\"primary\"\r\n                                    onChange={(event) => props.handleLetterToExcludeChange(event, letter)}\r\n                                />\r\n                            }\r\n                            label={letter}\r\n                        />\r\n                    ))}\r\n                </FormGroup>\r\n            </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n    );\r\n}\r\n\r\nexport default NewGameOptionsPanel;\r\n"],"sourceRoot":""}