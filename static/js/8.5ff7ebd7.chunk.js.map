{"version":3,"sources":["utils/game.utils.ts","components/ToDashboardButton/ToDashboardButton.tsx","components/ToDashboardButton/ToDashboardButton.module.css","components/RejoinRunningGameHint/RejoinRunningGameHint.tsx","components/RejoinRunningGameHint/RejoinRunningGameHint.module.css","components/AddCustomCategory/AddCustomCategory.module.css","components/NewGameOptionsPanel/NewGameOptionsPanel.module.css","components/SelectRandomCategories/SelectRandomCategories.module.css","containers/NewGame/NewGame.module.css","components/ChipsArray/ChipsArray.tsx","components/AddCustomCategory/AddCustomCategory.tsx","models/game.interface.ts","containers/NewGame/NewGame.tsx","components/NewGameOptionsPanel/NewGameOptionsPanel.tsx","components/SelectRandomCategories/SelectRandomCategories.tsx"],"names":["getRandomLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToSelectFrom","i","randomnLetter","randomnItem","push","filter","letter","getRandomCategories","numberOfCategories","categoryPool","preselectedCategories","randomCategories","numberOfRandomSelections","categoriesToSelectFrom","category","includes","randomCategory","c","getPlayersInAlphabeticalOrder","players","Array","from","map","data","sort","a","b","name","toLowerCase","getEmptyRoundInputs","numberOfInputs","createAndFillArray","points","STANDARD_POINTS","star","text","valid","markEmptyPlayerInputsAsInvalid","playerInputs","input","trim","createGameRoundEvaluation","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","evaluationForOneCategory","evaluatingPlayer","set","id","calculatePointsForRound","scoringOptions","round","checkForDuplicates","onlyPlayerWithValidAnswer","playerId","keys","next","value","playerInputsOfPlayer1","get","categoryIndex","calculatePointsForCategory","isOnlyPlayerWithValidAnswer","ONLY_ANSWER_POINTS","isDuplicateOfOtherPlayersInput","SAME_WORD_POINTS","otherPlayersIds","isOnlyPlayer","playerInputText","replace","some","otherPlayersInput","getMinNumberOfInvalids","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","getRejectingPlayers","rejectingPlayers","playerInfo","applyValidFlagAndStarFlagToPoints","creativeAnswersExtraPoints","EXTRA_POINTS","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","playerName","reduce","total","Object","createHallOfFameData","gameConfig","hallOfFameData","playerInput","ToDashboardButton","props","className","styles","button_wrapper","type","color","variant","size","startIcon","onClick","onReturnToDashboard","module","exports","RejoinRunningGameHintContext","RejoinRunningGameHint","condition","context","hintText","hint_text","component","RouterLink","to","link","ChipType","CustomCategoryDialog","onClose","open","useState","categoryInput","setCategoryInput","validateInputs","setValidateInputs","handleClose","Dialog","onSubmit","event","preventDefault","stopPropagation","trimmedCategoryInput","dialog_min_width","noValidate","autoComplete","DialogContent","DialogContentText","TextField","autoFocus","margin","fullWidth","required","error","onChange","target","DialogActions","Button","AddCustomCategory","setOpen","Fragment","IconButton","less_padding","title","aria-label","newCategory","addCustomCategory","GameOption","useStyles","makeStyles","theme","createStyles","root","display","justifyContent","flexWrap","padding","spacing","ChipsArray","classes","chipsArray","chip","index","Chip","chipType","undefined","icon","label","removeChip","children","CategoryArray","NewGameOptionsPanel","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","FormGroup","FormControlLabel","control","Checkbox","checked","handleGameOptionChange","GAME_OPTION_LABEL","Divider","options_label","row","STANDARD_ALPHABET","letterIndex","lettersToExclude","handleLetterToExcludeChange","fontSize","SelectRandomCategoriesDialog","checkboxLabelClasses","isNumberOfCategoriesInputValid","setIsNumberOfCategoriesInputValid","MIN_NUMBER_OF_CATEGORIES","numberOfCategoriesInput","setNumberOfCategoriesInput","retainSelection","setRetainSelection","numberOfRoundsInputLabel","maxNumberOfCategories","dialog_title","inputProps","SelectRandomCategories","random_categories_button","selectCategoriesRandomly","NewGame","state","availableCategories","AVAILABLE_CATEGORIES","durationOfCountdown","DEFAULT_DURATION_OF_COUNTDOWN","isNumberOfRoundsInputValid","isSnackbarOpen","STANDARD_EXCLUDED_LETTERS","nameInput","numberOfRoundsInput","DEFAULT_NUMBER_OF_ROUNDS","selectedCategories","STANDARD_CATEGORIES","snackBarMessage","useCountdown","handleNameInputChange","setState","handleNumberOfRoundsInputChange","MIN_NUMBER_OF_ROUNDS","MAX_NUMBER_OF_ROUNDS","handleCountdownInputChange","newLettersToExclude","l","handleUseCountdownChange","UseCountdownRadioButton","countdown","updateCategoryArrays","chipToRemove","removeFromArray","newSelectedCategories","newAvailableCategories","selected","handleSubmit","isReadyToStartGame","startNewGame","showSnackBar","message","handleSnackBarClose","idCreationTimestamp","playerIdCreationTimestamp","gameId","uuidv4","removeAllDataOfRunningGameFromLocalStorage","setPlayerInfoInLocalStorage","setRunningGameInfoInLocalStorage","convertDateToUnixTimestamp","Date","isPlayerAdmin","onSetGameData","letters","xor","numberOfRounds","isRejoiningGame","isAdmin","history","returnToDashboard","this","newGameForm","FormControl","end_round_fieldset","FormLabel","end_round_legend","RadioGroup","radio_group","player","Radio","countdown_wrapper","Input","countdown_input","disabled","MIN_DURATION_OF_COUNTDOWN","available","newgame","SectionHeader","showDivider","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","prevProps","Component","connect","dispatch","payload","setDataForNewGame"],"mappings":"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","file":"static/js/8.5ff7ebd7.chunk.js","sourcesContent":["import { some } from 'lodash';\r\nimport randomnItem from 'random-item';\r\nimport { ONLY_ANSWER_POINTS, SAME_WORD_POINTS, STANDARD_POINTS } from '../constants/game.constant';\r\nimport { Collection } from '../models/collection.interface';\r\nimport { GameConfigScoringOptions, PlayerInput, HallOfFameEntry } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { EXTRA_POINTS } from './../constants/game.constant';\r\nimport { GameResultForPlayer, GameRound, GameRoundEvaluation, PlayerInputEvaluation, GameConfig } from './../models/game.interface';\r\nimport { createAndFillArray } from './general.utils';\r\n\r\n/**\r\n* Returns an array of randomly selected, unique letters.\r\n*/\r\nexport const getRandomLetters = (numberOfLetters: number, possibleLetters: string[]): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToSelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToSelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToSelectFrom = lettersToSelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\n/**\r\n* Returns an array of randomly selected categories.\r\n*/\r\nexport const getRandomCategories = (\r\n    numberOfCategories: number, categoryPool: string[], preselectedCategories: string[]\r\n): string[] => {\r\n    const randomCategories: string[] = [...preselectedCategories];\r\n    const numberOfRandomSelections = numberOfCategories - preselectedCategories.length;\r\n    let categoriesToSelectFrom = categoryPool.filter(category => !preselectedCategories.includes(category));\r\n    for (let i = 0; i < numberOfRandomSelections; i++) {\r\n        const randomCategory = randomnItem(categoriesToSelectFrom);\r\n        randomCategories.push(randomCategory);\r\n        categoriesToSelectFrom = categoriesToSelectFrom.filter(c => c !== randomCategory);\r\n    }\r\n    return randomCategories;\r\n};\r\n\r\nexport const getPlayersInAlphabeticalOrder = (players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const playerInfoArray = Array.from(players).map(data => data[1]);\r\n    return playerInfoArray.sort((a, b) => {\r\n        if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\r\n        if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\r\n        return 0;\r\n    });\r\n};\r\n\r\n/**\r\n * Returns an array of PlayerInput objects with empty strings and default settings (isMarkedCreative=false, valid=true, standard points).\r\n */\r\nexport const getEmptyRoundInputs = (numberOfInputs: number): PlayerInput[] => {\r\n    return createAndFillArray<PlayerInput>(numberOfInputs, { points: STANDARD_POINTS, star: false, text: '', valid: true });\r\n};\r\n\r\n/**\r\n* Checks each PlayerInput object whether it contains text.\r\n* If text string is empty, valid is set to false, otherwise to true.\r\n* The text is also trimmed in order to support correct scoring (finding duplicates).\r\n*/\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, text: input.text.trim(), valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(() => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs according to the active scoring options.\r\n */\r\nexport const calculatePointsForRound = (scoringOptions: GameConfigScoringOptions, round: GameRound): void => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    const playerId = round.keys().next().value;\r\n    const playerInputsOfPlayer1 = round.get(playerId) as PlayerInput[];\r\n    // Loop through all categories.\r\n    for (let categoryIndex = 0; categoryIndex < playerInputsOfPlayer1.length; categoryIndex++) {\r\n        calculatePointsForCategory(scoringOptions, round, categoryIndex);\r\n    }\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs for one category according to the active scoring options.\r\n */\r\nexport const calculatePointsForCategory = (scoringOptions: GameConfigScoringOptions, round: GameRound, categoryIndex: number): void => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    Array.from(round.keys()).forEach(playerId => {\r\n        const playerInputs = round.get(playerId) as PlayerInput[];\r\n        // Only check valid inputs.\r\n        if (playerInputs[categoryIndex].valid) {\r\n            if (scoringOptions.onlyPlayerWithValidAnswer && isOnlyPlayerWithValidAnswer(playerId, round, categoryIndex)) {\r\n                playerInputs[categoryIndex].points = ONLY_ANSWER_POINTS;\r\n            } else {\r\n                if (scoringOptions.checkForDuplicates && isDuplicateOfOtherPlayersInput(playerId, round, categoryIndex)) {\r\n                    playerInputs[categoryIndex].points = SAME_WORD_POINTS;\r\n                } else {\r\n                    playerInputs[categoryIndex].points = STANDARD_POINTS;\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport const isOnlyPlayerWithValidAnswer = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    let isOnlyPlayer = true;\r\n    otherPlayersIds.forEach(id => isOnlyPlayer = isOnlyPlayer && !(round.get(id) as PlayerInput[])[categoryIndex].valid);\r\n    return isOnlyPlayer;\r\n};\r\n\r\n/**\r\n * Returns true if a duplicate (removes all non-alphanumeric characters for comparison) for playerId's input was found.\r\n */\r\nexport const isDuplicateOfOtherPlayersInput = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    const playerInputText = (round.get(playerId) as PlayerInput[])[categoryIndex].text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    return some(otherPlayersIds, id => {\r\n        const otherPlayersInput = (round.get(id) as PlayerInput[])[categoryIndex];\r\n        return otherPlayersInput.valid && playerInputText === otherPlayersInput.text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    });\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfInvalids = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\n/**\r\n * Returns the players that marked the input as invalid in alphabetical order. Parameters:\r\n * - evaluations: Evaluations of all players for one player's input for one category.\r\n * - players: All players taking part in the running game of \"Stadt-Land-Fluss\".\r\n */\r\nexport const getRejectingPlayers = (evaluations: PlayerInputEvaluation, players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const rejectingPlayers = new Map<string, PlayerInfo>();\r\n    evaluations.forEach((markedAsValid, playerId) => {\r\n        if (!markedAsValid) {\r\n            const playerInfo = players.get(playerId);\r\n            if (playerInfo) {\r\n                rejectingPlayers.set(playerId, playerInfo);\r\n            }\r\n        }\r\n    });\r\n    return getPlayersInAlphabeticalOrder(rejectingPlayers);\r\n};\r\n\r\n/**\r\n * Adds extra points for \"very creative answers\" if scoring option is active\r\n * and sets invalid answer's points to zero.\r\n */\r\nexport const applyValidFlagAndStarFlagToPoints = (scoringOptions: GameConfigScoringOptions, round: GameRound): void => {\r\n    round.forEach(playerInputs => {\r\n        playerInputs.forEach(input => {\r\n            if (!input.valid) {\r\n                input.points = 0;\r\n            } else if (scoringOptions.creativeAnswersExtraPoints && input.star) {\r\n                input.points = input.points + EXTRA_POINTS;\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: Collection<GameResultForPlayer> = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => total + input.points, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n};\r\n\r\n/**\r\n * Creates a list of entries for the \"Hall of Fame\", the list of answers marked as \"very creative\".\r\n */\r\nexport const createHallOfFameData = (allPlayers: Map<string, PlayerInfo>, gameConfig: GameConfig, gameRounds: GameRound[]): HallOfFameEntry[] => {\r\n    const hallOfFameData: HallOfFameEntry[] = [];\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const playerInfo = allPlayers.get(playerId) as PlayerInfo;\r\n            playerInputs.forEach((playerInput, categoryIndex) => {\r\n                if (playerInput.valid && playerInput.star) {\r\n                    hallOfFameData.push({\r\n                        category: gameConfig.categories[categoryIndex],\r\n                        playerName: playerInfo.name,\r\n                        text: playerInput.text\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n    return hallOfFameData;\r\n};\r\n","import { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\nimport styles from './ToDashboardButton.module.css';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton: React.FunctionComponent<ToDashboardButtonProps> = props => {\r\n    return (\r\n        <div className={styles.button_wrapper}>\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDashboardButton;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"ToDashboardButton_button_wrapper__1EtAB\"};","import { Link } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport styles from './RejoinRunningGameHint.module.css';\r\n\r\nexport enum RejoinRunningGameHintContext {\r\n    newgame = 'newgame',\r\n    joingame = 'joingame'\r\n}\r\n\r\ninterface RejoinRunningGameHintProps {\r\n    context: RejoinRunningGameHintContext;\r\n}\r\nexport const RejoinRunningGameHint: React.FunctionComponent<RejoinRunningGameHintProps> = props => {\r\n    const condition = props.context === 'newgame' ? 'ein neues Spiel erstellst' : 'einem anderen Spiel beitrittst';\r\n    const hintText = `Du nimmst bereits an einem laufenden Spiel teil. Wenn du ${condition},\r\n    kannst du nicht mehr in das alte Spiel zurückkehren!`;\r\n\r\n    return (\r\n        <div className=\"material-card-style\">\r\n            <p className={styles.hint_text}>\r\n                <span className=\"rejoin-running-game-hint-highlighted\">Achtung: </span>\r\n                {hintText}\r\n            </p>\r\n            <Link component={RouterLink} to=\"/play\" className={styles.link}>⇒ Zurück ins laufende Spiel</Link>\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hint_text\":\"RejoinRunningGameHint_hint_text__24Gb_\",\"link\":\"RejoinRunningGameHint_link__2heEh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"less_padding\":\"AddCustomCategory_less_padding__t9AWk\",\"dialog_min_width\":\"AddCustomCategory_dialog_min_width__3OgRe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options_label\":\"NewGameOptionsPanel_options_label__21M5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"random_categories_button\":\"SelectRandomCategories_random_categories_button__888IJ\",\"dialog_title\":\"SelectRandomCategories_dialog_title__2q4PR\",\"dialog_min_width\":\"SelectRandomCategories_dialog_min_width__2rUfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options_label\":\"NewGame_options_label__1i8NK\",\"end_round_fieldset\":\"NewGame_end_round_fieldset__3PIEJ\",\"end_round_legend\":\"NewGame_end_round_legend__1Ry_q\",\"radio_group\":\"NewGame_radio_group__1yiCz\",\"countdown_wrapper\":\"NewGame_countdown_wrapper__xLLcN\",\"countdown_input\":\"NewGame_countdown_input__1l49c\"};","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport React from 'react';\r\n\r\nexport enum ChipType {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        }\r\n    }),\r\n);\r\n\r\ninterface ChipsArrayProps {\r\n    chipsArray: string[];\r\n    chipType: ChipType;\r\n    removeChip: (chip: string) => void;\r\n}\r\n\r\nconst ChipsArray: React.FunctionComponent<ChipsArrayProps> = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.chipsArray.map((chip, index) => (\r\n                <Chip\r\n                    key={`chip-to-${props.chipType}-${index}`}\r\n                    color={props.chipType === 'selected' ? 'primary' : undefined}\r\n                    icon={props.chipType === 'selected' ? <DoneIcon className=\"chip-icon-no-bg\" /> : <ChevronRightIcon />}\r\n                    label={chip}\r\n                    className=\"slf-chip-array-item\"\r\n                    onClick={() => props.removeChip(chip)}\r\n                />\r\n            ))}\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChipsArray;\r\n","import { Button, Dialog, DialogActions, DialogContent, DialogContentText, IconButton, TextField } from '@material-ui/core';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport React, { FormEvent, useState } from 'react';\r\n\r\nimport styles from './AddCustomCategory.module.css';\r\n\r\nexport interface CustomCategoryDialogProps {\r\n    open: boolean;\r\n    onClose: (newCategory: string | null) => void;\r\n}\r\nconst CustomCategoryDialog: React.FunctionComponent<CustomCategoryDialogProps> = props => {\r\n    const { onClose, open } = props;\r\n    const [categoryInput, setCategoryInput] = useState('');\r\n    const [validateInputs, setValidateInputs] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        onClose(null);\r\n    };\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const trimmedCategoryInput = categoryInput.trim();\r\n        if (trimmedCategoryInput !== '') {\r\n            setCategoryInput('');\r\n            setValidateInputs(false);\r\n            onClose(trimmedCategoryInput);\r\n        } else {\r\n            setCategoryInput('');\r\n            setValidateInputs(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <form onSubmit={handleSubmit} className={styles.dialog_min_width} noValidate autoComplete=\"off\">\r\n                <DialogContent>\r\n                    <DialogContentText>Kategorie hinzufügen</DialogContentText>\r\n                    <TextField\r\n                        id=\"new-category-input\"\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        required\r\n                        value={categoryInput}\r\n                        error={validateInputs && !categoryInput}\r\n                        onChange={event => setCategoryInput(event.target.value)}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={handleClose}\r\n                    >Abbrechen</Button>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                    >Hinzufügen</Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\ninterface AddCustomCategoryProps {\r\n    addCustomCategory: (newCategory: string) => void;\r\n}\r\nconst AddCustomCategory: React.FunctionComponent<AddCustomCategoryProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = (newCategory: string | null) => {\r\n        setOpen(false);\r\n        if (newCategory) {\r\n            props.addCustomCategory(newCategory);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <IconButton\r\n                className={styles.less_padding}\r\n                title=\"Kategorie hinzufügen\"\r\n                aria-label=\"Kategorie hinzufügen\"\r\n                onClick={() => setOpen(true)}\r\n            >\r\n                <AddCircleOutlineIcon />\r\n            </IconButton>\r\n            <CustomCategoryDialog open={open} onClose={handleClose} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default AddCustomCategory;\r\n","export enum GameOption {\r\n    checkForDuplicates = 'checkForDuplicates',\r\n    creativeAnswersExtraPoints = 'creativeAnswersExtraPoints',\r\n    onlyPlayerWithValidAnswer = 'onlyPlayerWithValidAnswer',\r\n}\r\n\r\nexport interface GameConfigScoringOptions {\r\n    [GameOption.checkForDuplicates]: boolean;\r\n    [GameOption.creativeAnswersExtraPoints]: boolean;\r\n    [GameOption.onlyPlayerWithValidAnswer]: boolean;\r\n}\r\n\r\nexport interface GameConfig {\r\n    categories: string[];\r\n    durationOfCountdown: number;\r\n    letters: string[];\r\n    numberOfRounds: number;\r\n    scoringOptions: GameConfigScoringOptions;\r\n    /**\r\n     * Whether to use a countdown that determines how much time each player has\r\n     * to fill out the text fields in one round of the game. If useCountdown is\r\n     * set to false, then the first player to click \"Finish round\" ends the round.\r\n     */\r\n    useCountdown: boolean;\r\n}\r\n\r\nexport interface StoredRunningGameInfo {\r\n    /** Version 4 UUID */\r\n    gameId: string;\r\n    /** UNIX timestamp */\r\n    idCreationTimestamp: number;\r\n    isPlayerAdmin: boolean;\r\n}\r\n\r\n/**\r\n * Represents a player's input for one category in one round of the game.\r\n */\r\nexport interface PlayerInput {\r\n    /** The points the player gains with this input if it is valid */\r\n    points: number;\r\n    /** Whether input is marked as very creative, funny etc answer */\r\n    star: boolean;\r\n    /** The text input by the player */\r\n    text: string;\r\n    /** Is the input valid or was it rejected by the other players */\r\n    valid: boolean;\r\n}\r\n\r\n/**\r\n * Holds the inputs for all players (key = player's id) for one round of the game.\r\n */\r\nexport type GameRound = Map<string, PlayerInput[]>;\r\n\r\n/**\r\n * Represents the evaluation of all players for one player's input for one category in one round of the game.\r\n * The players' ids are used as keys for the map. The value represents whether the input is valid.\r\n */\r\nexport type PlayerInputEvaluation = Map<string, boolean>;\r\n\r\n/**\r\n * Represents the evaluation of all players' inputs in one round of the game. The players' ids\r\n * are used as keys for the map. The array holds one PlayerInputEvaluation object for each category.\r\n */\r\nexport type GameRoundEvaluation = Map<string, PlayerInputEvaluation[]>;\r\n\r\n/**\r\n * Represents the user's evaluation of a player's input for a category.\r\n */\r\nexport interface EvaluationOfPlayerInput {\r\n    categoryIndex: number;\r\n    evaluatedPlayerId: string;\r\n    markedAsValid: boolean;\r\n}\r\n\r\n/**\r\n * Represents whether a player's input for a category is deemed a very creative answer.\r\n */\r\nexport interface IsPlayerInputVeryCreativeStatus {\r\n    categoryIndex: number;\r\n    evaluatedPlayerId: string;\r\n    markedAsCreative: boolean;\r\n}\r\n\r\nexport interface GameResultForPlayer {\r\n    playerName: string;\r\n    points: number;\r\n}\r\n\r\n/**\r\n * Player inputs that are marked as \"very creative\" by other players are\r\n * displayed in a \"Hall of Fame\" at the end of the game.\r\n */\r\nexport interface HallOfFameEntry {\r\n    category: string;\r\n    playerName: string;\r\n    text: string;\r\n}\r\n","import {\r\n    Button,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormLabel,\r\n    Input,\r\n    Radio,\r\n    RadioGroup,\r\n    Snackbar,\r\n    TextField,\r\n} from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { xor } from 'lodash';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport AddCustomCategory from '../../components/AddCustomCategory/AddCustomCategory';\r\nimport ChipsArray, { ChipType } from '../../components/ChipsArray/ChipsArray';\r\nimport NewGameOptionsPanel from '../../components/NewGameOptionsPanel/NewGameOptionsPanel';\r\nimport {\r\n    RejoinRunningGameHint,\r\n    RejoinRunningGameHintContext,\r\n} from '../../components/RejoinRunningGameHint/RejoinRunningGameHint';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport SelectRandomCategories from '../../components/SelectRandomCategories/SelectRandomCategories';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport {\r\n    AVAILABLE_CATEGORIES,\r\n    DEFAULT_DURATION_OF_COUNTDOWN,\r\n    DEFAULT_NUMBER_OF_ROUNDS,\r\n    MAX_NUMBER_OF_ROUNDS,\r\n    MIN_DURATION_OF_COUNTDOWN,\r\n    MIN_NUMBER_OF_CATEGORIES,\r\n    MIN_NUMBER_OF_ROUNDS,\r\n    STANDARD_ALPHABET,\r\n    STANDARD_CATEGORIES,\r\n    STANDARD_EXCLUDED_LETTERS,\r\n    UseCountdownRadioButton,\r\n} from '../../constants/game.constant';\r\nimport { GameConfigScoringOptions } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { getRandomCategories, getRandomLetters } from '../../utils/game.utils';\r\nimport { convertDateToUnixTimestamp } from '../../utils/general.utils';\r\nimport {\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setPlayerInfoInLocalStorage,\r\n    setRunningGameInfoInLocalStorage,\r\n} from '../../utils/local-storage.utils';\r\nimport styles from './NewGame.module.css';\r\n\r\nenum CategoryArray {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\ninterface NewGamePropsFromStore {\r\n    gameId: string | null;\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\ninterface NewGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface NewGameProps extends NewGamePropsFromStore, NewGameDispatchProps, RouteComponentProps { }\r\ninterface NewGameState {\r\n    availableCategories: string[];\r\n    durationOfCountdown: number;\r\n    isNumberOfRoundsInputValid: boolean;\r\n    isSnackbarOpen: boolean;\r\n    lettersToExclude: string[];\r\n    nameInput: string;\r\n    numberOfRoundsInput: number;\r\n    scoringOptions: GameConfigScoringOptions;\r\n    selectedCategories: string[];\r\n    snackBarMessage: string;\r\n    useCountdown: boolean;\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass NewGame extends Component<NewGameProps, NewGameState> {\r\n    public state: NewGameState = {\r\n        availableCategories: AVAILABLE_CATEGORIES,\r\n        durationOfCountdown: DEFAULT_DURATION_OF_COUNTDOWN,\r\n        isNumberOfRoundsInputValid: true,\r\n        isSnackbarOpen: false,\r\n        lettersToExclude: [...STANDARD_EXCLUDED_LETTERS],\r\n        nameInput: this.props.playerInfo ? this.props.playerInfo.name : '',\r\n        numberOfRoundsInput: DEFAULT_NUMBER_OF_ROUNDS,\r\n        selectedCategories: STANDARD_CATEGORIES,\r\n        scoringOptions: {\r\n            checkForDuplicates: true,\r\n            creativeAnswersExtraPoints: false,\r\n            onlyPlayerWithValidAnswer: true,\r\n        },\r\n        snackBarMessage: '',\r\n        useCountdown: false,\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const numberOfRoundsInputLabel = `Anzahl Runden (${MIN_NUMBER_OF_ROUNDS}-${MAX_NUMBER_OF_ROUNDS})`;\r\n        const maxNumberOfCategories = this.state.availableCategories.length + this.state.selectedCategories.length;\r\n        const newGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername (max. 20 Zeichen)\"\r\n                    value={this.state.nameInput}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    autoFocus\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                    inputProps={{ 'maxLength': '20' }}\r\n                    onChange={this.handleNameInputChange}\r\n                />\r\n                <TextField\r\n                    name=\"numberOfRoundsInput\"\r\n                    label={numberOfRoundsInputLabel}\r\n                    type=\"number\"\r\n                    value={this.state.numberOfRoundsInput}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.isNumberOfRoundsInputValid}\r\n                    inputProps={{ 'min': MIN_NUMBER_OF_ROUNDS, 'max': MAX_NUMBER_OF_ROUNDS }}\r\n                    onChange={this.handleNumberOfRoundsInputChange}\r\n                />\r\n                <FormControl component=\"fieldset\" classes={{ root: styles.end_round_fieldset }}>\r\n                    <FormLabel\r\n                        component=\"legend\"\r\n                        className={styles.end_round_legend}\r\n                    >\r\n                        Beenden der Runde durch:\r\n                    </FormLabel>\r\n                    <RadioGroup\r\n                        className={styles.radio_group}\r\n                        aria-label=\"Beenden der Runde\"\r\n                        name=\"usecountdown\"\r\n                        value={this.state.useCountdown ? UseCountdownRadioButton.countdown : UseCountdownRadioButton.player}\r\n                        onChange={this.handleUseCountdownChange}\r\n                    >\r\n                        <FormControlLabel\r\n                            value={UseCountdownRadioButton.player}\r\n                            control={<Radio color=\"primary\" />}\r\n                            label=\"Spieler\"\r\n                        />\r\n                        <div className={styles.countdown_wrapper}>\r\n                            <FormControlLabel\r\n                                value={UseCountdownRadioButton.countdown}\r\n                                control={<Radio color=\"primary\" />}\r\n                                label=\"Countdown (Sekunden)\"\r\n                            />\r\n                            <Input\r\n                                type=\"number\"\r\n                                value={this.state.durationOfCountdown}\r\n                                className={styles.countdown_input}\r\n                                disabled={!this.state.useCountdown}\r\n                                inputProps={{ 'aria-label': 'Dauer des Countdowns', 'min': MIN_DURATION_OF_COUNTDOWN }}\r\n                                onChange={this.handleCountdownInputChange}\r\n                            />\r\n                        </div>\r\n                    </RadioGroup>\r\n                </FormControl>\r\n                <NewGameOptionsPanel\r\n                    lettersToExclude={this.state.lettersToExclude}\r\n                    scoringOptions={this.state.scoringOptions}\r\n                    handleGameOptionChange={this.handleGameOptionChange}\r\n                    handleLetterToExcludeChange={this.handleLetterToExcludeChange}\r\n                />\r\n                <p className={styles.options_label}>\r\n                    <span>Ausgewählte Kategorien (mind. {MIN_NUMBER_OF_CATEGORIES}):</span>\r\n                    <SelectRandomCategories\r\n                        maxNumberOfCategories={maxNumberOfCategories}\r\n                        selectCategoriesRandomly={this.selectCategoriesRandomly}\r\n                    />\r\n                </p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.selectedCategories}\r\n                    chipType={ChipType.selected}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.selected)}\r\n                />\r\n                <p className={styles.options_label}>Verfügbare Kategorien:</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.availableCategories}\r\n                    chipType={ChipType.available}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.available)}\r\n                >\r\n                    <AddCustomCategory addCustomCategory={this.addCustomCategory} />\r\n                </ChipsArray>\r\n                <div className=\"button-wrapper add-margin-top\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<AddCircleIcon />}\r\n                    >Spiel erstellen</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                {this.props.gameId ? <RejoinRunningGameHint context={RejoinRunningGameHintContext.newgame} /> : null}\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Neues Spiel\" />\r\n                    {newGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n                    open={this.state.isSnackbarOpen}\r\n                    autoHideDuration={3000}\r\n                    message={this.state.snackBarMessage}\r\n                    onClose={this.handleSnackBarClose}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: NewGameProps) {\r\n        if (this.props.playerInfo && this.props.playerInfo !== prevProps.playerInfo) {\r\n            this.setState({ nameInput: this.props.playerInfo.name });\r\n        }\r\n    }\r\n\r\n    private handleNameInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ nameInput: event.target.value });\r\n    }\r\n\r\n    private handleNumberOfRoundsInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = +event.target.value;\r\n        const isNumberOfRoundsInputValid = value >= MIN_NUMBER_OF_ROUNDS && value <= MAX_NUMBER_OF_ROUNDS;\r\n        this.setState({ isNumberOfRoundsInputValid, numberOfRoundsInput: value });\r\n    }\r\n\r\n    private handleGameOptionChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            scoringOptions: {\r\n                ...this.state.scoringOptions,\r\n                [event.target.name]: event.target.checked\r\n            }\r\n        });\r\n    }\r\n\r\n    private handleCountdownInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ durationOfCountdown: +event.target.value });\r\n    }\r\n\r\n    private handleLetterToExcludeChange = (event: ChangeEvent<HTMLInputElement>, letter: string) => {\r\n        const { lettersToExclude } = this.state;\r\n        const newLettersToExclude = event.target.checked ? [...lettersToExclude, letter] : lettersToExclude.filter(l => l !== letter);\r\n        this.setState({ lettersToExclude: newLettersToExclude });\r\n    }\r\n\r\n    private handleUseCountdownChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ useCountdown: (event.target as HTMLInputElement).value === UseCountdownRadioButton.countdown });\r\n    };\r\n\r\n    private selectCategoriesRandomly = (numberOfCategories: number, retainSelection: boolean) => {\r\n        const categoryPool = [...this.state.availableCategories, ...this.state.selectedCategories];\r\n        const selectedCategories = getRandomCategories(\r\n            numberOfCategories, categoryPool, retainSelection ? this.state.selectedCategories : []\r\n        );\r\n        const availableCategories = categoryPool.filter(c => !selectedCategories.includes(c)).sort();\r\n        this.setState({ availableCategories, selectedCategories });\r\n    }\r\n\r\n    private updateCategoryArrays = (chipToRemove: string, removeFromArray: CategoryArray) => {\r\n        let newSelectedCategories: string[];\r\n        let newAvailableCategories: string[];\r\n        if (removeFromArray === CategoryArray.selected) {\r\n            newSelectedCategories = this.state.selectedCategories.filter(category => category !== chipToRemove);\r\n            newAvailableCategories = [...this.state.availableCategories];\r\n            newAvailableCategories.push(chipToRemove);\r\n        } else {\r\n            newAvailableCategories = this.state.availableCategories.filter(category => category !== chipToRemove);\r\n            newSelectedCategories = [...this.state.selectedCategories];\r\n            newSelectedCategories.push(chipToRemove);\r\n        }\r\n        this.setState({\r\n            availableCategories: newAvailableCategories,\r\n            selectedCategories: newSelectedCategories\r\n        });\r\n    }\r\n\r\n    private addCustomCategory = (newCategory: string) => {\r\n        this.setState({ availableCategories: [...this.state.availableCategories, newCategory] });\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (this.isReadyToStartGame()) {\r\n            this.startNewGame();\r\n        } else {\r\n            this.setState({ nameInput: this.state.nameInput.trim(), validateInputs: true });\r\n        }\r\n    }\r\n\r\n    private isReadyToStartGame = (): boolean => {\r\n        const { isNumberOfRoundsInputValid, lettersToExclude, numberOfRoundsInput, selectedCategories } = this.state;\r\n        if (!isNumberOfRoundsInputValid) {\r\n            this.showSnackBar(`Die Anzahl an Runden muss zwischen ${MIN_NUMBER_OF_ROUNDS} und ${MAX_NUMBER_OF_ROUNDS} liegen!`);\r\n            return false;\r\n        }\r\n        if (selectedCategories.length < MIN_NUMBER_OF_CATEGORIES) {\r\n            this.showSnackBar(`Du musst mindestens ${MIN_NUMBER_OF_CATEGORIES} Kategorien auswählen!`);\r\n            return false;\r\n        }\r\n        if (STANDARD_ALPHABET.length - lettersToExclude.length < numberOfRoundsInput) {\r\n            this.showSnackBar('Du hast zu viele Buchstaben ausgeschlossen!');\r\n            return false;\r\n        }\r\n        return !!this.state.nameInput.trim();\r\n    }\r\n\r\n    private showSnackBar = (message: string) => this.setState({ isSnackbarOpen: true, snackBarMessage: message });\r\n    private handleSnackBarClose = () => this.setState({ isSnackbarOpen: false });\r\n\r\n    private startNewGame = () => {\r\n        const playerInfo = this.props.playerInfo as PlayerInfo;\r\n        const idCreationTimestamp = this.props.playerIdCreationTimestamp;\r\n        const { durationOfCountdown, nameInput, numberOfRoundsInput, scoringOptions, selectedCategories, useCountdown } = this.state;\r\n        const gameId = uuidv4(); // ⇨ e.g. '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n        removeAllDataOfRunningGameFromLocalStorage();\r\n        setPlayerInfoInLocalStorage({ id: playerInfo.id, idCreationTimestamp, name: nameInput.trim() });\r\n        setRunningGameInfoInLocalStorage({ gameId, idCreationTimestamp: convertDateToUnixTimestamp(new Date()), isPlayerAdmin: true });\r\n        this.props.onSetGameData({\r\n            gameConfig: {\r\n                categories: selectedCategories,\r\n                durationOfCountdown,\r\n                letters: getRandomLetters(numberOfRoundsInput, xor(STANDARD_ALPHABET, this.state.lettersToExclude)),\r\n                numberOfRounds: numberOfRoundsInput,\r\n                scoringOptions,\r\n                useCountdown\r\n            },\r\n            gameId,\r\n            isRejoiningGame: false,\r\n            playerInfo: {\r\n                id: playerInfo.id,\r\n                isAdmin: true,\r\n                name: nameInput.trim()\r\n            }\r\n        });\r\n        this.props.history.push('/play');\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): NewGamePropsFromStore => {\r\n    return {\r\n        gameId: state.gameId,\r\n        playerIdCreationTimestamp: state.playerIdCreationTimestamp,\r\n        playerInfo: state.playerInfo\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): NewGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => dispatch(setDataForNewGame(payload))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewGame);\r\n","import {\r\n    Checkbox,\r\n    Divider,\r\n    ExpansionPanel,\r\n    ExpansionPanelDetails,\r\n    ExpansionPanelSummary,\r\n    FormControlLabel,\r\n    FormGroup,\r\n} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport React, { ChangeEvent } from 'react';\r\n\r\nimport { GAME_OPTION_LABEL, STANDARD_ALPHABET } from '../../constants/game.constant';\r\nimport { GameConfigScoringOptions, GameOption } from '../../models/game.interface';\r\nimport styles from './NewGameOptionsPanel.module.css';\r\n\r\ninterface NewGameOptionsPanelProps {\r\n    lettersToExclude: string[];\r\n    scoringOptions: GameConfigScoringOptions;\r\n    handleGameOptionChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n    handleLetterToExcludeChange: (event: ChangeEvent<HTMLInputElement>, letter: string) => void;\r\n}\r\n\r\nconst NewGameOptionsPanel: React.FunctionComponent<NewGameOptionsPanelProps> = props => {\r\n    return (\r\n        <ExpansionPanel className=\"new-game-expansion-panel\">\r\n            <ExpansionPanelSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n            >\r\n                Weitere Optionen\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n                <FormGroup className=\"game-options-list\">\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={props.scoringOptions.checkForDuplicates}\r\n                                name={GameOption.checkForDuplicates}\r\n                                color=\"primary\"\r\n                                onChange={props.handleGameOptionChange}\r\n                            />\r\n                        }\r\n                        label={GAME_OPTION_LABEL.checkForDuplicates}\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={props.scoringOptions.onlyPlayerWithValidAnswer}\r\n                                name={GameOption.onlyPlayerWithValidAnswer}\r\n                                color=\"primary\"\r\n                                onChange={props.handleGameOptionChange}\r\n                            />\r\n                        }\r\n                        label={GAME_OPTION_LABEL.onlyPlayerWithValidAnswer}\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={props.scoringOptions.creativeAnswersExtraPoints}\r\n                                name={GameOption.creativeAnswersExtraPoints}\r\n                                color=\"primary\"\r\n                                onChange={props.handleGameOptionChange}\r\n                            />\r\n                        }\r\n                        label={GAME_OPTION_LABEL.creativeAnswersExtraPoints}\r\n                    />\r\n                </FormGroup>\r\n                <Divider />\r\n                <p className={styles.options_label}>Folgende Buchstaben ausschließen:</p>\r\n                <FormGroup row className=\"letters-to-exclude\">\r\n                    {STANDARD_ALPHABET.map((letter, letterIndex) => (\r\n                        <FormControlLabel\r\n                            key={`slf-letters-to-exclude-${letterIndex}`}\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={props.lettersToExclude.includes(letter)}\r\n                                    color=\"primary\"\r\n                                    onChange={(event) => props.handleLetterToExcludeChange(event, letter)}\r\n                                />\r\n                            }\r\n                            label={letter}\r\n                        />\r\n                    ))}\r\n                </FormGroup>\r\n            </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n    );\r\n};\r\n\r\nexport default NewGameOptionsPanel;\r\n","import {\r\n    Button,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    FormControlLabel,\r\n    IconButton,\r\n    makeStyles,\r\n    TextField,\r\n} from '@material-ui/core';\r\nimport FlipCameraAndroidIcon from '@material-ui/icons/FlipCameraAndroid';\r\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\r\n\r\nimport { MIN_NUMBER_OF_CATEGORIES } from '../../constants/game.constant';\r\nimport styles from './SelectRandomCategories.module.css';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    label: {\r\n        fontSize: '0.85rem',\r\n    }\r\n}));\r\n\r\nexport interface SelectRandomCategoriesDialogProps {\r\n    maxNumberOfCategories: number;\r\n    open: boolean;\r\n    onClose: (numberOfCategories: number | null, retainSelection?: boolean) => void;\r\n}\r\nconst SelectRandomCategoriesDialog: React.FunctionComponent<SelectRandomCategoriesDialogProps> = props => {\r\n    const checkboxLabelClasses = useStyles();\r\n    const { onClose, open } = props;\r\n    const [isNumberOfCategoriesInputValid, setIsNumberOfCategoriesInputValid] = useState(true);\r\n    const [numberOfCategoriesInput, setNumberOfCategoriesInput] = useState(MIN_NUMBER_OF_CATEGORIES);\r\n    const [validateInputs, setValidateInputs] = useState(false);\r\n    const [retainSelection, setRetainSelection] = useState(false);\r\n    const numberOfRoundsInputLabel = `Anzahl Kategorien (${MIN_NUMBER_OF_CATEGORIES}-${props.maxNumberOfCategories})`;\r\n\r\n    const handleNumberOfCategoriesInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = +event.target.value;\r\n        setNumberOfCategoriesInput(value);\r\n        setIsNumberOfCategoriesInputValid(value >= MIN_NUMBER_OF_CATEGORIES && value <= props.maxNumberOfCategories);\r\n    };\r\n\r\n    const handleRetainSelectionOptionChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setRetainSelection(event.target.checked);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        onClose(null);\r\n    };\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (isNumberOfCategoriesInputValid) {\r\n            setValidateInputs(false);\r\n            onClose(numberOfCategoriesInput, retainSelection);\r\n        } else {\r\n            setValidateInputs(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <form onSubmit={handleSubmit} className={styles.dialog_min_width} noValidate autoComplete=\"off\">\r\n                <DialogContent>\r\n                    <DialogContentText className={styles.dialog_title}>\r\n                        Kategorien zufällig auswählen\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        name=\"numberOfRoundsInput\"\r\n                        label={numberOfRoundsInputLabel}\r\n                        type=\"number\"\r\n                        value={numberOfCategoriesInput}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        required\r\n                        error={validateInputs && !isNumberOfCategoriesInputValid}\r\n                        inputProps={{ 'min': MIN_NUMBER_OF_CATEGORIES, 'max': props.maxNumberOfCategories }}\r\n                        onChange={handleNumberOfCategoriesInputChange}\r\n                    />\r\n                    <FormControlLabel\r\n                        classes={checkboxLabelClasses}\r\n                        control={\r\n                            <Checkbox\r\n                                checked={retainSelection}\r\n                                name=\"retainSelection\"\r\n                                color=\"primary\"\r\n                                onChange={handleRetainSelectionOptionChange}\r\n                            />\r\n                        }\r\n                        label=\"Inklusive bereits ausgewählter Kategorien\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={handleClose}\r\n                    >Abbrechen</Button>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                    >Auswählen</Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\ninterface SelectRandomCategoriesProps {\r\n    maxNumberOfCategories: number;\r\n    selectCategoriesRandomly: (numberOfCategories: number, retainSelection: boolean) => void;\r\n}\r\nconst SelectRandomCategories: React.FunctionComponent<SelectRandomCategoriesProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = (numberOfCategories: number | null, retainSelection?: boolean) => {\r\n        setOpen(false);\r\n        if (numberOfCategories && retainSelection !== undefined) {\r\n            props.selectCategoriesRandomly(numberOfCategories, retainSelection);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <IconButton\r\n                className={styles.random_categories_button}\r\n                size=\"small\"\r\n                title=\"Kategorien zufällig auswählen\"\r\n                aria-label=\"Kategorien zufällig auswählen\"\r\n                onClick={() => setOpen(true)}\r\n            >\r\n                <FlipCameraAndroidIcon fontSize=\"small\" />\r\n            </IconButton>\r\n            <SelectRandomCategoriesDialog\r\n                maxNumberOfCategories={props.maxNumberOfCategories}\r\n                open={open}\r\n                onClose={handleClose}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default SelectRandomCategories;\r\n"],"sourceRoot":""}