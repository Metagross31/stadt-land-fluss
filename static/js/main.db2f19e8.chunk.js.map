{"version":3,"sources":["constants/themes.constant.ts","constants/game.constant.ts","components/Header/Header.tsx","components/SectionHeader/SectionHeader.tsx","containers/Dashboard/Dashboard.tsx","components/ToDashboardButton/ToDashboardButton.tsx","store/app.actions.ts","components/ChipsArray/ChipsArray.tsx","utils/general.utils.ts","utils/game.utils.ts","containers/GameResults/GameResults.tsx","utils/local-storage.utils.ts","containers/JoinGame/JoinGame.tsx","components/AddCustomCategory/AddCustomCategory.tsx","containers/NewGame/NewGame.tsx","models/pub-nub-data.model.ts","components/AdminPanel/AdminPanel.tsx","components/LetterAnimation/LetterAnimation.tsx","components/LoadingScreen/LoadingScreen.tsx","components/GameRoundChip/GameRoundChip.tsx","components/PhaseEvaluateRound/PhaseEvaluateRound.tsx","components/PhaseFillOutTextfields/PhaseFillOutTextfields.tsx","components/JoinGameLink/JoinGameLink.tsx","components/PlayerList/PlayerList.tsx","components/PhaseWaitingToStart/PhaseWaitingToStart.tsx","components/PubNubEventHandler/PubNubEventHandler.tsx","config/pubnub.config.ts","containers/PlayGame/PlayGame.tsx","App.tsx","constants/app.constant.ts","serviceWorker.ts","store/app.reducer.ts","index.tsx"],"names":["APP_THEME_ID","GamePhase","AppThemes","id","green","animationBackgroundColor","className","displayName","muiTheme","createMuiTheme","palette","primary","secondary","red","style","background","process","blue","deepOrange","orange","indigo","pink","purple","amber","black","blueGrey","Header","state","anchorEl","version","handleClick","event","setState","currentTarget","handleClose","handleMenuItemClick","selectedTheme","props","switchTheme","playerNameParagraph","this","playerName","theme","href","target","rel","aria-label","Button","aria-controls","aria-haspopup","onClick","Menu","keepMounted","open","Boolean","onClose","map","item","index","MenuItem","key","packageJson","Component","connect","playerInfo","name","SectionHeader","Fragment","text","showDivider","Divider","Dashboard","rejoinGameElement","Link","component","RouterLink","to","gameId","src","alt","ToDashboardButton","type","color","variant","size","startIcon","onReturnToDashboard","setDataForNewGame","payload","ALPHABET_WITHOUT_QXY","STANDARD_CATEGORIES","AVAILABLE_CATEGORIES","ChipType","convertDateToUnixTimestamp","dateToConvert","getTime","convertCollectionToMap","collectionToConvert","dataAsMap","Map","Object","keys","forEach","set","convertMapToCollection","mapToConvert","dataAsCollection","data","getRandomnLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToRandomnlySelectFrom","i","randomnLetter","randomnItem","push","filter","letter","getPlayersInAlphabeticalOrder","players","Array","from","sort","a","b","toLowerCase","getEmptyRoundInputs","numberOfInputs","value","valid","fill","markEmptyPlayerInputsAsInvalid","playerInputs","input","createGameRoundEvaluation","categories","gameRoundEvaluation","evaluatedPlayer","evaluationsForAllCategories","_","evaluationForOneCategory","evaluatingPlayer","getMinNumberOfMarkedAsInvalid","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","processPlayerInputEvaluations","gameRound","roundEvaluation","minNumberOfInvalids","evaluatedGameRound","cloneDeep","playerId","get","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","points","round","reduce","total","shouldUserRespondToRequestGameDataMessage","user","requestingPlayerId","isAdmin","requestingPlayerInfo","playersWithoutRequestingPlayer","delete","GameResults","getResultIcon","isWinner","fontSize","returnToDashboard","history","onResetAppState","gameConfig","mostPoints","Math","max","result","List","ListItem","ListItemIcon","ListItemText","singular","plural","numberOfRounds","letters","join","dispatch","setAppThemeIdInLocalStorage","appTheme","localStorage","setItem","setPlayerInfoInLocalStorage","JSON","stringify","setRunningGameInfoInLocalStorage","removeRunningGameInfoFromLocalStorage","removeItem","JoinGame","idInput","nameInput","validateInputs","handleInputChange","handleSubmit","preventDefault","trim","joinGame","idCreationTimestamp","playerIdCreationTimestamp","Date","isPlayerAdmin","onSetGameData","isRejoiningGame","joinGameForm","onSubmit","noValidate","autoComplete","TextField","label","onChange","fullWidth","required","autoFocus","error","query","URLSearchParams","location","search","has","prevProps","useStyles","makeStyles","createStyles","lessPadding","padding","dialog","minWidth","CustomCategoryDialog","classes","useState","categoryInput","setCategoryInput","setValidateInputs","Dialog","stopPropagation","trimmedCategoryInput","DialogContent","DialogContentText","margin","DialogActions","AddCustomCategory","setOpen","Tooltip","title","placement","IconButton","newCategory","addCustomCategory","CategoryArray","root","display","justifyContent","flexWrap","spacing","chip","chipIcon","backgroundColor","ChipsArray","chipsArray","Chip","chipType","undefined","icon","removeChip","children","PubNubMessageType","NewGame","availableCategories","numberOfRoundsInput","selectedCategories","handleNameInputChange","handleNumberOfRoundsInputChange","updateCategoryArrays","chipToRemove","removeFromArray","newSelectedCategories","newAvailableCategories","selected","category","startNewGame","uuidv4","numberOfRoundsInputLabel","newGameForm","inputProps","available","adminPanel","position","top","right","menuButton","dialogContent","maxWidth","dialogContentText","KickUserDialog","playerToBeKicked","AdminPanel","React","setAnchorEl","openDialog","setOpenDialog","setPlayerToBeKicked","otherPlayers","sortedPlayers","playerIndex","selectedPlayer","kickPlayer","Particle","x","y","radius","ctx","save","translate","fillStyle","fillRect","restore","ParticleAlphabet","callbackWhenAnimationDone","canvas","currentPos","width","height","particlePositions","particles","tmpCanvas","tmpCtx","time","counter","myInterval","activeTheme","animate","requestAnimationFrame","animateParticles","document","querySelector","getContext","mainElement","find","classList","contains","offsetWidth","offsetHeight","createElement","setInterval","changeLetter","getPixels","clearInterval","makeParticles","num","random","keyword","window","innerWidth","innerHeight","font","fillText","measureText","idata","getImageData","buffer32","Uint32Array","buffer","p","pPos","indexOf","draw","LetterAnimation","lettersToUse","letterToUnveil","lettersForAnimation","LETTER_ANIMATION_LETTER_COUNT","useEffect","init","loadingScreen","left","centralContent","transform","marginBlockStart","fontWeight","textAlign","loadingSpinner","loadingSpinnerSize","LoadingScreen","messageElement","message","CircularProgress","centerContent","marginTop","borderRadius","boxShadow","GameRoundChip","currentLetter","currentRound","StyledBadge","withStyles","badge","border","paper","Badge","PhaseEvaluateRound","currentRoundEvaluation","getMinNumberOfNecessaryMarkedAsInvalid","finishedGameRound","createEvaluationButton","categoryIndex","indexInSortedPlayers","evaluationForCategory","isInputAcceptedByUser","rejectingPlayers","getRejectingPlayers","tooltipText","hasPlayerTypedText","evaluatedPlayerId","currentEvaluation","updateEvaluationOfPlayerInput","handleEvaluationButtonClick","badgeContent","playerEvaluationElements","isInputValid","InputProps","startAdornment","InputAdornment","playerInput","searchLink","encodeURIComponent","createSearchLink","sendEvaluationFinishedMessage","PhaseFillOutTextfields","gameRoundInputs","newGameRoundInputs","updateCurrentRoundInputs","sendRoundFinishedMessage","PubNubCurrentRoundInputsMessage","currentRoundInputs","PubNubEvaluationOfPlayerInputMessage","evaluationOfPlayerInput","PubNubKickPlayerMessage","PubNubDataForCurrentGameMessage","dataForCurrentGame","JoinGameLink","url","joinGameLink","slice","OutlinedInput","disabled","endAdornment","element","setAttribute","body","appendChild","select","execCommand","removeChild","copyToClipboard","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","PlayerList","PhaseWaitingToStart","waitForGameStartElement","createGameSettingsElement","sendMessage","startGame","memo","pubNubClient","usePubNub","setUserState","newUserState","channels","gameChannel","getHereNowData","hereNow","includeUUIDs","includeState","response","console","log","totalOccupancy","navigateToDashboard","dataForGameChannel","pubNubUserStates","occupants","occupant","userState","addPlayers","pubNubListeners","messageEvent","processPubNubMessage","presence","presenceEvent","action","status","statusEvent","channel","messages","setTimeout","addListener","subscribe","withPresence","removeListener","unsubscribeAll","PUBNUB_KEYS","require","PUBNUB_CONFIG","publishKey","subscribeKey","uuid","ssl","PlayGame","currentPhase","waitingToStart","loadingScreenMessage","playersThatFinishedEvaluation","showLetterAnimation","showLoadingScreen","publish","storeInHistory","ttl","newPlayers","newPlayer","roundFinished","stopRoundAndSendInputs","addPlayerInputForFinishedRound","publisher","processEvaluationOfPlayerInput","evaluationFinished","countPlayerAsEvaluationFinished","removePlayerFromGame","requestGameData","sendDataForCurrentGame","sendKickPlayerMessage","processDataForCurrentGame","roundInputs","fillOutTextfields","newCurrentRoundInputs","toPubNubMessage","playerInputsForFinishedRound","evaluateRound","newEvaluation","evaluatingPlayerId","playerInputEvaluations","processEvaluationsAndStartNextRoundOrFinishGame","newGameRounds","onSetDataOfFinishedGame","evaluationsAsCollections","Pubnub","currentPhaseElement","letterAnimationElement","loadingScreenElement","client","setDataOfFinishedGame","backspaceDisabler","App","switchThemeHandler","newTheme","ThemeProvider","basename","path","exact","disable","appThemeId","getItem","storedPlayerInfo","storedData","parse","getPlayerInfoFromLocalStorage","nowTimestamp","onSetStoredPlayerInfo","runningGameInfo","getRunningGameInfoFromLocalStorage","onSetStoredRunningGameInfo","setStoredPlayerInfo","setStoredRunningGameInfo","hostname","match","initialState","appStore","createStore","storedRunningGameInfo","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.db2f19e8.chunk.js","sourcesContent":["import green from '@material-ui/core/colors/green';\r\nimport red from '@material-ui/core/colors/red';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport deepOrange from '@material-ui/core/colors/deepOrange';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport { createMuiTheme, Theme } from '@material-ui/core/styles';\r\nimport CSS from 'csstype';\r\n\r\nexport enum APP_THEME_ID {\r\n    green = 'green',\r\n    blue = 'blue',\r\n    orange = 'orange',\r\n    pink = 'pink',\r\n    black = 'black'\r\n}\r\n\r\nexport interface AppTheme {\r\n    id: APP_THEME_ID;\r\n    /** The background color used by the LetterAnimation component */\r\n    animationBackgroundColor: string;\r\n    /** The name of the CSS class that is applied to the header and the main element */\r\n    className: string;\r\n    /** The text displayed in the header's color picker dropdown */\r\n    displayName: string;\r\n    muiTheme: Theme;\r\n    style: CSS.Properties;\r\n}\r\n\r\nexport const AppThemes: AppTheme[] = [\r\n    {\r\n        id: APP_THEME_ID.green,\r\n        animationBackgroundColor: 'rgb(31, 121, 52)',\r\n        className: 'green-theme',\r\n        displayName: 'Grün/Wald',\r\n        muiTheme: createMuiTheme({ palette: { primary: green, secondary: red } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(60, 143, 80, 0.3), rgba(60, 143, 80, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/leaves-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.blue,\r\n        animationBackgroundColor: 'rgb(9, 100, 204)',\r\n        className: 'blue-theme',\r\n        displayName: 'Blau/Meer',\r\n        muiTheme: createMuiTheme({ palette: { primary: blue, secondary: deepOrange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/sea-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.orange,\r\n        animationBackgroundColor: 'rgb(187, 138, 5)',\r\n        className: 'orange-theme',\r\n        displayName: 'Orange/Strand',\r\n        muiTheme: createMuiTheme({ palette: { primary: orange, secondary: indigo } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(241, 179, 8, 0.3), rgba(240, 188, 47, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/beach-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.pink,\r\n        animationBackgroundColor: 'rgb(167, 34, 207)',\r\n        className: 'pink-theme',\r\n        displayName: 'Pink/Musik',\r\n        muiTheme: createMuiTheme({ palette: { primary: purple, secondary: amber } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(133, 14, 103, 0.3), rgba(133, 14, 103, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/music-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.black,\r\n        animationBackgroundColor: 'rgb(0, 0, 0)',\r\n        className: 'black-theme',\r\n        displayName: 'Schwarz/Goth',\r\n        muiTheme: createMuiTheme({ palette: { primary: blueGrey, secondary: orange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(0, 51, 153, 0.1), rgba(0, 51, 153, 0.1)),\r\n                url('${process.env.PUBLIC_URL}/assets/halloween-pattern.jpg')`\r\n        }\r\n    },\r\n]\r\n","export const DEFAULT_NUMBER_OF_ROUNDS = 3;\r\nexport const MIN_NUMBER_OF_ROUNDS = 1;\r\nexport const MAX_NUMBER_OF_ROUNDS = 15;\r\n\r\nexport const ALPHABET_WITHOUT_QXY = [\r\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\r\n    'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'Z'\r\n];\r\n\r\nexport const STANDARD_CATEGORIES = ['Stadt', 'Land', 'Fluss/Gewässer'];\r\nexport const AVAILABLE_CATEGORIES = [\r\n    'Band/Musiker',\r\n    'Berg/Gebirge',\r\n    'Beruf',\r\n    'Berühmte Person',\r\n    'Buchtitel',\r\n    'Chemisches Element',\r\n    'Dinge die man jeden Tag macht',\r\n    'Etwas Eckiges',\r\n    'Etwas Rundes',\r\n    'Fiktiver Charakter',\r\n    'Film/Serie',\r\n    'Getränk',\r\n    'Grund für eine Verspätung',\r\n    'Hobby',\r\n    'In Zeiten von Corona verboten',\r\n    'Könnte ein Trump-Tweet sein',\r\n    'Körperteil',\r\n    'Krankheit',\r\n    'Laster',\r\n    'Marke',\r\n    'Mordwaffe',\r\n    'Pflanze',\r\n    'Pizzasorte',\r\n    'Porno-Künstlername',\r\n    'Religion',\r\n    'Scheidungsgrund',\r\n    'Schimpfwort',\r\n    'See/Meer',\r\n    'Sehenswürdigkeit',\r\n    'Sex (Stellung, Synonym)',\r\n    'Speise',\r\n    'Tier',\r\n    'Title of your Sex Tape',\r\n    'Unnötige Superkraft',\r\n    'Videospiel',\r\n    'Werkzeug',\r\n    'Wort in einer Fremdsprache'\r\n];\r\n\r\nexport enum GamePhase {\r\n    waitingToStart = 'waitingToStart',\r\n    fillOutTextfields = 'fillOutTextfields',\r\n    evaluateRound = 'evaluateRound',\r\n    gameResult = 'gameResult'\r\n}\r\n\r\nexport const MIN_NUMBER_OF_PLAYERS = 2;\r\n\r\nexport const LETTER_ANIMATION_LETTER_COUNT = 5;\r\nexport const LETTER_ANIMATION_REDRAW_SPEED = 800;\r\n","import React, { Component } from 'react';\r\nimport './Header.css';\r\nimport { Button, Menu, MenuItem } from '@material-ui/core';\r\nimport { AppThemes, AppTheme } from '../../constants/themes.constant';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport packageJson from '../../../package.json';\r\n\r\ninterface HeaderPropsFromStore {\r\n    playerName: string | null;\r\n}\r\ninterface HeaderProps extends HeaderPropsFromStore {\r\n    switchTheme: (newTheme: AppTheme) => any;\r\n    theme: AppTheme;\r\n}\r\ninterface HeaderState {\r\n    anchorEl: EventTarget | null;\r\n    version: string;\r\n}\r\n\r\nexport class Header extends Component<HeaderProps, HeaderState> {\r\n    public state = {\r\n        anchorEl: null,\r\n        version: ''\r\n    };\r\n\r\n    public render() {\r\n        const playerNameParagraph = (\r\n            <p>Spieler: {this.props.playerName ? this.props.playerName : '-'}</p>\r\n        );\r\n        return (\r\n            <header className={'app-header ' + this.props.theme.className}>\r\n                <h1>Stadt-Land-Fluss</h1>\r\n                {playerNameParagraph}\r\n                <div className=\"about-section\">\r\n                    <p>v{this.state.version}</p>\r\n                    <a\r\n                        href=\"https://github.com/alexlehner86\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        aria-label=\"Mehr über den Autor erfahren (öffnet neues Fenster)\"\r\n                    >Autor</a>\r\n                </div>\r\n                <Button\r\n                    className=\"color-picker-button\"\r\n                    aria-controls=\"color-picker-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={this.handleClick}\r\n                >\r\n                    Theme\r\n                </Button>\r\n                <Menu\r\n                    id=\"color-picker-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {AppThemes.map((item, index) => (\r\n                        <MenuItem\r\n                            key={'color-picker-menu-item-' + index}\r\n                            onClick={() => this.handleMenuItemClick(item)}\r\n                        >{item.displayName}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({ version: packageJson.version });\r\n    }\r\n\r\n    private handleClick = (event: any) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    private handleClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    private handleMenuItemClick = (selectedTheme: AppTheme) => {\r\n        this.setState({ anchorEl: null });\r\n        this.props.switchTheme(selectedTheme);\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): HeaderPropsFromStore => {\r\n    return {\r\n        playerName: state.playerInfo ? state.playerInfo.name : ''\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Header);\r\n","import './SectionHeader.css';\r\nimport { Divider } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ninterface SectionHeaderProps {\r\n    showDivider: boolean;\r\n    text: string;\r\n}\r\n\r\nexport const SectionHeader: React.FunctionComponent<SectionHeaderProps> = props => (\r\n    <React.Fragment>\r\n        <h2 className=\"section-header\">{props.text}</h2>\r\n        {props.showDivider ? <Divider /> : null}\r\n    </React.Fragment>\r\n);\r\n","import './Dashboard.css';\r\nimport Link from '@material-ui/core/Link';\r\nimport React, { Component } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\r\n\r\ninterface DashboardPropsFromStore {\r\n    gameId: string | null;\r\n}\r\nclass Dashboard extends Component<DashboardPropsFromStore> {\r\n    public render() {\r\n        const rejoinGameElement = (\r\n            <Link component={RouterLink} to=\"/play\" className=\"rejoin-game-link\">\r\n                <DirectionsRunIcon />\r\n                Zurück ins laufende Spiel\r\n            </Link>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"dashboard-container material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Dashboard\"></SectionHeader>\r\n                    <div className=\"link-container\">\r\n                        {this.props.gameId ? rejoinGameElement : null}\r\n                        <Link component={RouterLink} to=\"/newgame\">Neues Spiel</Link>\r\n                        <Link component={RouterLink} to=\"/joingame\">Spiel beitreten</Link>\r\n                    </div>\r\n                    <img\r\n                        src={`${process.env.PUBLIC_URL}/assets/city-country-river.jpg`}\r\n                        alt=\"Stadt, Land, Fluss\"\r\n                        className=\"dashboard-slf-image\"\r\n                    />\r\n                    <div className=\"img-copyright\">\r\n                        <h3>Credits/Bilder</h3>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/830131-river-city-landscape-with-buildings-hills-and-trees\" target=\"_blank\" rel=\"noopener noreferrer\">Homepage/Stadt-Land-Fluss by pikgura – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/276920-abstract-seamless-pattern-with-tropical-leaves\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Grün/Wald by NadiaGrapes – www.vecteezy.com</a>\r\n                        <a href=\"https://www.freepik.com/free-photos-vectors/background\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Blau/Meer by macrovector – www.freepik.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/460735-seashell-sand-seamless-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Orange/Strand by Macrovector – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/454258-music-seamless\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Pink/Musik by Macrovector – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/662038-cat-and-bat-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Schwarz/Goth by angyee – www.vecteezy.com</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): DashboardPropsFromStore => {\r\n    return {\r\n        gameId: state.gameId\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Dashboard);\r\n","import './ToDashboardButton.css';\r\nimport { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton: React.FunctionComponent<ToDashboardButtonProps> = props => {\r\n    return (\r\n        <div className=\"button-wrapper to-dashboard-button\">\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDashboardButton;\r\n","import { Action } from 'redux';\r\nimport { GameConfig, GameRound, StoredRunningGameInfo } from '../models/game.interface';\r\nimport { PlayerInfo, StoredPlayerInfo } from './../models/player.interface';\r\nexport const SET_STORED_PLAYER_INFO = 'SET_STORED_PLAYER_INFO';\r\nexport const SET_STORED_RUNNING_GAME_INFO = 'SET_STORED_RUNNING_GAME_INFO';\r\nexport const SET_DATA_FOR_NEW_GAME = 'SET_DATA_FOR_NEW_GAME';\r\nexport const SET_DATA_OF_FINISHED_GAME = 'SET_DATA_OF_FINISHED_GAME';\r\nexport const RESET_APP_STATE = 'RESET_APP_STATE';\r\n\r\nexport interface SetStoredPlayerInfoAction extends Action {\r\n    payload: StoredPlayerInfo;\r\n}\r\n\r\nexport interface SetStoredRunningGameInfoAction extends Action {\r\n    payload: StoredRunningGameInfo;\r\n}\r\n\r\nexport interface SetDataForNewGamePayload {\r\n    gameId: string;\r\n    gameConfig: GameConfig | null;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\nexport interface SetDataForNewGameAction extends Action {\r\n    payload: SetDataForNewGamePayload\r\n}\r\n\r\nexport interface SetDataOfFinishedGamePayload {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n}\r\nexport interface SetDataOfFinishedGameAction extends Action {\r\n    payload: SetDataOfFinishedGamePayload\r\n}\r\n\r\nexport interface ResetAppStateAction extends Action {}\r\n\r\nexport type AppAction =\r\n    SetStoredPlayerInfoAction | SetStoredRunningGameInfoAction | SetDataForNewGameAction | SetDataOfFinishedGameAction | ResetAppStateAction;\r\n\r\n/*\r\n * Action Creators\r\n */\r\nexport const setStoredPlayerInfo = (payload: StoredPlayerInfo): SetStoredPlayerInfoAction => {\r\n    return { type: SET_STORED_PLAYER_INFO, payload }\r\n};\r\nexport const setStoredRunningGameInfo = (payload: StoredRunningGameInfo): SetStoredRunningGameInfoAction => {\r\n    return { type: SET_STORED_RUNNING_GAME_INFO, payload }\r\n};\r\nexport const setDataForNewGame = (payload: SetDataForNewGamePayload): SetDataForNewGameAction => {\r\n    return { type: SET_DATA_FOR_NEW_GAME, payload }\r\n};\r\nexport const setDataOfFinishedGame = (payload: SetDataOfFinishedGamePayload): SetDataOfFinishedGameAction => {\r\n    return { type: SET_DATA_OF_FINISHED_GAME, payload }\r\n};\r\nexport const resetAppState = (): ResetAppStateAction => {\r\n    return { type: RESET_APP_STATE }\r\n};\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport React from 'react';\r\n\r\nexport enum ChipType {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n        chipIcon: {\r\n            backgroundColor: 'inherit'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface ChipsArrayProps {\r\n    chipsArray: string[];\r\n    chipType: ChipType;\r\n    removeChip: (chip: string) => any;\r\n}\r\n\r\nconst ChipsArray: React.FunctionComponent<ChipsArrayProps> = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.chipsArray.map((chip, index) => (\r\n                <Chip\r\n                    key={`chip-to-${props.chipType}-${index}`}\r\n                    color={props.chipType === 'selected' ? 'primary' : undefined}\r\n                    icon={props.chipType === 'selected' ? <DoneIcon className=\"chip-icon-no-bg\" /> : <ChevronRightIcon />}\r\n                    label={chip}\r\n                    className={classes.chip}\r\n                    onClick={() => props.removeChip(chip)}\r\n                />\r\n            ))}\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChipsArray;\r\n","import { Collection } from \"../models/collection.interface\";\r\n\r\nexport const copyToClipboard = (text: string) => {\r\n    const element = document.createElement('textarea');\r\n    element.value = text;\r\n    element.setAttribute('readonly', '');\r\n    element.style.position = 'absolute';\r\n    element.style.left = '-9999px';\r\n    document.body.appendChild(element);\r\n    element.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(element);\r\n};\r\n\r\nexport const createAndFillArray = <T>(length: number, value: T): T[] => {\r\n    return new Array(length).fill(value);\r\n};\r\n\r\nexport const makePluralIfCountIsNotOne = (count: number, singular: string, plural: string): string => {\r\n    return count === 1 ? singular : plural;\r\n};\r\n\r\nexport const convertDateToUnixTimestamp = (dateToConvert: Date): number => dateToConvert.getTime() / 1000 | 0;\r\n\r\nexport const convertCollectionToMap = <T>(collectionToConvert: Collection<T>): Map<string, T> => {\r\n    const dataAsMap = new Map<string, T>();\r\n    Object.keys(collectionToConvert).forEach(key => dataAsMap.set(key, collectionToConvert[key]));\r\n    return dataAsMap;\r\n};\r\n\r\nexport const convertMapToCollection = <T>(mapToConvert: Map<string, T>): Collection<T> => {\r\n    const dataAsCollection: Collection<T> = {};\r\n    mapToConvert.forEach((data, key) => dataAsCollection[key] = data);\r\n    return dataAsCollection;\r\n};\r\n","import { cloneDeep } from 'lodash';\r\nimport randomnItem from 'random-item';\r\nimport { ALPHABET_WITHOUT_QXY } from '../constants/game.constant';\r\nimport { Collection } from '../models/collection.interface';\r\nimport { PlayerInput } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { GameResultForPlayer, GameRound, GameRoundEvaluation, PlayerInputEvaluation } from './../models/game.interface';\r\nimport { createAndFillArray } from './general.utils';\r\n\r\n/**\r\n* Returns an array of unique letters. The number of letters is defined by the parameter numberOfLetters.\r\n* If the second argument is not provided, then the standard alphabet (excluding Q, X and Y) is used.\r\n*/\r\nexport const getRandomnLetters = (numberOfLetters: number, possibleLetters = ALPHABET_WITHOUT_QXY): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToRandomnlySelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToRandomnlySelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToRandomnlySelectFrom = lettersToRandomnlySelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\nexport const getPlayersInAlphabeticalOrder = (players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    let playerInfoArray = Array.from(players).map(data => data[1]);\r\n    return playerInfoArray.sort((a, b) => {\r\n        if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\r\n        if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\r\n        return 0;\r\n    });\r\n}\r\n\r\n/**\r\n * Returns an array of PlayerInput objects with empty strings and valid set to true.\r\n */\r\nexport const getEmptyRoundInputs = (numberOfInputs: number): PlayerInput[] => {\r\n    return createAndFillArray<PlayerInput>(numberOfInputs, { text: '', valid: true });\r\n}\r\n\r\n /**\r\n * Checks each PlayerInput object whether it contains text.\r\n * If text string is empty, valid is set to false, otherwise to true.\r\n */\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(_ => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfMarkedAsInvalid = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\n/**\r\n * Returns the players that marked the input as invalid in alphabetical order. Parameters:\r\n * - evaluations: Evaluations of all players for one player's input for one category.\r\n * - players: All players taking part in the running game of \"Stadt-Land-Fluss\".\r\n */\r\nexport const getRejectingPlayers = (evaluations: PlayerInputEvaluation, players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const rejectingPlayers = new Map<string, PlayerInfo>();\r\n    evaluations.forEach((markedAsValid, playerId) => {\r\n        if (!markedAsValid) {\r\n            const playerInfo = players.get(playerId);\r\n            if (playerInfo) {\r\n                rejectingPlayers.set(playerId, playerInfo);\r\n            }\r\n        }\r\n    });\r\n    return getPlayersInAlphabeticalOrder(rejectingPlayers);;\r\n};\r\n\r\nexport const processPlayerInputEvaluations = (\r\n    gameRound: GameRound, roundEvaluation: GameRoundEvaluation, minNumberOfInvalids: number\r\n): GameRound => {\r\n    const evaluatedGameRound = cloneDeep(gameRound);\r\n    evaluatedGameRound.forEach((playerInputs, playerId) => {\r\n        const evaluations = roundEvaluation.get(playerId) as PlayerInputEvaluation[];\r\n        for (let i = 0; i < playerInputs.length; i++) {\r\n            // Only process evaluations for inputs that were not\r\n            // already marked as invalid because of being empty strings.\r\n            if (playerInputs[i].valid) {\r\n                playerInputs[i].valid = getNumberOfInvalids(evaluations[i]) < minNumberOfInvalids;\r\n            }\r\n        }\r\n    });\r\n    return evaluatedGameRound;\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: Collection<GameResultForPlayer> = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => input.valid ? total + 1 : total, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n}\r\n\r\nexport const shouldUserRespondToRequestGameDataMessage = (user: PlayerInfo, allPlayers: Map<string, PlayerInfo>, requestingPlayerId: string): boolean => {\r\n    // User should not respond to their own message.\r\n    if (user.id === requestingPlayerId) { return false; }\r\n    // If user is admin, then they should respond to the message.\r\n    if (user.isAdmin) { return true; }\r\n    // If the requesting user is the admin, then an algorithm determines who of\r\n    // the remaining players is the one to respond to the admin's message.\r\n    const requestingPlayerInfo = allPlayers.get(requestingPlayerId);\r\n    if (requestingPlayerInfo && requestingPlayerInfo.isAdmin) {\r\n        const playersWithoutRequestingPlayer = cloneDeep(allPlayers);\r\n        playersWithoutRequestingPlayer.delete(requestingPlayerId);\r\n        const playersSortedById = Array.from(playersWithoutRequestingPlayer).map(data => data[1]).sort((a, b) => {\r\n            if (a.id < b.id) { return -1; }\r\n            if (a.id > b.id) { return 1; }\r\n            return 0;\r\n        });\r\n        return playersSortedById[0].id === user.id;\r\n    }\r\n    return false;\r\n};\r\n","import { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\n\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { GameConfig, GameResultForPlayer } from '../../models/game.interface';\r\nimport { AppAction, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { calculateGameResults } from '../../utils/game.utils';\r\nimport { makePluralIfCountIsNotOne } from '../../utils/general.utils';\r\n\r\ninterface GameResultsDispatchProps {\r\n    onResetAppState: () => void;\r\n}\r\ninterface GameResultsProps extends AppState, GameResultsDispatchProps, RouterProps { }\r\ninterface GameResultsState {\r\n    gameResults: GameResultForPlayer[];\r\n}\r\n\r\nclass GameResults extends Component<GameResultsProps, GameResultsState> {\r\n    public state: GameResultsState = { gameResults: [] };\r\n\r\n    public render() {\r\n        if (this.props.gameRounds === null) { return null; }\r\n        const gameConfig = this.props.gameConfig as GameConfig;\r\n        const mostPoints = Math.max(...this.state.gameResults.map(result => result.points));\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Ergebnis\"></SectionHeader>\r\n                    <List>\r\n                        {this.state.gameResults.map((result, index) => (\r\n                            <ListItem key={'results-for-player-' + index}>\r\n                                <ListItemIcon>\r\n                                    {this.getResultIcon(result.points === mostPoints)}\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary={result.playerName}\r\n                                    secondary={`${result.points} ${makePluralIfCountIsNotOne(result.points, 'Punkt', 'Punkte')}`}\r\n                                />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </div>\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiele-Settings\"></SectionHeader>\r\n                    <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                    <p>Buchstaben: {gameConfig.letters.join(', ')}</p>\r\n                    <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // If there are no allPlayers or gameRounds present in application state, then reroute user to dashboard.\r\n        if (this.props.allPlayers === null || this.props.gameRounds === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        this.setState({ gameResults: calculateGameResults(this.props.allPlayers, this.props.gameRounds) });\r\n    }\r\n\r\n    private getResultIcon = (isWinner: boolean): JSX.Element => {\r\n        return isWinner ? <StarIcon color=\"primary\" fontSize=\"large\" /> : <FaceIcon fontSize=\"large\" />;\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n        this.props.onResetAppState();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppState => state;\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): GameResultsDispatchProps => {\r\n    return {\r\n        onResetAppState: () => dispatch(resetAppState())\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults);\r\n","import { StoredRunningGameInfo } from '../models/game.interface';\r\nimport { StoredPlayerInfo } from '../models/player.interface';\r\nimport { APP_THEME_ID } from './../constants/themes.constant';\r\n\r\nconst APP_THEME_LS_KEY = 'SLF-APP-THEME';\r\nconst PLAYER_INFO_LS_KEY = 'SLF-PLAYER-INFO';\r\nconst RUNNING_GAME_INFO_LS_KEY = 'SLF-RUNNING-GAME-INFO';\r\n\r\nexport const getAppThemeIdFromLocalStorage = (): string | null =>  localStorage.getItem(APP_THEME_LS_KEY);\r\nexport const setAppThemeIdInLocalStorage = (appTheme: APP_THEME_ID) => localStorage.setItem(APP_THEME_LS_KEY, appTheme);\r\n\r\nexport const getPlayerInfoFromLocalStorage = (): StoredPlayerInfo | null => {\r\n    const storedData = localStorage.getItem(PLAYER_INFO_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n};\r\nexport const setPlayerInfoInLocalStorage = (data: StoredPlayerInfo) => localStorage.setItem(PLAYER_INFO_LS_KEY, JSON.stringify(data));\r\n\r\nexport const getRunningGameInfoFromLocalStorage = (): StoredRunningGameInfo | null => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_INFO_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n}\r\nexport const setRunningGameInfoInLocalStorage = (data: StoredRunningGameInfo) => localStorage.setItem(RUNNING_GAME_INFO_LS_KEY, JSON.stringify(data));\r\nexport const removeRunningGameInfoFromLocalStorage = () => localStorage.removeItem(RUNNING_GAME_INFO_LS_KEY);\r\n","import './JoinGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { convertDateToUnixTimestamp } from '../../utils/general.utils';\r\nimport { setPlayerInfoInLocalStorage, setRunningGameInfoInLocalStorage } from '../../utils/local-storage.utils';\r\n\r\ninterface JoinGamePropsFromStore {\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\ninterface JoinGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface JoinGameProps extends JoinGamePropsFromStore, JoinGameDispatchProps, RouteComponentProps { }\r\ninterface JoinGameState {\r\n    idInput: string;\r\n    nameInput: string;\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass JoinGame extends Component<JoinGameProps, JoinGameState> {\r\n    public state: JoinGameState = {\r\n        idInput: '',\r\n        nameInput: this.props.playerInfo ? this.props.playerInfo.name : '',\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const joinGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    autoFocus\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                />\r\n                <TextField\r\n                    name=\"idInput\"\r\n                    label=\"Spiel-ID\"\r\n                    value={this.state.idInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.idInput}\r\n                />\r\n                <div className=\"button-wrapper\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<DirectionsWalkIcon />}\r\n                    >Beitreten</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiel beitreten\"></SectionHeader>\r\n                    {joinGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        if (query.has('id')) {\r\n            this.setState({ idInput: query.get('id') as string });\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: JoinGameProps) {\r\n        if (this.props.playerInfo && this.props.playerInfo !== prevProps.playerInfo) {\r\n            this.setState({ nameInput: this.props.playerInfo.name });\r\n        }\r\n    }\r\n\r\n    private handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value } as any);\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (this.state.idInput && this.state.nameInput.trim()) {\r\n            this.joinGame();\r\n        } else {\r\n            this.setState({ nameInput: this.state.nameInput.trim(), validateInputs: true });\r\n        }\r\n    }\r\n\r\n    private joinGame = () => {\r\n        const playerInfo = this.props.playerInfo as PlayerInfo;\r\n        const idCreationTimestamp = this.props.playerIdCreationTimestamp\r\n        const { idInput, nameInput } = this.state;\r\n        setPlayerInfoInLocalStorage({ id: playerInfo.id, idCreationTimestamp, name: nameInput.trim() });\r\n        setRunningGameInfoInLocalStorage({ gameId: idInput, idCreationTimestamp: convertDateToUnixTimestamp(new Date()), isPlayerAdmin: false });\r\n        this.props.onSetGameData({\r\n            gameConfig: null,\r\n            gameId: idInput,\r\n            playerInfo: {\r\n                id: playerInfo.id,\r\n                isAdmin: false,\r\n                isRejoiningGame: false,\r\n                name: nameInput.trim()\r\n            }\r\n        });\r\n        this.props.history.push('/play');\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): JoinGamePropsFromStore => {\r\n    return {\r\n        playerIdCreationTimestamp: state.playerIdCreationTimestamp,\r\n        playerInfo: state.playerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): JoinGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => dispatch(setDataForNewGame(payload))\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinGame);\r\n","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    IconButton,\r\n    TextField,\r\n    Tooltip,\r\n} from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport React, { FormEvent, useState } from 'react';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        lessPadding: {\r\n            padding: '0.375rem 0.5rem'\r\n        },\r\n        dialog: {\r\n            minWidth: '20rem'\r\n        }\r\n    }),\r\n);\r\n\r\nexport interface CustomCategoryDialogProps {\r\n    open: boolean;\r\n    onClose: (newCategory: string | null) => void;\r\n}\r\nconst CustomCategoryDialog: React.FunctionComponent<CustomCategoryDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { onClose, open } = props;\r\n    const [categoryInput, setCategoryInput] = useState('');\r\n    const [validateInputs, setValidateInputs] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        onClose(null);\r\n    };\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const trimmedCategoryInput = categoryInput.trim();\r\n        if (trimmedCategoryInput !== '') {\r\n            setCategoryInput('');\r\n            setValidateInputs(false);\r\n            onClose(trimmedCategoryInput);\r\n        } else {\r\n            setCategoryInput('');\r\n            setValidateInputs(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <form onSubmit={handleSubmit} className={classes.dialog} noValidate autoComplete=\"off\">\r\n                <DialogContent>\r\n                    <DialogContentText>Kategorie hinzufügen</DialogContentText>\r\n                    <TextField\r\n                        id=\"new-category-input\"\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        required\r\n                        value={categoryInput}\r\n                        error={validateInputs && !categoryInput}\r\n                        onChange={event => setCategoryInput(event.target.value)}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={handleClose}\r\n                    >Abbrechen</Button>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                    >Hinzufügen</Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\ninterface AddCustomCategoryProps {\r\n    addCustomCategory: (newCategory: string) => any;\r\n}\r\nconst AddCustomCategory: React.FunctionComponent<AddCustomCategoryProps> = props => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = (newCategory: string | null) => {\r\n        setOpen(false);\r\n        if (newCategory) {\r\n            props.addCustomCategory(newCategory);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Tooltip\r\n                title=\"Kategorie hinzufügen\"\r\n                placement=\"right\"\r\n            >\r\n                <IconButton\r\n                    className={classes.lessPadding}\r\n                    aria-label=\"Kategorie hinzufügen\"\r\n                    onClick={() => setOpen(true)}\r\n                >\r\n                    <AddCircleOutlineIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <CustomCategoryDialog open={open} onClose={newCategory => handleClose(newCategory)} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AddCustomCategory;\r\n","import './NewGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport AddCustomCategory from '../../components/AddCustomCategory/AddCustomCategory';\r\nimport ChipsArray, { ChipType } from '../../components/ChipsArray/ChipsArray';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport {\r\n    AVAILABLE_CATEGORIES,\r\n    DEFAULT_NUMBER_OF_ROUNDS,\r\n    MAX_NUMBER_OF_ROUNDS,\r\n    MIN_NUMBER_OF_ROUNDS,\r\n    STANDARD_CATEGORIES,\r\n} from '../../constants/game.constant';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\nimport { convertDateToUnixTimestamp } from '../../utils/general.utils';\r\nimport { setPlayerInfoInLocalStorage, setRunningGameInfoInLocalStorage } from '../../utils/local-storage.utils';\r\n\r\nenum CategoryArray {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\ninterface NewGamePropsFromStore {\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\ninterface NewGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface NewGameProps extends NewGamePropsFromStore, NewGameDispatchProps, RouteComponentProps { }\r\ninterface NewGameState {\r\n    availableCategories: string[];\r\n    nameInput: string;\r\n    numberOfRoundsInput: number;\r\n    selectedCategories: string[];\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass NewGame extends Component<NewGameProps, NewGameState> {\r\n    public state: NewGameState = {\r\n        availableCategories: AVAILABLE_CATEGORIES,\r\n        nameInput: this.props.playerInfo ? this.props.playerInfo.name : '',\r\n        numberOfRoundsInput: DEFAULT_NUMBER_OF_ROUNDS,\r\n        selectedCategories: STANDARD_CATEGORIES,\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const numberOfRoundsInputLabel = `Anzahl Runden (${MIN_NUMBER_OF_ROUNDS}-${MAX_NUMBER_OF_ROUNDS})`;\r\n        const newGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername (max. 20 Zeichen)\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleNameInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    autoFocus\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                    inputProps={{ 'maxLength': '20' }}\r\n                />\r\n                <TextField\r\n                    name=\"numberOfRoundsInput\"\r\n                    label={numberOfRoundsInputLabel}\r\n                    type=\"number\"\r\n                    value={this.state.numberOfRoundsInput}\r\n                    onChange={this.handleNumberOfRoundsInputChange}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    inputProps={{ 'min': MIN_NUMBER_OF_ROUNDS, 'max': MAX_NUMBER_OF_ROUNDS }}\r\n                />\r\n                <p className=\"category-array-label\">Ausgewählte Kategorien (mind. 3):</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.selectedCategories}\r\n                    chipType={ChipType.selected}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.selected)}\r\n                />\r\n                <p className=\"category-array-label\">Verfügbare Kategorien:</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.availableCategories}\r\n                    chipType={ChipType.available}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.available)}\r\n                >\r\n                    <AddCustomCategory addCustomCategory={this.addCustomCategory} />\r\n                </ChipsArray>\r\n                <div className=\"button-wrapper add-margin-top\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<AddCircleIcon />}\r\n                    >Spiel erstellen</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Neues Spiel\" />\r\n                    {newGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: NewGameProps) {\r\n        if (this.props.playerInfo && this.props.playerInfo !== prevProps.playerInfo) {\r\n            this.setState({ nameInput: this.props.playerInfo.name });\r\n        }\r\n    }\r\n\r\n    private handleNameInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ nameInput: event.target.value });\r\n    }\r\n\r\n    private handleNumberOfRoundsInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +event.target.value;\r\n        if (value >= MIN_NUMBER_OF_ROUNDS && value <= MAX_NUMBER_OF_ROUNDS) {\r\n            this.setState({ numberOfRoundsInput: value });\r\n        }\r\n    }\r\n\r\n    private updateCategoryArrays = (chipToRemove: string, removeFromArray: CategoryArray) => {\r\n        let newSelectedCategories: string[];\r\n        let newAvailableCategories: string[];\r\n        if (removeFromArray === CategoryArray.selected) {\r\n            newSelectedCategories = this.state.selectedCategories.filter(category => category !== chipToRemove);\r\n            newAvailableCategories = [...this.state.availableCategories];\r\n            newAvailableCategories.push(chipToRemove);\r\n        } else {\r\n            newAvailableCategories = this.state.availableCategories.filter(category => category !== chipToRemove);\r\n            newSelectedCategories = [...this.state.selectedCategories];\r\n            newSelectedCategories.push(chipToRemove);\r\n        }\r\n        this.setState({\r\n            availableCategories: newAvailableCategories,\r\n            selectedCategories: newSelectedCategories\r\n        });\r\n    }\r\n\r\n    private addCustomCategory = (newCategory: string) => {\r\n        this.setState({ availableCategories: [...this.state.availableCategories, newCategory] });\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (this.state.nameInput.trim() && this.state.selectedCategories.length >= 3) {\r\n            this.startNewGame();\r\n        } else {\r\n            this.setState({ nameInput: this.state.nameInput.trim(), validateInputs: true });\r\n        }\r\n    }\r\n\r\n    private startNewGame = () => {\r\n        const playerInfo = this.props.playerInfo as PlayerInfo;\r\n        const idCreationTimestamp = this.props.playerIdCreationTimestamp\r\n        const { nameInput, numberOfRoundsInput, selectedCategories } = this.state;\r\n        setPlayerInfoInLocalStorage({ id: playerInfo.id, idCreationTimestamp, name: nameInput.trim() });\r\n        const gameId = uuidv4(); // ⇨ e.g. '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n        setRunningGameInfoInLocalStorage({ gameId, idCreationTimestamp: convertDateToUnixTimestamp(new Date()), isPlayerAdmin: true });\r\n        this.props.onSetGameData({\r\n            gameConfig: {\r\n                categories: selectedCategories,\r\n                letters: getRandomnLetters(numberOfRoundsInput),\r\n                numberOfRounds: numberOfRoundsInput\r\n            },\r\n            gameId,\r\n            playerInfo: {\r\n                id: playerInfo.id,\r\n                isAdmin: true,\r\n                isRejoiningGame: false,\r\n                name: nameInput.trim()\r\n            }\r\n        });\r\n        this.props.history.push('/play');\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): NewGamePropsFromStore => {\r\n    return {\r\n        playerIdCreationTimestamp: state.playerIdCreationTimestamp,\r\n        playerInfo: state.playerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): NewGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => dispatch(setDataForNewGame(payload))\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewGame);\r\n","import { GamePhase } from '../constants/game.constant';\r\nimport { Collection } from './collection.interface';\r\nimport { EvaluationOfPlayerInput, GameConfig, PlayerInput } from './game.interface';\r\nimport { PlayerInfo } from './player.interface';\r\n\r\nexport interface PubNubUserState {\r\n    gameConfig?: GameConfig;\r\n    playerInfo: PlayerInfo;\r\n}\r\n\r\nexport enum PubNubMessageType {\r\n    startGame = 'startGame',\r\n    roundFinished = 'roundFinished',\r\n    currentRoundInputs = 'currentRoundInputs',\r\n    evaluationOfPlayerInput = 'evaluationOfPlayerInput',\r\n    evaluationFinished = 'evaluationFinished',\r\n    kickPlayer = 'kickPlayer',\r\n    requestGameData = 'requestGameData',\r\n    dataForCurrentGame = 'dataForCurrentGame'\r\n}\r\n\r\nexport interface PubNubMessage {\r\n    type: PubNubMessageType;\r\n    payload?: any;\r\n}\r\n\r\nexport class PubNubCurrentRoundInputsMessage {\r\n    constructor(private payload: PlayerInput[]) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.currentRoundInputs,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport class PubNubEvaluationOfPlayerInputMessage {\r\n    constructor(private payload: EvaluationOfPlayerInput) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.evaluationOfPlayerInput,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport class PubNubKickPlayerMessage {\r\n    constructor(private payload: string) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.kickPlayer,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport interface PubNubDataForCurrentGameMessagePayload {\r\n    allPlayers: Collection<PlayerInfo>;\r\n    currentPhase: GamePhase;\r\n    currentRound: number;\r\n    currentRoundEvaluation: Collection<Collection<boolean>[]>;\r\n    gameConfig: GameConfig;\r\n    gameRounds: Collection<PlayerInput[]>[];\r\n    playersThatFinishedEvaluation: Collection<boolean>;\r\n    requestingPlayerId: string;\r\n}\r\nexport class PubNubDataForCurrentGameMessage {\r\n    constructor(private payload: PubNubDataForCurrentGameMessagePayload) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.dataForCurrentGame,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    IconButton,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Menu,\r\n    MenuItem,\r\n} from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport React, { useState } from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        adminPanel: {\r\n            position: 'absolute',\r\n            top: '1rem',\r\n            right: '1rem'\r\n        },\r\n        menuButton: {\r\n            background: 'radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,0.5) 35%, rgba(255,255,255,0) 60%);'\r\n        },\r\n        dialogContent: {\r\n            maxWidth: '23rem'\r\n        },\r\n        dialogContentText: {\r\n            color: 'black'\r\n        }\r\n    }),\r\n);\r\n\r\nexport interface KickUserDialogProps {\r\n    open: boolean;\r\n    playerToBeKicked: PlayerInfo | null;\r\n    onClose: (kickPlayer: boolean) => void;\r\n}\r\nconst KickUserDialog: React.FunctionComponent<KickUserDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { onClose, open } = props;\r\n\r\n    return (\r\n        <Dialog onClose={() => onClose(false)} open={open}>\r\n            <DialogContent classes={{ root: classes.dialogContent }}>\r\n                {props.playerToBeKicked ? (\r\n                    <DialogContentText classes={{ root: classes.dialogContentText }}>\r\n                        \"With great power comes great responsibility\" – Willst du {props.playerToBeKicked.name} wirklich aus dem Spiel werfen?\r\n                    </DialogContentText>\r\n                ) : null}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    type=\"button\"\r\n                    onClick={() => onClose(false)}\r\n                >Abbrechen</Button>\r\n                <Button\r\n                    type=\"button\"\r\n                    color=\"primary\"\r\n                    onClick={() => onClose(true)}\r\n                >Rauswerfen</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\ninterface AdminPanelProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    kickPlayer: (playerId: string) => void;\r\n}\r\nconst AdminPanel: React.FunctionComponent<AdminPanelProps> = props => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [playerToBeKicked, setPlayerToBeKicked] = useState<PlayerInfo | null>(null);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleMenuItemClick = (selectedPlayer: PlayerInfo) => {\r\n        setAnchorEl(null);\r\n        setPlayerToBeKicked(selectedPlayer);\r\n        setOpenDialog(true);\r\n    };\r\n    const handleAdminPanelClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleKickUserDialogClose = (kickPlayer: boolean) => {\r\n        setOpenDialog(false);\r\n        if (kickPlayer && playerToBeKicked) {\r\n            props.kickPlayer(playerToBeKicked.id);\r\n        }\r\n    };\r\n\r\n    const otherPlayers = new Map<string, PlayerInfo>();\r\n    props.allPlayers.forEach((playerInfo, playerId) => {\r\n        if (!playerInfo.isAdmin) { otherPlayers.set(playerId, playerInfo); }\r\n    });\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(otherPlayers);\r\n    return (\r\n        <div className={classes.adminPanel}>\r\n            <IconButton\r\n                className={classes.menuButton}\r\n                title=\"Admin-Panel öffnen\"\r\n                aria-label=\"Admin-Panel öffnen\"\r\n                aria-controls=\"admin-panel\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n            >\r\n                <SettingsIcon color=\"primary\" />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"admin-panel\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleAdminPanelClose}\r\n            >\r\n                {sortedPlayers.map((playerInfo, playerIndex) => (\r\n                    <MenuItem\r\n                        key={`menu-item-delete-player-${playerIndex}`}\r\n                        title={`${playerInfo.name} aus dem Spiel werfen`}\r\n                        onClick={() => handleMenuItemClick(playerInfo)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <CancelIcon color=\"secondary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={playerInfo.name} />\r\n                    </MenuItem>\r\n                ))}\r\n            </Menu>\r\n            <KickUserDialog\r\n                open={openDialog}\r\n                playerToBeKicked={playerToBeKicked}\r\n                onClose={handleKickUserDialogClose}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminPanel;\r\n","import './LetterAnimation.css';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n    ALPHABET_WITHOUT_QXY,\r\n    LETTER_ANIMATION_LETTER_COUNT,\r\n    LETTER_ANIMATION_REDRAW_SPEED,\r\n} from '../../constants/game.constant';\r\nimport { AppTheme, AppThemes } from '../../constants/themes.constant';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\n\r\n// Thanks to Georgi Nikoloff for the great animation source code: https://codepen.io/gbnikolov/pen/jEqQdG\r\n// I rewrote the code in Typescript, refactored it a bit and adapted it to the needs of this application.\r\n\r\nclass Particle {\r\n    private radius = 3.5;\r\n\r\n    constructor(\r\n        public x: number,\r\n        public y: number\r\n    ) { }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.translate(this.x, this.y);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, this.radius, this.radius);\r\n        ctx.restore();\r\n    };\r\n}\r\n\r\nclass ParticleAlphabet {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private currentPos: number;\r\n    private width: number;\r\n    private height: number;\r\n    private particlePositions: any[];\r\n    private particles: Particle[];\r\n    private tmpCanvas: HTMLCanvasElement;\r\n    private tmpCtx: CanvasRenderingContext2D;\r\n    private time: string;\r\n    private counter = 0;\r\n    private myInterval: any;\r\n    private activeTheme: AppTheme;\r\n\r\n    constructor(\r\n        public letters: string[],\r\n        public callbackWhenAnimationDone: () => void\r\n    ) {\r\n        this.canvas = document.querySelector('#letter-animation-canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        const mainElement = document.querySelector('main') as HTMLElement;\r\n        this.activeTheme = AppThemes.find(theme => mainElement.classList.contains(theme.className)) as AppTheme;\r\n        this.width = mainElement.offsetWidth;\r\n        this.height = mainElement.offsetHeight;\r\n        this.particlePositions = [];\r\n        this.particles = [];\r\n        this.tmpCanvas = document.createElement('canvas');\r\n        this.tmpCtx = this.tmpCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.particlePositions = [];\r\n        this.currentPos = 0;\r\n        this.time = '';\r\n    }\r\n\r\n    public init() {\r\n        this.myInterval = setInterval(() => {\r\n            if (this.counter < this.letters.length) {\r\n                this.changeLetter();\r\n                this.getPixels(this.tmpCanvas, this.tmpCtx);\r\n            }\r\n            this.counter++;\r\n            if (this.counter > this.letters.length + 1) {\r\n                clearInterval(this.myInterval);\r\n                this.callbackWhenAnimationDone();\r\n            }\r\n        }, LETTER_ANIMATION_REDRAW_SPEED);\r\n\r\n        this.makeParticles(1000);\r\n        this.animate();\r\n    }\r\n\r\n    private changeLetter() {\r\n        this.time = this.letters[this.currentPos];\r\n        this.currentPos++;\r\n        if (this.currentPos >= this.letters.length) {\r\n            this.currentPos = 0;\r\n        }\r\n    }\r\n\r\n    private makeParticles(num: number) {\r\n        for (var i = 0; i <= num; i++) {\r\n            const x = this.width / 2 + Math.random() * 400 - 200;\r\n            const y = this.height / 2 + Math.random() * 400 - 200;\r\n            this.particles.push(new Particle(x, y));\r\n        }\r\n    }\r\n\r\n    private getPixels(canvas: any, ctx: any) {\r\n        const keyword = this.time,\r\n            gridX = 6,\r\n            gridY = 6;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        ctx.fillStyle = 'red';\r\n        ctx.font = 'italic bold 330px Noto Serif';\r\n        ctx.fillText(keyword, canvas.width / 2 - ctx.measureText(keyword).width / 2, canvas.height / 2 + 100);\r\n        const idata = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const buffer32 = new Uint32Array(idata.data.buffer);\r\n        if (this.particlePositions.length > 0) this.particlePositions = [];\r\n        for (let y = 0; y < canvas.height; y += gridY) {\r\n            for (let x = 0; x < canvas.width; x += gridX) {\r\n                if (buffer32[y * canvas.width + x]) {\r\n                    this.particlePositions.push({ x: x, y: y });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private animateParticles() {\r\n        let p, pPos;\r\n        for (let i = 0, num = this.particles.length; i < num; i++) {\r\n            p = this.particles[i];\r\n            pPos = this.particlePositions[i];\r\n            if (this.particles.indexOf(p) === this.particlePositions.indexOf(pPos)) {\r\n                p.x += (pPos.x - p.x) * .3;\r\n                p.y += (pPos.y - p.y) * .3;\r\n                p.draw(this.ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private animate = () => {\r\n        requestAnimationFrame(this.animate);\r\n        this.ctx.fillStyle = this.activeTheme.animationBackgroundColor;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        this.animateParticles();\r\n    }\r\n}\r\n\r\ninterface LetterAnimationProps {\r\n    letterToUnveil: string;\r\n    callbackWhenAnimationDone: () => void;\r\n}\r\nexport const LetterAnimation: React.FunctionComponent<LetterAnimationProps> = props => {\r\n    const lettersToUse = [...ALPHABET_WITHOUT_QXY].filter(letter => letter !== props.letterToUnveil);\r\n    const lettersForAnimation = [...getRandomnLetters(LETTER_ANIMATION_LETTER_COUNT - 1, lettersToUse), props.letterToUnveil];\r\n    useEffect(() => {\r\n        const particleAlphabet = new ParticleAlphabet(lettersForAnimation, props.callbackWhenAnimationDone);\r\n        particleAlphabet.init();\r\n    });\r\n    return (\r\n        <canvas id=\"letter-animation-canvas\"></canvas>\r\n    );\r\n}\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst loadingSpinnerSize = 60;\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        loadingScreen: {\r\n            position: 'absolute',\r\n            top: '0',\r\n            left: '0',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n        },\r\n        centralContent: {\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)'\r\n        },\r\n        text: {\r\n            marginBlockStart: '0',\r\n            color: 'white',\r\n            fontSize: '1.5rem',\r\n            fontWeight: 'bold',\r\n            textAlign: 'center'\r\n        },\r\n        loadingSpinner: {\r\n            margin: '0 auto',\r\n            width: loadingSpinnerSize + 'px'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface LoadingScreenProps {\r\n    message: string | null;\r\n}\r\n\r\nconst LoadingScreen: React.FunctionComponent<LoadingScreenProps> = props => {\r\n    const classes = useStyles();\r\n    const messageElement = props.message ? (<p className={classes.text}>{props.message}</p>) : null;\r\n    return (\r\n        <div className={classes.loadingScreen}>\r\n            <div className={classes.centralContent}>\r\n                {messageElement}\r\n                <div className={classes.loadingSpinner}>\r\n                    <CircularProgress color=\"secondary\" size={loadingSpinnerSize} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        centerContent: {\r\n            display: 'flex',\r\n            justifyContent: 'center'\r\n        },\r\n        chip: {\r\n            height: '3rem',\r\n            marginTop: '1rem',\r\n            borderRadius: '5px',\r\n            fontSize: '1.2rem',\r\n            boxShadow: '0 2px 4px rgba(0,0,0,.501961)'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface GameRoundChipProps {\r\n    currentLetter: string;\r\n    currentRound: number;\r\n    numberOfRounds: number;\r\n}\r\n\r\nconst GameRoundChip: React.FunctionComponent<GameRoundChipProps> = props => {\r\n    const classes = useStyles();\r\n    const { currentLetter, currentRound, numberOfRounds } = props;\r\n    return (\r\n        <div className={classes.centerContent}>\r\n            <Chip\r\n                color=\"primary\"\r\n                icon={<EmojiObjectsIcon />}\r\n                label={`Runde ${currentRound} von ${numberOfRounds}: „${currentLetter}“`}\r\n                className={classes.chip}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameRoundChip;\r\n","import './PhaseEvaluateRound.css';\r\nimport { Badge, createStyles, IconButton, InputAdornment, TextField, Theme, Tooltip, withStyles } from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ThumbDownRoundedIcon from '@material-ui/icons/ThumbDownRounded';\r\nimport React from 'react';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    getMinNumberOfMarkedAsInvalid as getMinNumberOfNecessaryMarkedAsInvalid,\r\n    getNumberOfInvalids,\r\n    getPlayersInAlphabeticalOrder,\r\n    getRejectingPlayers,\r\n} from '../../utils/game.utils';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\nconst StyledBadge = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        badge: {\r\n            right: -3,\r\n            top: '100%',\r\n            border: `2px solid ${theme.palette.background.paper}`,\r\n            padding: '0 4px',\r\n        },\r\n    }),\r\n)(Badge);\r\n\r\ninterface PhaseEvaluateRoundProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n    updateEvaluationOfPlayerInput: (newEvaluation: EvaluationOfPlayerInput) => void;\r\n    sendEvaluationFinishedMessage: () => void;\r\n}\r\nconst PhaseEvaluateRound: React.FunctionComponent<PhaseEvaluateRoundProps> = props => {\r\n    const { allPlayers, currentRound, currentRoundEvaluation, gameConfig, playerInfo } = props;\r\n    const minNumberOfInvalids = getMinNumberOfNecessaryMarkedAsInvalid(allPlayers.size);\r\n    // Retrieve data for finished round; e.g. if current round is 1, then data is at index 0.\r\n    const finishedGameRound = props.gameRounds[currentRound - 1];\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(allPlayers);\r\n\r\n   /**\r\n     * Toggles the user's evaluation of a player's input for a category.\r\n     */\r\n    const handleEvaluationButtonClick = (\r\n        categoryIndex: number, evaluatedPlayerId: string, currentEvaluation: boolean\r\n    ) => {\r\n        props.updateEvaluationOfPlayerInput({ categoryIndex, evaluatedPlayerId, markedAsValid: !currentEvaluation });\r\n    }\r\n    /**\r\n     * Displays a button that allows the user to reject a player's input for a category.\r\n     * A badge attached to the button shows the total number of rejections. If the player\r\n     * didn't type any text, then a not clickable thumb down icon is shown instead,\r\n     * which indicates that the input was automatically rejected by the application.\r\n     */\r\n    const createEvaluationButton = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const allEvaluationsForPlayer = currentRoundEvaluation.get(evaluatedPlayer.id) as PlayerInputEvaluation[];\r\n        const evaluationForCategory = allEvaluationsForPlayer[categoryIndex];\r\n        const isInputAcceptedByUser = evaluationForCategory.get(playerInfo.id) as boolean;\r\n        const rejectingPlayers = getRejectingPlayers(evaluationForCategory, allPlayers);\r\n        const tooltipText = rejectingPlayers.length === 0 ? 'Keine Ablehnungen' :\r\n            'Abgelehnt von ' + rejectingPlayers.map(p => p.name).join(', ');\r\n        const hasPlayerTypedText = !!(finishedGameRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n        return (\r\n            <div\r\n                key={`slf-evaluation-button-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-evaluation-button-wrapper\"\r\n            >\r\n                {hasPlayerTypedText ? (\r\n                    <Tooltip\r\n                        key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}`}\r\n                        title={tooltipText}\r\n                    >\r\n                        <IconButton\r\n                            className=\"slf-evaluation-button\"\r\n                            color={isInputAcceptedByUser ? 'default' : 'secondary'}\r\n                            onClick={() => handleEvaluationButtonClick(categoryIndex, evaluatedPlayer.id, isInputAcceptedByUser)}\r\n                        >\r\n                            <StyledBadge badgeContent={rejectingPlayers.length} color=\"secondary\">\r\n                                <ThumbDownRoundedIcon />\r\n                            </StyledBadge>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                ) : (\r\n                        <Tooltip\r\n                            key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}`}\r\n                            title=\"Automatisch abgelehnt\"\r\n                        >\r\n                            <ThumbDownRoundedIcon color=\"secondary\" className=\"slf-auto-reject-icon\" />\r\n                        </Tooltip>\r\n                    )}\r\n            </div>\r\n        );\r\n    }\r\n    /**\r\n     * Creates a search link for a specific category and player input.\r\n     */\r\n    const createSearchLink = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const category = gameConfig.categories[categoryIndex];\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const playerInput = (finishedGameRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n        const searchLink = `https://www.ecosia.org/search?q=${encodeURIComponent(category)}+${encodeURIComponent(playerInput)}`\r\n        return (\r\n            <div\r\n                key={`slf-search-link-container-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-search-link-container\"\r\n            >\r\n                <a\r\n                    key={`slf-evaluation-search-link-${categoryIndex}-${indexInSortedPlayers}`}\r\n                    className=\"slf-evaluation-search-link\"\r\n                    href={searchLink}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    aria-label=\"Begriff nachschlagen\"\r\n                >\r\n                    <Tooltip\r\n                        title=\"Begriff nachschlagen\"\r\n                        placement=\"right\"\r\n                    >\r\n                        <SearchIcon color=\"primary\" />\r\n                    </Tooltip>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n    /**\r\n     * Creates a text input showing the player's input for a category. If the player input isn't an empty string,\r\n     * then on the right side of the textfield a search link and clickable evaluation button are displayed.\r\n     */\r\n    const playerEvaluationElements = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const hasPlayerTypedText = !!(finishedGameRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n        const isInputValid = getNumberOfInvalids((currentRoundEvaluation.get(evaluatedPlayer.id) as PlayerInputEvaluation[])[categoryIndex]) < minNumberOfInvalids;\r\n        return (\r\n            <div\r\n                key={`slf-evaluation-textfield-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-evaluation-textfield-wrapper\"\r\n            >\r\n                <TextField\r\n                    key={'slf-textfield-category-no-' + categoryIndex + '-player-' + indexInSortedPlayers}\r\n                    value={(finishedGameRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">{evaluatedPlayer.name}:</InputAdornment>,\r\n                        className: !hasPlayerTypedText || !isInputValid ? 'invalid-player-input' : ''\r\n                    }}\r\n                />\r\n                {hasPlayerTypedText ? createSearchLink(categoryIndex, indexInSortedPlayers) : null}\r\n                {createEvaluationButton(categoryIndex, indexInSortedPlayers)}\r\n            </div>\r\n        );\r\n    }\r\n    /**\r\n     * Creates a section for each category of the current game. It displays the category in the header,\r\n     * followed by one textfield for each player showing their input for the finished round.\r\n     * If the input isn't empty, a search link and clickable evaluation button are displayed.\r\n     */\r\n    const createCategorySection = (category: string, categoryIndex: number): JSX.Element => (\r\n        <div\r\n            key={'slf-evaluation-for-category-no-' + categoryIndex}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            {sortedPlayers.map((_, indexInSortedPlayers) => playerEvaluationElements(categoryIndex, indexInSortedPlayers))}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip\r\n                currentLetter={currentLetter}\r\n                currentRound={currentRound}\r\n                numberOfRounds={gameConfig.numberOfRounds}\r\n            />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createCategorySection)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"secondary\"\r\n                    title=\"Akzeptieren\"\r\n                    aria-label=\"Akzeptieren\"\r\n                    onClick={() => props.sendEvaluationFinishedMessage()}\r\n                >\r\n                    <CheckCircleIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseEvaluateRound;\r\n","import { IconButton, InputAdornment, TextField } from '@material-ui/core';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { GameConfig, PlayerInput } from '../../models/game.interface';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseFillOutTextfieldsProps {\r\n    currentRound: number;\r\n    gameConfig: GameConfig;\r\n    gameRoundInputs: PlayerInput[];\r\n    updateCurrentRoundInputs: (newCurrentRoundInputs: PlayerInput[]) => void;\r\n    sendRoundFinishedMessage: () => void;\r\n}\r\n\r\nconst PhaseFillOutTextfields: React.FunctionComponent<PhaseFillOutTextfieldsProps> = props => {\r\n    const { currentRound, gameConfig, gameRoundInputs } = props;\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number) => {\r\n        const newGameRoundInputs = [...gameRoundInputs];\r\n        newGameRoundInputs[index] = { ...newGameRoundInputs[index], text: event.target.value };\r\n        props.updateCurrentRoundInputs(newGameRoundInputs);\r\n    };\r\n    const createTextfieldElement = (category: string, index: number): JSX.Element => (\r\n        <div\r\n            key={'slf-input-for-category-no-' + index}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            <TextField\r\n                value={gameRoundInputs[index].text}\r\n                onChange={event => handleInputChange(event, index)}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">{currentLetter}:</InputAdornment>\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip\r\n                currentLetter={currentLetter}\r\n                currentRound={currentRound}\r\n                numberOfRounds={gameConfig.numberOfRounds}\r\n            />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createTextfieldElement)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"secondary\"\r\n                    title=\"Abschicken\"\r\n                    aria-label=\"Abschicken\"\r\n                    onClick={() => props.sendRoundFinishedMessage()}\r\n                >\r\n                    <EmailIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseFillOutTextfields;\r\n","import './JoinGameLink.css';\r\nimport { IconButton, InputAdornment, OutlinedInput, Snackbar } from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport React from 'react';\r\nimport { copyToClipboard } from '../../utils/general.utils';\r\n\r\ninterface JoinGameLinkProps {\r\n    gameId: string;\r\n}\r\n\r\nexport const JoinGameLink: React.FunctionComponent<JoinGameLinkProps> = props => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClick = () => {\r\n        copyToClipboard(joinGameLink)\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const url = window.location.href;\r\n    // Cut off \"/play\" from the end of the url and add route plus game id.\r\n    const joinGameLink = url.slice(0, url.length - 5) + '/joingame?id=' + props.gameId;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"join-game-link-label\">Teile diesen Link mit Freunden:</p>\r\n            <OutlinedInput\r\n                name=\"idInput\"\r\n                value={joinGameLink}\r\n                className=\"app-form-input\"\r\n                disabled\r\n                fullWidth\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            title=\"Link kopieren\"\r\n                            aria-label=\"Link kopieren\"\r\n                            onClick={handleClick}\r\n                        >\r\n                            <FileCopyIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n            />\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={open}\r\n                autoHideDuration={1500}\r\n                onClose={handleClose}\r\n                message=\"Der Link wurde in Zwischenablage kopiert.\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport React from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface PlayerListProps {\r\n    players: Map<string, PlayerInfo>;\r\n}\r\nconst PlayerList: React.FunctionComponent<PlayerListProps> = props => {\r\n    const classes = useStyles();\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(props.players);\r\n    return (\r\n        <div className={classes.root}>\r\n            {sortedPlayers.map((playerInfo, index) => (\r\n                <Chip\r\n                    key={`player-name-${index}`}\r\n                    icon={<FaceIcon />}\r\n                    color=\"primary\"\r\n                    label={playerInfo.name}\r\n                    className={classes.chip}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerList;\r\n","import './PhaseWaitingToStart.css';\r\nimport { Button, Divider } from '@material-ui/core';\r\nimport PlayCircleFilled from '@material-ui/icons/PlayCircleFilled';\r\nimport React from 'react';\r\nimport { MIN_NUMBER_OF_PLAYERS } from '../../constants/game.constant';\r\nimport { GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport { JoinGameLink } from '../JoinGameLink/JoinGameLink';\r\nimport PlayerList from '../PlayerList/PlayerList';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseWaitingToStartProps {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string;\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    playerInfo: PlayerInfo;\r\n    sendMessage: (message: PubNubMessage) => void;\r\n}\r\n\r\nconst PhaseWaitingToStart: React.FunctionComponent<PhaseWaitingToStartProps> = props => {\r\n    const { gameId, allPlayers, playerInfo } = props;\r\n    const waitForGameStartElement = (\r\n        <p className=\"wait-for-start-animation\">Warte auf Spielbeginn <span>.</span><span>.</span><span>.</span></p>\r\n    );\r\n\r\n    const createGameSettingsElement = (): JSX.Element => {\r\n        const gameConfig = props.gameConfig as GameConfig;\r\n        return (\r\n            <React.Fragment>\r\n                <Divider />\r\n                <h3>Spiele-Settings:</h3>\r\n                <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const createStartGameButton = (): JSX.Element => {\r\n        return (\r\n            <div className=\"button-wrapper add-margin-top\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    startIcon={<PlayCircleFilled />}\r\n                    disabled={allPlayers.size < MIN_NUMBER_OF_PLAYERS}\r\n                    onClick={() => props.sendMessage({ type: PubNubMessageType.startGame })}\r\n                >Starten</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const createInvitePlayersElement = (): JSX.Element => {\r\n        return (\r\n            <div className=\"material-card-style\">\r\n                <JoinGameLink gameId={gameId as string} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"material-card-style\">\r\n                <SectionHeader showDivider={true} text=\"Gleich geht's los...\"></SectionHeader>\r\n                <div className=\"players-wrapper\">\r\n                    <h3>Mitspieler ({props.allPlayers.size}):</h3>\r\n                    <PlayerList players={props.allPlayers} />\r\n                </div>\r\n                {props.gameConfig ? createGameSettingsElement() : null}\r\n                <Divider />\r\n                {playerInfo.isAdmin ? createStartGameButton() : waitForGameStartElement}\r\n            </div>\r\n            {playerInfo.isAdmin ? createInvitePlayersElement() : null}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseWaitingToStart;\r\n","import Pubnub from 'pubnub';\r\nimport { usePubNub } from 'pubnub-react';\r\nimport React, { useEffect } from 'react';\r\nimport { GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubUserState } from '../../models/pub-nub-data.model';\r\n\r\ninterface PubNubEventHandlerProps {\r\n    gameChannel: string;\r\n    gameConfig: GameConfig | null;\r\n    playerInfo: PlayerInfo;\r\n    navigateToDashboard: () => void;\r\n    addPlayers: (...newPlayers: PubNubUserState[]) => void;\r\n    processPubNubMessage: (event: Pubnub.MessageEvent) => void;\r\n}\r\n\r\nconst PubNubEventHandler: React.FunctionComponent<PubNubEventHandlerProps> = props => {\r\n    const pubNubClient = usePubNub();\r\n\r\n    const setUserStateAndGetHereNowIfGameIsOpen = () => {\r\n        pubNubClient.history(\r\n            { channel: props.gameChannel, count: 10 },\r\n            (_, response) => {\r\n                // If a new user wants to join the game but the channel's history already includes messages, then the game\r\n                // has already started and user can't join. They get rerouted to the dashboard page by PlayGame component.\r\n                if (!props.playerInfo.isRejoiningGame && response.messages.length > 0) {\r\n                    props.navigateToDashboard();\r\n                    return;\r\n                }\r\n                // Only if player is joining game for the first time, set user state and retrieve hereNowData.\r\n                if (!props.playerInfo.isRejoiningGame) {\r\n                    setUserState();\r\n                    getHereNowData();\r\n                    // Safeguard against the possibility of two players joining exactly at the same time:\r\n                    // We call hereNowData again after 3 seconds, to make sure we get all player info.\r\n                    setTimeout(getHereNowData, 3000);\r\n                }\r\n            }\r\n        );\r\n    };\r\n    const setUserState = () => {\r\n        let newUserState: PubNubUserState;\r\n        if (props.playerInfo.isAdmin) {\r\n            newUserState = { gameConfig: props.gameConfig as GameConfig, playerInfo: props.playerInfo };\r\n        } else {\r\n            newUserState = { playerInfo: props.playerInfo };\r\n        }\r\n        // Set this user's state in game channel.\r\n        pubNubClient.setState({\r\n            channels: [props.gameChannel],\r\n            state: newUserState\r\n        });\r\n    };\r\n    const getHereNowData = () => {\r\n        pubNubClient.hereNow(\r\n            { channels: [props.gameChannel], includeUUIDs: true, includeState: true },\r\n            (_, response) => {\r\n                console.log('PubNub hereNow', response);\r\n                // If player tries to rejoin but they are the only player left in game channel, then the game \r\n                // is already over and the user gets rerouted to dashboard page by PlayGame component.\r\n                if (props.playerInfo.isRejoiningGame && response.totalOccupancy <= 1) {\r\n                    props.navigateToDashboard();\r\n                    return;\r\n                }\r\n                // Response includes states of players that joined before.\r\n                const dataForGameChannel = response.channels[props.gameChannel];\r\n                if (dataForGameChannel) {\r\n                    const pubNubUserStates: PubNubUserState[] = [];\r\n                    dataForGameChannel.occupants.forEach(occupant => {\r\n                        const userState = occupant.state as PubNubUserState;\r\n                        // Safeguard in case that a user's state should be missing or corrupted.\r\n                        if (!!userState && !!userState.playerInfo) {\r\n                            pubNubUserStates.push(userState);\r\n                        }\r\n                    });\r\n                    props.addPlayers(...pubNubUserStates);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const pubNubListeners: Pubnub.ListenerParameters = {\r\n            message: messageEvent => {\r\n                console.log('PubNub message event', messageEvent);\r\n                // Make sure that message is controlled game message with 'type' attribute.\r\n                if (messageEvent.message.type) {\r\n                    props.processPubNubMessage(messageEvent);\r\n                }\r\n            },\r\n            presence: presenceEvent => {\r\n                console.log('PubNub presence event', presenceEvent);\r\n                // Check for 'state-change' events and process state from new player.\r\n                if (presenceEvent.action === 'state-change') {\r\n                    const userState = presenceEvent.state as PubNubUserState;\r\n                    if (userState.playerInfo.id !== props.playerInfo.id) {\r\n                        props.addPlayers(userState);\r\n                    }\r\n                }\r\n            },\r\n            status: statusEvent => {\r\n                console.log('PubNub status event', statusEvent);\r\n                if (statusEvent.category === 'PNConnectedCategory') {\r\n                    console.log('Player is connected to PubNub game channel');\r\n                    setUserStateAndGetHereNowIfGameIsOpen();\r\n                }\r\n            }\r\n        };\r\n        pubNubClient.addListener(pubNubListeners);\r\n        pubNubClient.subscribe({\r\n            channels: [props.gameChannel],\r\n            withPresence: true\r\n        });\r\n        // When this component is destroyed, we unsubscribe from game channel.\r\n        return () => {\r\n            pubNubClient.removeListener(pubNubListeners);\r\n            pubNubClient.unsubscribeAll();\r\n        }\r\n    });\r\n    return null;\r\n};\r\n\r\nexport default React.memo(PubNubEventHandler);\r\n","import PubNub from 'pubnub';\r\n\r\nconst PUBNUB_KEYS = require('./pubnub.config.json');\r\n\r\nexport const PUBNUB_CONFIG: PubNub.PubnubConfig = {\r\n    publishKey: PUBNUB_KEYS.publishKey,\r\n    subscribeKey: PUBNUB_KEYS.subscribeKey,\r\n    uuid: undefined, // ⇨ is set by PlayGame component,\r\n    ssl: true\r\n};\r\n","import { cloneDeep } from 'lodash';\r\nimport Pubnub from 'pubnub';\r\nimport { PubNubProvider } from 'pubnub-react';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport AdminPanel from '../../components/AdminPanel/AdminPanel';\r\nimport { LetterAnimation } from '../../components/LetterAnimation/LetterAnimation';\r\nimport LoadingScreen from '../../components/LoadingScreen/LoadingScreen';\r\nimport PhaseEvaluateRound from '../../components/PhaseEvaluateRound/PhaseEvaluateRound';\r\nimport PhaseFillOutTextfields from '../../components/PhaseFillOutTextfields/PhaseFillOutTextfields';\r\nimport PhaseWaitingToStart from '../../components/PhaseWaitingToStart/PhaseWaitingToStart';\r\nimport PubNubEventHandler from '../../components/PubNubEventHandler/PubNubEventHandler';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { GamePhase } from '../../constants/game.constant';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    PubNubCurrentRoundInputsMessage,\r\n    PubNubDataForCurrentGameMessage,\r\n    PubNubDataForCurrentGameMessagePayload,\r\n    PubNubEvaluationOfPlayerInputMessage,\r\n    PubNubKickPlayerMessage,\r\n    PubNubMessage,\r\n    PubNubMessageType,\r\n    PubNubUserState,\r\n} from '../../models/pub-nub-data.model';\r\nimport { AppAction, resetAppState, setDataOfFinishedGame, SetDataOfFinishedGamePayload } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport {\r\n    createGameRoundEvaluation,\r\n    getEmptyRoundInputs,\r\n    getMinNumberOfMarkedAsInvalid,\r\n    markEmptyPlayerInputsAsInvalid,\r\n    processPlayerInputEvaluations,\r\n    shouldUserRespondToRequestGameDataMessage,\r\n} from '../../utils/game.utils';\r\nimport { convertCollectionToMap, convertMapToCollection } from '../../utils/general.utils';\r\nimport { removeRunningGameInfoFromLocalStorage } from '../../utils/local-storage.utils';\r\nimport { Collection } from '../../models/collection.interface';\r\n\r\ninterface PlayGamePropsFromStore {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string | null;\r\n    playerInfo: PlayerInfo;\r\n}\r\ninterface PlayGameDispatchProps {\r\n    onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => void;\r\n    onResetAppState: () => void;\r\n}\r\ninterface PlayGameProps extends PlayGamePropsFromStore, PlayGameDispatchProps, RouterProps { }\r\nexport interface PlayGameState {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentPhase: GamePhase;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    currentRoundInputs: PlayerInput[];\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[];\r\n    loadingScreenMessage: string | null;\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    showLetterAnimation: boolean;\r\n    showLoadingScreen: boolean;\r\n}\r\n\r\nclass PlayGame extends Component<PlayGameProps, PlayGameState> {\r\n    public state: PlayGameState = {\r\n        allPlayers: new Map<string, PlayerInfo>(),\r\n        currentPhase: GamePhase.waitingToStart,\r\n        currentRound: 1,\r\n        currentRoundEvaluation: new Map<string, PlayerInputEvaluation[]>(),\r\n        currentRoundInputs: [],\r\n        gameConfig: null,\r\n        gameRounds: [],\r\n        loadingScreenMessage: null,\r\n        playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n        showLetterAnimation: false,\r\n        showLoadingScreen: true\r\n    };\r\n    private pubNubClient: any;\r\n\r\n    public render() {\r\n        // This check serves as a route guard. If gameId and playerInfo aren't present in state,\r\n        // then user wasn't redirected here from NewGame or JoinGame component.\r\n        if (this.props.gameId === null || this.props.playerInfo === null) { return null; }\r\n\r\n        const { gameId, playerInfo } = this.props;\r\n        const { allPlayers, loadingScreenMessage, showLetterAnimation, showLoadingScreen } = this.state;\r\n        if (!this.pubNubClient) {\r\n            this.pubNubClient = new Pubnub({ ...PUBNUB_CONFIG, uuid: playerInfo.id });\r\n        }\r\n\r\n        let currentPhaseElement: JSX.Element | null = null;\r\n        switch (this.state.currentPhase) {\r\n            case GamePhase.waitingToStart:\r\n                currentPhaseElement = (\r\n                    <PhaseWaitingToStart\r\n                        gameConfig={this.state.gameConfig}\r\n                        gameId={gameId}\r\n                        allPlayers={allPlayers}\r\n                        playerInfo={playerInfo}\r\n                        sendMessage={this.sendMessage}\r\n                    />\r\n                );\r\n                break;\r\n            case GamePhase.fillOutTextfields:\r\n                currentPhaseElement = (\r\n                    <PhaseFillOutTextfields\r\n                        currentRound={this.state.currentRound}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRoundInputs={this.state.currentRoundInputs}\r\n                        updateCurrentRoundInputs={this.updateCurrentRoundInputs}\r\n                        sendRoundFinishedMessage={this.sendRoundFinishedMessage}\r\n                    />\r\n                );\r\n                break;\r\n            case GamePhase.evaluateRound:\r\n                currentPhaseElement = (\r\n                    <PhaseEvaluateRound\r\n                        allPlayers={allPlayers}\r\n                        currentRound={this.state.currentRound}\r\n                        currentRoundEvaluation={this.state.currentRoundEvaluation}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRounds={this.state.gameRounds}\r\n                        playerInfo={playerInfo}\r\n                        updateEvaluationOfPlayerInput={this.updateEvaluationOfPlayerInput}\r\n                        sendEvaluationFinishedMessage={this.sendEvaluationFinishedMessage}\r\n                    />\r\n                );\r\n                break;\r\n            default:\r\n        }\r\n        const letterAnimationElement = this.state.gameConfig && showLetterAnimation ? (\r\n            <LetterAnimation\r\n                letterToUnveil={this.state.gameConfig.letters[this.state.currentRound - 1]}\r\n                callbackWhenAnimationDone={this.callbackWhenAnimationDone}\r\n            />\r\n        ) : null;\r\n        const loadingScreenElement = showLoadingScreen ? <LoadingScreen message={loadingScreenMessage} /> : null;\r\n        return (\r\n            <PubNubProvider client={this.pubNubClient}>\r\n                {/* The props passed to PubNubEventHandler must never be changed,\r\n                    in order to ensure that the component is not rerendered!\r\n                    (PubNubEventHandler is wrapped in React.memo) */}\r\n                <PubNubEventHandler\r\n                    gameChannel={this.props.gameId}\r\n                    gameConfig={this.props.gameConfig}\r\n                    playerInfo={this.props.playerInfo}\r\n                    navigateToDashboard={this.navigateToDashboard}\r\n                    addPlayers={this.addPlayers}\r\n                    processPubNubMessage={this.processPubNubMessage}\r\n                />\r\n                {letterAnimationElement}\r\n                {loadingScreenElement}\r\n                {!showLoadingScreen && !showLetterAnimation ? (\r\n                    <div className=\"main-content-wrapper\">\r\n                        {currentPhaseElement}\r\n                    </div>\r\n                ) : null}\r\n                {playerInfo.isAdmin && allPlayers.size > 1 ?\r\n                    <AdminPanel allPlayers={allPlayers} kickPlayer={this.sendKickPlayerMessage} />\r\n                    : null}\r\n            </PubNubProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { gameConfig, gameId, playerInfo } = this.props;\r\n        // If gameId and playerInfo aren't present in application state, then reroute user to dashboard.\r\n        if (gameId === null || playerInfo === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        allPlayers.set(playerInfo.id, playerInfo);\r\n        // If user is the game admin and isn't rejoining, the gameConfig can be taken from application state\r\n        // and we can hide the loading screen and show PhaseWaitingToStart component right away.\r\n        if (!playerInfo.isRejoiningGame && playerInfo.isAdmin) {\r\n            this.setState({ allPlayers, gameConfig: gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n        // If player is rejoining the game, we need to request the game data from the other players.\r\n        if (playerInfo.isRejoiningGame) {\r\n            this.sendMessage({ type: PubNubMessageType.requestGameData });\r\n        }\r\n    }\r\n\r\n    private sendMessage = (message: PubNubMessage) => {\r\n        this.pubNubClient.publish(\r\n            {\r\n                channel: this.props.gameId as string,\r\n                message,\r\n                storeInHistory: true,\r\n                ttl: 1 // time to live (in hours)\r\n            },\r\n            (status: any, response: any) => console.log('PubNub Publish:', status, response)\r\n        );\r\n    };\r\n\r\n    private callbackWhenAnimationDone = () => {\r\n        this.setState({ showLetterAnimation: false });\r\n    }\r\n\r\n    private navigateToDashboard = () => {\r\n        removeRunningGameInfoFromLocalStorage();\r\n        this.props.onResetAppState();\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    /**\r\n     * Called by PubNubEventHandler when it receives a PubNub presence event with action 'state-change'.\r\n     * It processes information about players that had already joined the game before this user joined\r\n     * (hereNow result) or about a player that joins the game after this user joined.\r\n     */\r\n    private addPlayers = (...newPlayers: PubNubUserState[]) => {\r\n        // Ignore information about players that try to join after the game has already started.\r\n        if (this.state.currentPhase !== GamePhase.waitingToStart) { return; }\r\n        let gameConfig: GameConfig | null = null;\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        newPlayers.forEach(newPlayer => {\r\n            allPlayers.set(newPlayer.playerInfo.id, newPlayer.playerInfo);\r\n            // If we are not the game admin, we obtain the game config from the admin's PubNubUserState.\r\n            if (newPlayer.gameConfig && !this.state.gameConfig) {\r\n                gameConfig = newPlayer.gameConfig;\r\n            }\r\n        });\r\n        // Only after we received the gameConfig from the admin, we hide the loading screen\r\n        // and render the PhaseWaitingToStart component instead, if the user isn't rejoining.\r\n        // If the user is rejoining a running game, we continue showing the loading screen\r\n        // until the requested game data from the other players is received.\r\n        if (gameConfig) {\r\n            this.setState({ allPlayers, gameConfig, showLoadingScreen: this.props.playerInfo.isRejoiningGame });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with attribute 'type'.\r\n     */\r\n    private processPubNubMessage = (event: Pubnub.MessageEvent) => {\r\n        const message = event.message as PubNubMessage;\r\n        switch (message.type) {\r\n            case PubNubMessageType.startGame:\r\n                this.startGame();\r\n                break;\r\n            case PubNubMessageType.roundFinished:\r\n                this.stopRoundAndSendInputs();\r\n                break;\r\n            case PubNubMessageType.currentRoundInputs:\r\n                this.addPlayerInputForFinishedRound(event.publisher, message.payload);\r\n                break;\r\n            case PubNubMessageType.evaluationOfPlayerInput:\r\n                this.processEvaluationOfPlayerInput(event.publisher, message.payload);\r\n                break;\r\n            case PubNubMessageType.evaluationFinished:\r\n                this.countPlayerAsEvaluationFinished(event.publisher);\r\n                break;\r\n            case PubNubMessageType.kickPlayer:\r\n                this.removePlayerFromGame(message.payload)\r\n                break;\r\n            case PubNubMessageType.requestGameData:\r\n                if (shouldUserRespondToRequestGameDataMessage(this.props.playerInfo, this.state.allPlayers, event.publisher)) {\r\n                    if (this.state.allPlayers.has(event.publisher)) {\r\n                        // Only send data to a rejoining player who hasn't been kicked out by the admin.\r\n                        this.sendDataForCurrentGame(event.publisher);\r\n                    } else {\r\n                        // Send kickPlayer message again for kicked out player that tried to rejoin game.\r\n                        this.sendKickPlayerMessage(event.publisher);\r\n                    }\r\n                }\r\n                break;\r\n            case PubNubMessageType.dataForCurrentGame:\r\n                this.processDataForCurrentGame(message.payload);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    /**\r\n    * This method is called when the PubNub message 'startGame' is received.\r\n    */\r\n    private startGame = () => {\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const roundInputs = getEmptyRoundInputs(gameConfig.categories.length);\r\n        this.setState({\r\n            currentPhase: GamePhase.fillOutTextfields,\r\n            currentRoundInputs: roundInputs,\r\n            showLetterAnimation: true\r\n        });\r\n    }\r\n\r\n    private updateCurrentRoundInputs = (newCurrentRoundInputs: PlayerInput[]) => {\r\n        this.setState({ currentRoundInputs: newCurrentRoundInputs });\r\n    }\r\n\r\n    private sendRoundFinishedMessage = () => {\r\n        this.setState({ showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.roundFinished });\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'roundFinished' is received.\r\n     */\r\n    private stopRoundAndSendInputs = () => {\r\n        // Prepare new GameRound object for addPlayerInputForFinishedRound method\r\n        // as well as new currentRoundEvaluation object for evaluation phase.\r\n        const gameRounds: GameRound[] = [...this.state.gameRounds, new Map<string, PlayerInput[]>()];\r\n        const currentRoundEvaluation = createGameRoundEvaluation(\r\n            this.state.allPlayers, (this.state.gameConfig as GameConfig).categories\r\n        );\r\n        this.setState({ currentRoundEvaluation, gameRounds, showLoadingScreen: true });\r\n        // Send this player's text inputs of current round to other players (and herself/himself).\r\n        const message = new PubNubCurrentRoundInputsMessage(markEmptyPlayerInputsAsInvalid(this.state.currentRoundInputs));\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'currentRoundInputs' is received.\r\n     */\r\n    private addPlayerInputForFinishedRound = (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => {\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        gameRounds[this.state.currentRound - 1].set(playerId, playerInputsForFinishedRound);\r\n        // Did we collect the inputs from all players?\r\n        if (gameRounds[this.state.currentRound - 1].size === this.state.allPlayers.size) {\r\n            // If yes, then start the evaluation of the finished round.\r\n            this.setState({ currentPhase: GamePhase.evaluateRound, gameRounds, showLoadingScreen: false });\r\n        } else {\r\n            // If no, then only store the updated gameRounds object in state.\r\n            this.setState({ gameRounds });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate a player input evaluation via a\r\n     * PubNub message. This message is then processed by all players in the game (including the user who sent it).\r\n     */\r\n    private updateEvaluationOfPlayerInput = (newEvaluation: EvaluationOfPlayerInput) => {\r\n        const message = new PubNubEvaluationOfPlayerInputMessage(newEvaluation);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'evaluationOfPlayerInput' is received.\r\n     */\r\n    private processEvaluationOfPlayerInput = (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => {\r\n        const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n        const playerInputEvaluations = currentRoundEvaluation.get(newEvaluation.evaluatedPlayerId);\r\n        if (playerInputEvaluations) {\r\n            playerInputEvaluations[newEvaluation.categoryIndex].set(evaluatingPlayerId, newEvaluation.markedAsValid);\r\n        }\r\n        this.setState({ currentRoundEvaluation });\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate to all players\r\n     * that the user of this instance of the game has finished evaluating the current round.\r\n     */\r\n    private sendEvaluationFinishedMessage = () => {\r\n        this.setState({ loadingScreenMessage: 'Warte auf Mitspieler', showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.evaluationFinished });\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'evaluationFinished' is received.\r\n     */\r\n    private countPlayerAsEvaluationFinished = (evaluatingPlayerId: string) => {\r\n        const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n        playersThatFinishedEvaluation.set(evaluatingPlayerId, true);\r\n        if (playersThatFinishedEvaluation.size === this.state.allPlayers.size) {\r\n            this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n        } else {\r\n            this.setState({ playersThatFinishedEvaluation });\r\n        }\r\n    }\r\n\r\n    private processEvaluationsAndStartNextRoundOrFinishGame = () => {\r\n        const { allPlayers, currentRound, currentRoundEvaluation, gameRounds } = this.state;\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const newGameRounds = cloneDeep(gameRounds);\r\n        newGameRounds[currentRound - 1] = processPlayerInputEvaluations(\r\n            gameRounds[currentRound - 1], currentRoundEvaluation, getMinNumberOfMarkedAsInvalid(allPlayers.size)\r\n        );\r\n        if (currentRound === gameConfig.numberOfRounds) {\r\n            // Finish game and show results.\r\n            removeRunningGameInfoFromLocalStorage();\r\n            this.props.onSetDataOfFinishedGame({ allPlayers, gameConfig, gameRounds: newGameRounds });\r\n            this.props.history.push('/results');\r\n        } else {\r\n            // Start next round of the game.\r\n            this.setState({\r\n                currentPhase: GamePhase.fillOutTextfields,\r\n                currentRoundEvaluation: createGameRoundEvaluation(allPlayers, gameConfig.categories),\r\n                currentRoundInputs: getEmptyRoundInputs(gameConfig.categories.length),\r\n                currentRound: currentRound + 1,\r\n                gameRounds: newGameRounds,\r\n                loadingScreenMessage: null,\r\n                playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n                showLetterAnimation: true,\r\n                showLoadingScreen: false\r\n            });\r\n        }\r\n    }\r\n\r\n    private sendKickPlayerMessage = (playerId: string) => {\r\n        const message = new PubNubKickPlayerMessage(playerId);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'kickPlayer' is received.\r\n     */\r\n    private removePlayerFromGame = (playerId: string) => {\r\n        // If the player to be removed is the user of this game instance, then navigate to dashboard.\r\n        if (this.props.playerInfo.id === playerId) {\r\n            removeRunningGameInfoFromLocalStorage();\r\n            this.props.onResetAppState();\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        if (this.state.allPlayers.has(playerId)) {\r\n            // Remove player's data from component's state.\r\n            const allPlayers = cloneDeep(this.state.allPlayers);\r\n            allPlayers.delete(playerId);\r\n            const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n            currentRoundEvaluation.delete(playerId);\r\n            const gameRounds = cloneDeep(this.state.gameRounds);\r\n            gameRounds.forEach(round => round.delete(playerId));\r\n            const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n            playersThatFinishedEvaluation.delete(playerId);\r\n            this.setState({ allPlayers, currentRoundEvaluation, gameRounds, playersThatFinishedEvaluation });\r\n            // If we're currently in evaluation phase, check if remaining players have finished evaluation.\r\n            if (this.state.currentPhase === GamePhase.evaluateRound && playersThatFinishedEvaluation.size === allPlayers.size) {\r\n                this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n            }\r\n        }\r\n    }\r\n\r\n    private sendDataForCurrentGame = (requestingPlayerId: string) => {\r\n        const evaluationsAsCollections = new Map<string, Collection<boolean>[]>();\r\n        this.state.currentRoundEvaluation.forEach((data, playerId) => {\r\n            evaluationsAsCollections.set(playerId, data.map(item => convertMapToCollection<boolean>(item)));\r\n        });\r\n        const message = new PubNubDataForCurrentGameMessage({\r\n            allPlayers: convertMapToCollection<PlayerInfo>(this.state.allPlayers),\r\n            currentPhase: this.state.currentPhase,\r\n            currentRound: this.state.currentRound,\r\n            currentRoundEvaluation: convertMapToCollection<Collection<boolean>[]>(evaluationsAsCollections),\r\n            gameConfig: this.state.gameConfig as GameConfig,\r\n            gameRounds: this.state.gameRounds.map(round => convertMapToCollection<PlayerInput[]>(round)),\r\n            playersThatFinishedEvaluation: convertMapToCollection<boolean>(this.state.playersThatFinishedEvaluation),\r\n            requestingPlayerId\r\n        });\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'dataForCurrentGame' is received.\r\n     */\r\n    private processDataForCurrentGame = (payload: PubNubDataForCurrentGameMessagePayload) => {\r\n        // Only process the information and update state if the message was meant for this user.\r\n        if (this.props.playerInfo.id === payload.requestingPlayerId) {\r\n            const evaluationsAsCollections = convertCollectionToMap<Collection<boolean>[]>(payload.currentRoundEvaluation);\r\n            const currentRoundEvaluation: GameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n            evaluationsAsCollections.forEach((data, playerId) => {\r\n                currentRoundEvaluation.set(playerId, data.map(item => convertCollectionToMap<boolean>(item)));\r\n            });\r\n            this.setState({\r\n                allPlayers: convertCollectionToMap<PlayerInfo>(payload.allPlayers),\r\n                currentPhase: payload.currentPhase,\r\n                currentRound: payload.currentRound,\r\n                currentRoundEvaluation,\r\n                currentRoundInputs: getEmptyRoundInputs(payload.gameConfig.categories.length),\r\n                gameConfig: payload.gameConfig,\r\n                gameRounds: payload.gameRounds.map(round => convertCollectionToMap<PlayerInput[]>(round)),\r\n                playersThatFinishedEvaluation: convertCollectionToMap<boolean>(payload.playersThatFinishedEvaluation),\r\n                showLoadingScreen: false\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): PlayGamePropsFromStore => {\r\n    return {\r\n        gameConfig: state.gameConfig,\r\n        gameId: state.gameId,\r\n        playerInfo: state.playerInfo as PlayerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): PlayGameDispatchProps => {\r\n    return {\r\n        onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => dispatch(setDataOfFinishedGame(payload)),\r\n        onResetAppState: () => dispatch(resetAppState())\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);\r\n","import './App.css';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Header from './components/Header/Header';\r\nimport {\r\n    MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS,\r\n    MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS as MAX_PLAYER_ID_VALIDITY_IN_SECONDS,\r\n} from './constants/app.constant';\r\nimport { AppTheme, AppThemes } from './constants/themes.constant';\r\nimport Dashboard from './containers/Dashboard/Dashboard';\r\nimport GameResults from './containers/GameResults/GameResults';\r\nimport JoinGame from './containers/JoinGame/JoinGame';\r\nimport NewGame from './containers/NewGame/NewGame';\r\nimport PlayGame from './containers/PlayGame/PlayGame';\r\nimport { StoredRunningGameInfo } from './models/game.interface';\r\nimport { StoredPlayerInfo } from './models/player.interface';\r\nimport { AppAction, setStoredPlayerInfo, setStoredRunningGameInfo } from './store/app.actions';\r\nimport { convertDateToUnixTimestamp } from './utils/general.utils';\r\nimport {\r\n    getAppThemeIdFromLocalStorage,\r\n    getPlayerInfoFromLocalStorage,\r\n    getRunningGameInfoFromLocalStorage,\r\n    removeRunningGameInfoFromLocalStorage,\r\n    setAppThemeIdInLocalStorage,\r\n    setPlayerInfoInLocalStorage,\r\n} from './utils/local-storage.utils';\r\n\r\nconst backspaceDisabler = require('backspace-disabler');\r\n\r\ninterface AppDispatchProps {\r\n    onSetStoredPlayerInfo: (payload: StoredPlayerInfo) => void,\r\n    onSetStoredRunningGameInfo: (payload: StoredRunningGameInfo) => void\r\n}\r\ninterface AppState {\r\n    activeTheme: AppTheme;\r\n}\r\nclass App extends Component<AppDispatchProps, AppState> {\r\n    public state: AppState = {\r\n        activeTheme: AppThemes[0],\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ThemeProvider theme={this.state.activeTheme.muiTheme}>\r\n                <div className=\"app-container\">\r\n                    <Header\r\n                        theme={this.state.activeTheme}\r\n                        switchTheme={this.switchThemeHandler}\r\n                    />\r\n                    <main\r\n                        className={'app-main ' + this.state.activeTheme.className}\r\n                        style={this.state.activeTheme.style}\r\n                    >\r\n                        <HashRouter basename={process.env.PUBLIC_URL}>\r\n                            <Switch>\r\n                                <Route path=\"/\" exact component={Dashboard} />\r\n                                <Route path=\"/newgame\" exact component={NewGame} />\r\n                                <Route path=\"/joingame\" exact component={JoinGame} />\r\n                                <Route path=\"/play\" exact component={PlayGame} />\r\n                                <Route path=\"/results\" exact component={GameResults} />\r\n                            </Switch>\r\n                        </HashRouter>\r\n                    </main>\r\n                </div>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // Prevent browser back on backspace (e.g. in Firefox).\r\n        backspaceDisabler.disable();\r\n        const appThemeId = getAppThemeIdFromLocalStorage();\r\n        if (appThemeId) {\r\n            const appTheme = AppThemes.find(theme => theme.id === appThemeId);\r\n            if (appTheme) {\r\n                this.setState({ activeTheme: appTheme });\r\n            }\r\n        }\r\n        let storedPlayerInfo = getPlayerInfoFromLocalStorage();\r\n        const nowTimestamp = convertDateToUnixTimestamp(new Date());\r\n        // If no stored player info was found or player's id is past validity, create a new uuid and store in local storage.\r\n        if (!storedPlayerInfo || nowTimestamp - storedPlayerInfo.idCreationTimestamp > MAX_PLAYER_ID_VALIDITY_IN_SECONDS) {\r\n            storedPlayerInfo = { id: uuidv4(), idCreationTimestamp: nowTimestamp, name: storedPlayerInfo ? storedPlayerInfo.name : '' };\r\n            setPlayerInfoInLocalStorage(storedPlayerInfo);\r\n        }\r\n        this.props.onSetStoredPlayerInfo(storedPlayerInfo);\r\n        const runningGameInfo = getRunningGameInfoFromLocalStorage();\r\n        if (runningGameInfo) {\r\n            // A running game is only valid for the time specified in the max validity constant.\r\n            if (nowTimestamp - runningGameInfo.idCreationTimestamp <= MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS) {\r\n                this.props.onSetStoredRunningGameInfo(runningGameInfo);\r\n            } else {\r\n                removeRunningGameInfoFromLocalStorage();\r\n            }\r\n        }\r\n    }\r\n\r\n    private switchThemeHandler = (newTheme: AppTheme) => {\r\n        this.setState({ activeTheme: newTheme });\r\n        setAppThemeIdInLocalStorage(newTheme.id);\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): AppDispatchProps => {\r\n    return {\r\n        onSetStoredPlayerInfo: (payload: StoredPlayerInfo) => dispatch(setStoredPlayerInfo(payload)),\r\n        onSetStoredRunningGameInfo: (payload: StoredRunningGameInfo) => dispatch(setStoredRunningGameInfo(payload))\r\n    }\r\n};\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","/** 7 days in seconds */\r\nexport const MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS = 7 * 24 * 60 * 60;\r\n/** 1 hour in seconds */\r\nexport const MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS = 60 * 60;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GameConfig, GameRound } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport {\r\n    AppAction,\r\n    RESET_APP_STATE,\r\n    SET_DATA_FOR_NEW_GAME,\r\n    SET_DATA_OF_FINISHED_GAME,\r\n    SET_STORED_PLAYER_INFO,\r\n    SET_STORED_RUNNING_GAME_INFO,\r\n    SetDataForNewGameAction,\r\n    SetDataOfFinishedGameAction,\r\n    SetStoredPlayerInfoAction,\r\n    SetStoredRunningGameInfoAction,\r\n} from './app.actions';\r\n\r\nexport interface AppState {\r\n    allPlayers: Map<string, PlayerInfo> | null;\r\n    gameId: string | null;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[] | null;\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\n\r\nconst initialState: AppState = {\r\n    allPlayers: null,\r\n    gameId: null,\r\n    gameConfig: null,\r\n    gameRounds: null,\r\n    playerIdCreationTimestamp: 0,\r\n    playerInfo: null\r\n};\r\n\r\nexport const appReducer = (state: AppState = initialState, action: AppAction): AppState => {\r\n    switch (action.type) {\r\n        case SET_STORED_PLAYER_INFO:\r\n            const storedPlayerInfo = (action as SetStoredPlayerInfoAction).payload;\r\n            return {\r\n                ...state,\r\n                playerIdCreationTimestamp: storedPlayerInfo.idCreationTimestamp,\r\n                playerInfo: {\r\n                    id: storedPlayerInfo.id,\r\n                    isAdmin: false,\r\n                    isRejoiningGame: false,\r\n                    name: storedPlayerInfo.name\r\n                }\r\n            };\r\n        case SET_STORED_RUNNING_GAME_INFO:\r\n            const storedRunningGameInfo = (action as SetStoredRunningGameInfoAction).payload;\r\n            return {\r\n                ...state,\r\n                gameId: storedRunningGameInfo.gameId,\r\n                playerInfo: {\r\n                    ...state.playerInfo as PlayerInfo,\r\n                    isAdmin: storedRunningGameInfo.isPlayerAdmin,\r\n                    isRejoiningGame: true\r\n                }\r\n            };\r\n        case SET_DATA_FOR_NEW_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataForNewGameAction).payload\r\n            };\r\n        case SET_DATA_OF_FINISHED_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataOfFinishedGameAction).payload,\r\n                // Set gameId to null to prevent player from manually opening PlayGame route.\r\n                gameId: null\r\n            };\r\n        case RESET_APP_STATE:\r\n            return {\r\n                ...state,\r\n                allPlayers: null,\r\n                gameId: null,\r\n                gameConfig: null,\r\n                gameRounds: null,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { appReducer } from './store/app.reducer';\r\nimport { Provider } from 'react-redux';\r\n\r\nexport const appStore = createStore(appReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={appStore}><App /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}