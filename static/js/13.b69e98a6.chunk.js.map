{"version":3,"sources":["components/ToDashboardButton/ToDashboardButton.tsx","components/ToDashboardButton/ToDashboardButton.module.css","utils/game.utils.ts","components/ScoringOptionsList/ScoringOptionsList.tsx","components/ScoringOptionsList/ScoringOptionsList.module.css","containers/GameResults/GameResults.module.css","components/GameResultsList/GameResultsList.tsx","components/GameRoundsTable/GameRoundsTable.tsx","components/GameRoundsOverviewButton/GameRoundsOverviewButton.tsx","components/HallOfFameButton/HallOfFameButton.tsx","containers/GameResults/GameResults.tsx"],"names":["ToDashboardButton","props","className","styles","button_wrapper","type","color","variant","size","startIcon","onClick","onReturnToDashboard","module","exports","getRandomLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToSelectFrom","i","randomnLetter","randomnItem","push","filter","letter","getRandomCategories","numberOfCategories","categoryPool","preselectedCategories","randomCategories","numberOfRandomSelections","categoriesToSelectFrom","category","includes","randomCategory","c","getPlayersInAlphabeticalOrder","players","Array","from","map","data","sort","a","b","name","toLowerCase","getEmptyRoundInputs","numberOfInputs","createAndFillArray","points","STANDARD_POINTS","star","text","valid","markEmptyPlayerInputsAsInvalid","playerInputs","input","trim","createGameRoundEvaluation","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","evaluationForOneCategory","evaluatingPlayer","set","id","calculatePointsForRound","scoringOptions","round","checkForDuplicates","onlyPlayerWithValidAnswer","playerId","keys","next","value","playerInputsOfPlayer1","get","categoryIndex","calculatePointsForCategory","isOnlyPlayerWithValidAnswer","ONLY_ANSWER_POINTS","isDuplicateOfOtherPlayersInput","SAME_WORD_POINTS","otherPlayersIds","isOnlyPlayer","playerInputText","replace","some","otherPlayersInput","getMinNumberOfInvalids","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","getRejectingPlayers","rejectingPlayers","playerInfo","applyValidFlagAndStarFlagToPoints","creativeAnswersExtraPoints","EXTRA_POINTS","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","playerName","reduce","total","Object","createHallOfFameData","gameConfig","hallOfFameData","playerInput","ScoringOptionsList","rules","Fragment","isForGameResultsPage","heading","list","GAME_OPTION_LABEL","useStyles","makeStyles","listItem","flex","justifyContent","margin","listItemText","minWidth","GameResultsList","classes","mostPoints","Math","max","result","List","index","ListItem","ListItemIcon","isWinner","fontSize","ListItemText","primary","secondary","StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","main","contrastText","maxWidth","borderRight","body","TableCell","StyledTableRow","root","action","hover","TableRow","tableContainer","borderRadius","table","firstColumn","fontWeight","invalidInput","textDecoration","creativeAnswerStarIcon","paddingRight","verticalAlign","GameRoundsTable","sortedPlayers","veryCreativeAnswer","Tooltip","title","placement","TableContainer","component","Paper","Table","aria-label","TableHead","player","playerIndex","align","TableBody","scope","TabPanel","children","other","role","hidden","aria-labelledby","flexGrow","width","padding","background","paper","GameRoundsOverviewDialog","open","rounds","onClose","React","useState","tabValue","setTabValue","Dialog","DialogContent","AppBar","position","Tabs","onChange","event","newValue","indicatorColor","textColor","scrollButtons","_","Tab","label","letters","a11yProps","DialogActions","Button","GameRoundsOverviewButton","setOpen","paddingBottom","listItemAvatar","marginRight","HallOfFameDialog","DialogContentText","Divider","item","ListItemAvatar","Chip","icon","HallOfFameButton","disabled","lang","GameResults","state","this","SectionHeader","numberOfRounds","join","history","setState","onResetAppState","Component","connect","dispatch","resetAppState"],"mappings":"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","file":"static/js/13.b69e98a6.chunk.js","sourcesContent":["import { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\n\r\nimport styles from './ToDashboardButton.module.css';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton: React.FunctionComponent<ToDashboardButtonProps> = props => {\r\n    return (\r\n        <div className={styles.button_wrapper}>\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDashboardButton;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"ToDashboardButton_button_wrapper__1EtAB\"};","import { some } from 'lodash';\r\nimport randomnItem from 'random-item';\r\nimport { ONLY_ANSWER_POINTS, SAME_WORD_POINTS, STANDARD_POINTS } from '../constants/game.constant';\r\nimport { Collection } from '../models/collection.interface';\r\nimport { GameConfigScoringOptions, PlayerInput, HallOfFameEntry } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { EXTRA_POINTS } from './../constants/game.constant';\r\nimport { GameResultForPlayer, GameRound, GameRoundEvaluation, PlayerInputEvaluation, GameConfig } from './../models/game.interface';\r\nimport { createAndFillArray } from './general.utils';\r\n\r\n/**\r\n* Returns an array of randomly selected, unique letters.\r\n*/\r\nexport const getRandomLetters = (numberOfLetters: number, possibleLetters: string[]): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToSelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToSelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToSelectFrom = lettersToSelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\n/**\r\n* Returns an array of randomly selected categories.\r\n*/\r\nexport const getRandomCategories = (\r\n    numberOfCategories: number, categoryPool: string[], preselectedCategories: string[]\r\n): string[] => {\r\n    const randomCategories: string[] = [...preselectedCategories];\r\n    const numberOfRandomSelections = numberOfCategories - preselectedCategories.length;\r\n    let categoriesToSelectFrom = categoryPool.filter(category => !preselectedCategories.includes(category));\r\n    for (let i = 0; i < numberOfRandomSelections; i++) {\r\n        const randomCategory = randomnItem(categoriesToSelectFrom);\r\n        randomCategories.push(randomCategory);\r\n        categoriesToSelectFrom = categoriesToSelectFrom.filter(c => c !== randomCategory);\r\n    }\r\n    return randomCategories;\r\n};\r\n\r\nexport const getPlayersInAlphabeticalOrder = (players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const playerInfoArray = Array.from(players).map(data => data[1]);\r\n    return playerInfoArray.sort((a, b) => {\r\n        if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\r\n        if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\r\n        return 0;\r\n    });\r\n};\r\n\r\n/**\r\n * Returns an array of PlayerInput objects with empty strings and default settings (isMarkedCreative=false, valid=true, standard points).\r\n */\r\nexport const getEmptyRoundInputs = (numberOfInputs: number): PlayerInput[] => {\r\n    return createAndFillArray<PlayerInput>(numberOfInputs, { points: STANDARD_POINTS, star: false, text: '', valid: true });\r\n};\r\n\r\n/**\r\n* Checks each PlayerInput object whether it contains text.\r\n* If text string is empty, valid is set to false, otherwise to true.\r\n* The text is also trimmed in order to support correct scoring (finding duplicates).\r\n*/\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, text: input.text.trim(), valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(() => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs according to the active scoring options.\r\n */\r\nexport const calculatePointsForRound = (scoringOptions: GameConfigScoringOptions, round: GameRound): void => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    const playerId = round.keys().next().value;\r\n    const playerInputsOfPlayer1 = round.get(playerId) as PlayerInput[];\r\n    // Loop through all categories.\r\n    for (let categoryIndex = 0; categoryIndex < playerInputsOfPlayer1.length; categoryIndex++) {\r\n        calculatePointsForCategory(scoringOptions, round, categoryIndex);\r\n    }\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs for one category according to the active scoring options.\r\n */\r\nexport const calculatePointsForCategory = (scoringOptions: GameConfigScoringOptions, round: GameRound, categoryIndex: number): void => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    Array.from(round.keys()).forEach(playerId => {\r\n        const playerInputs = round.get(playerId) as PlayerInput[];\r\n        // Only check valid inputs.\r\n        if (playerInputs[categoryIndex].valid) {\r\n            if (scoringOptions.onlyPlayerWithValidAnswer && isOnlyPlayerWithValidAnswer(playerId, round, categoryIndex)) {\r\n                playerInputs[categoryIndex].points = ONLY_ANSWER_POINTS;\r\n            } else {\r\n                if (scoringOptions.checkForDuplicates && isDuplicateOfOtherPlayersInput(playerId, round, categoryIndex)) {\r\n                    playerInputs[categoryIndex].points = SAME_WORD_POINTS;\r\n                } else {\r\n                    playerInputs[categoryIndex].points = STANDARD_POINTS;\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport const isOnlyPlayerWithValidAnswer = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    let isOnlyPlayer = true;\r\n    otherPlayersIds.forEach(id => isOnlyPlayer = isOnlyPlayer && !(round.get(id) as PlayerInput[])[categoryIndex].valid);\r\n    return isOnlyPlayer;\r\n};\r\n\r\n/**\r\n * Returns true if a duplicate (removes all non-alphanumeric characters for comparison) for playerId's input was found.\r\n */\r\nexport const isDuplicateOfOtherPlayersInput = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    const playerInputText = (round.get(playerId) as PlayerInput[])[categoryIndex].text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    return some(otherPlayersIds, id => {\r\n        const otherPlayersInput = (round.get(id) as PlayerInput[])[categoryIndex];\r\n        return otherPlayersInput.valid && playerInputText === otherPlayersInput.text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    });\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfInvalids = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\n/**\r\n * Returns the players that marked the input as invalid in alphabetical order. Parameters:\r\n * - evaluations: Evaluations of all players for one player's input for one category.\r\n * - players: All players taking part in the running game of \"Stadt-Land-Fluss\".\r\n */\r\nexport const getRejectingPlayers = (evaluations: PlayerInputEvaluation, players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const rejectingPlayers = new Map<string, PlayerInfo>();\r\n    evaluations.forEach((markedAsValid, playerId) => {\r\n        if (!markedAsValid) {\r\n            const playerInfo = players.get(playerId);\r\n            if (playerInfo) {\r\n                rejectingPlayers.set(playerId, playerInfo);\r\n            }\r\n        }\r\n    });\r\n    return getPlayersInAlphabeticalOrder(rejectingPlayers);\r\n};\r\n\r\n/**\r\n * Adds extra points for \"very creative answers\" if scoring option is active\r\n * and sets invalid answer's points to zero.\r\n */\r\nexport const applyValidFlagAndStarFlagToPoints = (scoringOptions: GameConfigScoringOptions, round: GameRound): void => {\r\n    round.forEach(playerInputs => {\r\n        playerInputs.forEach(input => {\r\n            if (!input.valid) {\r\n                input.points = 0;\r\n            } else if (scoringOptions.creativeAnswersExtraPoints && input.star) {\r\n                input.points = input.points + EXTRA_POINTS;\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: Collection<GameResultForPlayer> = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => total + input.points, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n};\r\n\r\n/**\r\n * Creates a list of entries for the \"Hall of Fame\", the list of answers marked as \"very creative\".\r\n */\r\nexport const createHallOfFameData = (allPlayers: Map<string, PlayerInfo>, gameConfig: GameConfig, gameRounds: GameRound[]): HallOfFameEntry[] => {\r\n    const hallOfFameData: HallOfFameEntry[] = [];\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const playerInfo = allPlayers.get(playerId) as PlayerInfo;\r\n            playerInputs.forEach((playerInput, categoryIndex) => {\r\n                if (playerInput.valid && playerInput.star) {\r\n                    hallOfFameData.push({\r\n                        category: gameConfig.categories[categoryIndex],\r\n                        playerName: playerInfo.name,\r\n                        text: playerInput.text\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n    return hallOfFameData;\r\n};\r\n","import React from 'react';\r\n\r\nimport { GAME_OPTION_LABEL } from '../../constants/game.constant';\r\nimport { GameConfigScoringOptions } from '../../models/game.interface';\r\nimport styles from './ScoringOptionsList.module.css';\r\n\r\ninterface ScoringOptionsListProps {\r\n    isForGameResultsPage: boolean;\r\n    rules: GameConfigScoringOptions;\r\n}\r\n\r\nconst ScoringOptionsList: React.FunctionComponent<ScoringOptionsListProps> = props => {\r\n    const { rules } = props;\r\n    const createFurtherOptionsElement = (): JSX.Element => (\r\n        <React.Fragment>\r\n            {props.isForGameResultsPage ? <h3 className={styles.heading}>Regeln für die Punktevergabe</h3> : null}\r\n            {!props.isForGameResultsPage ? <h4 className={styles.heading}>Regeln für die Punktevergabe</h4> : null}\r\n            <ul className={styles.list}>\r\n                {rules.checkForDuplicates ? <li>{GAME_OPTION_LABEL.checkForDuplicates}</li> : null}\r\n                {rules.onlyPlayerWithValidAnswer ? <li>{GAME_OPTION_LABEL.onlyPlayerWithValidAnswer}</li> : null}\r\n                {rules.creativeAnswersExtraPoints ? <li>{GAME_OPTION_LABEL.creativeAnswersExtraPoints}</li> : null}\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n    if (rules.checkForDuplicates || rules.onlyPlayerWithValidAnswer || rules.creativeAnswersExtraPoints) {\r\n        return createFurtherOptionsElement();\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default ScoringOptionsList;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ScoringOptionsList_heading__24MfE\",\"list\":\"ScoringOptionsList_list__2_T80\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"GameResults_button_wrapper__3kHLB\"};","import { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport React from 'react';\r\n\r\nimport { GameResultForPlayer } from '../../models/game.interface';\r\n\r\nconst useStyles = makeStyles({\r\n    listItem: {\r\n        flex: '0 0 auto',\r\n        justifyContent: 'center',\r\n        margin: 0,\r\n    },\r\n    listItemText: {\r\n        flex: '0 0 auto',\r\n        minWidth: '6rem',\r\n    },\r\n});\r\n\r\ninterface GameResultsListProps {\r\n    gameResults: GameResultForPlayer[];\r\n}\r\nconst GameResultsList: React.FunctionComponent<GameResultsListProps> = props => {\r\n    const classes = useStyles();\r\n    const mostPoints = Math.max(...props.gameResults.map(result => result.points));\r\n    const getResultIcon = (isWinner: boolean): JSX.Element => {\r\n        return isWinner ? <InsertEmoticonIcon color=\"primary\" fontSize=\"large\" /> : <FaceIcon fontSize=\"large\" />;\r\n    };\r\n    return (\r\n        <List>\r\n            {props.gameResults.map((result, index) => (\r\n                <ListItem key={'results-for-player-' + index} className={classes.listItem}>\r\n                    <ListItemIcon>\r\n                        {getResultIcon(result.points === mostPoints)}\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                        className={classes.listItemText}\r\n                        primary={result.playerName}\r\n                        secondary={`${result.points} Punkte`}\r\n                    />\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default GameResultsList;\r\n","import { Tooltip } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { createStyles, makeStyles, Theme, withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React from 'react';\r\nimport { GameConfig, GameRound, PlayerInput } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        head: {\r\n            backgroundColor: theme.palette.primary.main,\r\n            color: theme.palette.primary.contrastText,\r\n            maxWidth: '8rem',\r\n            '&:not(:last-child)': {\r\n                borderRight: '1px solid rgba(255, 255, 255, 0.5)',\r\n            },\r\n        },\r\n        body: {\r\n            fontSize: 14,\r\n            maxWidth: '8rem',\r\n            '&:not(:last-child)': {\r\n                borderRight: '1px solid rgba(224, 224, 224, 1)',\r\n            },\r\n        },\r\n    }),\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n        },\r\n    }),\r\n)(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    tableContainer: {\r\n        borderRadius: 0,\r\n    },\r\n    table: {\r\n        maxWidth: '80vw',\r\n    },\r\n    firstColumn: {\r\n        fontWeight: 'bold',\r\n    },\r\n    invalidInput: {\r\n        color: 'crimson',\r\n        textDecoration: 'line-through',\r\n    },\r\n    creativeAnswerStarIcon: {\r\n        paddingRight: '0.2rem',\r\n        fontSize: '1rem',\r\n        verticalAlign: 'text-top',\r\n    }\r\n});\r\n\r\ninterface GameRoundsTableProps {\r\n    gameConfig: GameConfig;\r\n    round: GameRound;\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\nconst GameRoundsTable: React.FunctionComponent<GameRoundsTableProps> = props => {\r\n    const classes = useStyles();\r\n    const { gameConfig, round, sortedPlayers } = props;\r\n\r\n    const veryCreativeAnswer = (playerInput: PlayerInput): JSX.Element => (\r\n        <React.Fragment>\r\n            <Tooltip\r\n                title=\"Als besonders kreativ markiert\"\r\n                placement=\"bottom\"\r\n            >\r\n                <StarIcon className={classes.creativeAnswerStarIcon} color=\"secondary\" />\r\n            </Tooltip>\r\n            <span>{playerInput.text} (+{playerInput.points})</span>\r\n        </React.Fragment>\r\n    );\r\n    const createTableRowForCategory = (category: string, categoryIndex: number): JSX.Element => {\r\n        return (\r\n            <StyledTableRow key={`slf-table-row-for-category-${categoryIndex}`}>\r\n                <StyledTableCell component=\"th\" scope=\"row\" className={classes.firstColumn}>{category}</StyledTableCell>\r\n                {sortedPlayers.map((player, playerIndex) => {\r\n                    const playerInput = (round.get(player.id) as PlayerInput[])[categoryIndex];\r\n                    return (\r\n                        <StyledTableCell\r\n                            key={`slf-table-cell-for-category-${categoryIndex}-player-${playerIndex}`}\r\n                            className={!playerInput.valid ? classes.invalidInput : ''}\r\n                            align=\"right\"\r\n                        >\r\n                            {playerInput.valid && playerInput.star ? veryCreativeAnswer(playerInput) : null}\r\n                            {playerInput.valid && !playerInput.star ? `${playerInput.text} (+${playerInput.points})` : null}\r\n                            {!playerInput.valid && !!playerInput.text ? playerInput.text : null}\r\n                            {!playerInput.valid && !playerInput.text ? <span className=\"sr-only\">Leere Antwort</span> : null}\r\n                        </StyledTableCell>\r\n                    );\r\n                })}\r\n            </StyledTableRow>\r\n        );\r\n    };\r\n    return (\r\n        <TableContainer component={Paper} className={classes.tableContainer}>\r\n            <Table className={classes.table} aria-label=\"Die Spielrunde im Detail\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Kategorie</StyledTableCell>\r\n                        {sortedPlayers.map((player, playerIndex) => (\r\n                            <StyledTableCell\r\n                                key={`slf-table-head-cell-for-player-${playerIndex}`}\r\n                                align=\"right\"\r\n                            >{player.name}</StyledTableCell>\r\n                        ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {gameConfig.categories.map(createTableRowForCategory)}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default GameRoundsTable;\r\n","import { Button, Dialog, DialogActions, DialogContent, makeStyles, Theme } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport React, { useState } from 'react';\r\nimport { GameConfig, GameRound } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport GameRoundsTable from '../GameRoundsTable/GameRoundsTable';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\nconst TabPanel: React.FunctionComponent<TabPanelProps> = props => {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && children}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst a11yProps = (index: number) => ({\r\n    id: `scrollable-auto-tab-${index}`,\r\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        padding: '0 !important',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport interface GameRoundsOverviewDialogProps {\r\n    gameConfig: GameConfig;\r\n    open: boolean;\r\n    rounds: GameRound[];\r\n    sortedPlayers: PlayerInfo[];\r\n    onClose: () => void;\r\n}\r\nconst GameRoundsOverviewDialog: React.FunctionComponent<GameRoundsOverviewDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { gameConfig, open, rounds, sortedPlayers, onClose } = props;\r\n    const [tabValue, setTabValue] = React.useState(0);\r\n    const handleChange = (event: React.ChangeEvent<any>, newValue: number) => setTabValue(newValue);\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open} maxWidth=\"lg\">\r\n            <DialogContent className={classes.root}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={tabValue}\r\n                        onChange={handleChange}\r\n                        indicatorColor=\"secondary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {rounds.map((_, index) => (\r\n                            <Tab\r\n                                key={`slf-game-rounds-overview-tab-${index}`}\r\n                                label={`Runde ${index + 1}: ${gameConfig.letters[index]}`}\r\n                                {...a11yProps(index)}\r\n                            />\r\n                        ))}\r\n                    </Tabs>\r\n                </AppBar>\r\n                {rounds.map((round, index) => (\r\n                    <TabPanel\r\n                        key={`slf-game-rounds-overview-tab-panel-${index}`}\r\n                        value={tabValue}\r\n                        index={index}\r\n                    >\r\n                        <GameRoundsTable gameConfig={gameConfig} round={round} sortedPlayers={sortedPlayers} />\r\n                    </TabPanel>\r\n                ))}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button type=\"button\" onClick={onClose}>Schließen</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\ninterface GameRoundsOverviewButtonProps {\r\n    gameConfig: GameConfig;\r\n    rounds: GameRound[];\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\n\r\n/**\r\n * Displays a button that opens a dialog with all player inputs, scoring etc. of all rounds.\r\n * The displayed data is organized in tabs, one tab per round.\r\n */\r\nconst GameRoundsOverviewButton: React.FunctionComponent<GameRoundsOverviewButtonProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<EventNoteIcon />}\r\n                onClick={() => setOpen(true)}\r\n            >Alle Runden im Detail</Button>\r\n            <GameRoundsOverviewDialog\r\n                gameConfig={props.gameConfig}\r\n                open={open}\r\n                rounds={props.rounds}\r\n                sortedPlayers={props.sortedPlayers}\r\n                onClose={handleClose}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GameRoundsOverviewButton;\r\n","import {\r\n    Button,\r\n    Chip,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    Divider,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React, { useState } from 'react';\r\nimport { HallOfFameEntry } from '../../models/game.interface';\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        paddingBottom: 0,\r\n    },\r\n    listItem: {\r\n        padding: '0.25rem 0',\r\n    },\r\n    listItemAvatar: {\r\n        marginRight: '1rem',\r\n    },\r\n});\r\n\r\nexport interface HallOfFameDialogProps {\r\n    hallOfFameData: HallOfFameEntry[];\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\nconst HallOfFameDialog: React.FunctionComponent<HallOfFameDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { hallOfFameData, open, onClose } = props;\r\n    return (\r\n        <Dialog onClose={onClose} open={open} maxWidth=\"lg\">\r\n            <DialogContent>\r\n                <DialogContentText>Hall of Fame</DialogContentText>\r\n                <Divider />\r\n                <List className={classes.list}>\r\n                    {hallOfFameData.map((item, index) => (\r\n                        <ListItem key={`slf-hall-of-fame-item-${index}`} className={classes.listItem}>\r\n                            <ListItemAvatar className={classes.listItemAvatar}>\r\n                                <Chip\r\n                                    icon={<FaceIcon />}\r\n                                    color=\"primary\"\r\n                                    label={item.playerName}\r\n                                />\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={item.text}\r\n                                secondary={item.category}\r\n                            />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button type=\"button\" onClick={onClose}>Schließen</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\ninterface HallOfFameButtonProps {\r\n    hallOfFameData: HallOfFameEntry[];\r\n}\r\n\r\n/**\r\n * Displays a button that opens a dialog with all player inputs that were marked as \"very creative\".\r\n */\r\nconst HallOfFameButton: React.FunctionComponent<HallOfFameButtonProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<StarIcon />}\r\n                disabled={props.hallOfFameData.length === 0}\r\n                onClick={() => setOpen(true)}\r\n            >\r\n                <span lang=\"en\">Hall of Fame</span>\r\n                <span className=\"sr-only\">(Liste der besonders kreativen Antworten)</span>\r\n            </Button>\r\n            <HallOfFameDialog\r\n                hallOfFameData={props.hallOfFameData}\r\n                open={open}\r\n                onClose={handleClose}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default HallOfFameButton;\r\n","import { Divider } from '@material-ui/core';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport GameResultsList from '../../components/GameResultsList/GameResultsList';\r\nimport GameRoundsOverviewButton from '../../components/GameRoundsOverviewButton/GameRoundsOverviewButton';\r\nimport HallOfFameButton from '../../components/HallOfFameButton/HallOfFameButton';\r\nimport ScoringOptionsList from '../../components/ScoringOptionsList/ScoringOptionsList';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { GameConfig, GameResultForPlayer, HallOfFameEntry, GameRound } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { AppAction, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { calculateGameResults, createHallOfFameData, getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\nimport styles from './GameResults.module.css';\r\n\r\ninterface GameResultsDispatchProps {\r\n    onResetAppState: () => void;\r\n}\r\ninterface GameResultsProps extends AppState, GameResultsDispatchProps, RouterProps { }\r\ninterface GameResultsState {\r\n    gameConfig: GameConfig | null;\r\n    gameResults: GameResultForPlayer[];\r\n    gameRounds: GameRound[];\r\n    hallOfFameData: HallOfFameEntry[];\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\n\r\nclass GameResults extends Component<GameResultsProps, GameResultsState> {\r\n    public state: GameResultsState = {\r\n        gameConfig: null,\r\n        gameResults: [],\r\n        gameRounds: [],\r\n        hallOfFameData: [],\r\n        sortedPlayers: []\r\n    };\r\n\r\n    public render() {\r\n        const { gameConfig, gameResults, gameRounds, hallOfFameData, sortedPlayers } = this.state;\r\n        if (gameConfig === null) { return null; }\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader text=\"Ergebnis\"></SectionHeader>\r\n                    <p className=\"sr-only\" role=\"alert\">\r\n                        Das Spiel ist zu Ende. Die Ergebnisse werden angezeigt.\r\n                    </p>\r\n                    <GameResultsList gameResults={gameResults} />\r\n                    <Divider />\r\n                    <div className={styles.button_wrapper}>\r\n                        <GameRoundsOverviewButton\r\n                            gameConfig={gameConfig}\r\n                            rounds={gameRounds}\r\n                            sortedPlayers={sortedPlayers}\r\n                        />\r\n                        <HallOfFameButton hallOfFameData={hallOfFameData} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader text=\"Spieleinstellungen\"></SectionHeader>\r\n                    <div className=\"game-settings\">\r\n                        <h4>Runden</h4>\r\n                        <p>{gameConfig.numberOfRounds}</p>\r\n                        <h4>Buchstaben</h4>\r\n                        <p>{gameConfig.letters.join(', ')}</p>\r\n                        <h4>Kategorien</h4>\r\n                        <p>{gameConfig.categories.join(', ')}</p>\r\n                    </div>\r\n                    <ScoringOptionsList isForGameResultsPage={true} rules={gameConfig.scoringOptions} />\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={() => this.props.history.push('/')} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { allPlayers, gameConfig, gameRounds } = this.props;\r\n        // If there is no data present in application state, then reroute user to dashboard.\r\n        if (allPlayers === null || gameConfig === null || gameRounds === null) {\r\n            this.props.history.push('/');\r\n        } else {\r\n            this.setState({\r\n                gameConfig,\r\n                gameResults: calculateGameResults(allPlayers, gameRounds),\r\n                gameRounds,\r\n                hallOfFameData: createHallOfFameData(allPlayers, gameConfig, gameRounds),\r\n                sortedPlayers: getPlayersInAlphabeticalOrder(allPlayers)\r\n            });\r\n            this.props.onResetAppState();\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppState => state;\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): GameResultsDispatchProps => {\r\n    return {\r\n        onResetAppState: () => dispatch(resetAppState())\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults);\r\n"],"sourceRoot":""}