{"version":3,"sources":["utils/game.utils.ts","components/ToDashboardButton/ToDashboardButton.tsx","components/ToDashboardButton/ToDashboardButton.module.css","components/ScoringOptionsList/ScoringOptionsList.tsx","containers/GameResults/GameResults.module.css","components/GameResultsList/GameResultsList.tsx","components/GameRoundsTable/GameRoundsTable.tsx","components/GameRoundsOverviewButton/GameRoundsOverviewButton.tsx","components/HallOfFameButton/HallOfFameButton.tsx","containers/GameResults/GameResults.tsx"],"names":["getRandomnLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToRandomnlySelectFrom","i","randomnLetter","randomnItem","push","filter","letter","getPlayersInAlphabeticalOrder","players","Array","from","map","data","sort","a","b","name","toLowerCase","getEmptyRoundInputs","numberOfInputs","createAndFillArray","points","STANDARD_POINTS","star","text","valid","markEmptyPlayerInputsAsInvalid","playerInputs","input","trim","createGameRoundEvaluation","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","_","evaluationForOneCategory","evaluatingPlayer","set","id","calculatePointsForRound","scoringOptions","round","checkForDuplicates","onlyPlayerWithValidAnswer","playerId","keys","next","value","playerInputsOfPlayer1","get","categoryIndex","calculatePointsForCategory","isOnlyPlayerWithValidAnswer","ONLY_ANSWER_POINTS","isDuplicateOfOtherPlayersInput","SAME_WORD_POINTS","otherPlayersIds","isOnlyPlayer","playerInputText","replace","some","otherPlayersInput","getMinNumberOfInvalids","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","getRejectingPlayers","rejectingPlayers","playerInfo","applyValidFlagAndStarFlagToPoints","creativeAnswersExtraPoints","EXTRA_POINTS","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","playerName","reduce","total","Object","createHallOfFameData","gameConfig","hallOfFameData","playerInput","category","ToDashboardButton","props","className","styles","button_wrapper","type","color","variant","size","startIcon","onClick","onReturnToDashboard","module","exports","ScoringOptionsList","rules","Fragment","GAME_OPTION_LABEL","useStyles","makeStyles","listItem","flex","justifyContent","margin","listItemText","minWidth","GameResultsList","classes","mostPoints","Math","max","result","List","index","ListItem","key","ListItemIcon","fontSize","ListItemText","primary","secondary","makePluralIfCountIsNotOne","StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","main","contrastText","maxWidth","borderRight","body","TableCell","StyledTableRow","root","action","hover","TableRow","tableContainer","borderRadius","table","firstColumn","fontWeight","invalidInput","textDecoration","creativeAnswerStarIcon","paddingRight","verticalAlign","GameRoundsTable","sortedPlayers","TableContainer","component","Paper","Table","aria-label","TableHead","player","playerIndex","align","TableBody","scope","Tooltip","title","placement","veryCreativeAnswer","TabPanel","children","other","role","hidden","aria-labelledby","flexGrow","width","padding","background","paper","GameRoundsOverviewDialog","open","rounds","onClose","React","useState","tabValue","setTabValue","Dialog","DialogContent","AppBar","position","Tabs","onChange","event","newValue","indicatorColor","textColor","scrollButtons","Tab","label","letters","a11yProps","DialogActions","Button","GameRoundsOverviewButton","setOpen","list","paddingBottom","listItemAvatar","marginRight","HallOfFameDialog","DialogContentText","Divider","item","ListItemAvatar","Chip","icon","HallOfFameButton","disabled","GameResults","state","this","SectionHeader","showDivider","numberOfRounds","join","history","setState","onResetAppState","Component","connect","dispatch","resetAppState"],"mappings":"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","file":"static/js/12.c0a4a211.chunk.js","sourcesContent":["import { some } from 'lodash';\r\nimport randomnItem from 'random-item';\r\nimport { ONLY_ANSWER_POINTS, SAME_WORD_POINTS, STANDARD_POINTS } from '../constants/game.constant';\r\nimport { Collection } from '../models/collection.interface';\r\nimport { GameConfigScoringOptions, PlayerInput, HallOfFameEntry } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { EXTRA_POINTS } from './../constants/game.constant';\r\nimport { GameResultForPlayer, GameRound, GameRoundEvaluation, PlayerInputEvaluation, GameConfig } from './../models/game.interface';\r\nimport { createAndFillArray } from './general.utils';\r\n\r\n/**\r\n* Returns an array of unique letters. The number of letters is defined by the parameter numberOfLetters.\r\n* If the second argument is not provided, then the standard alphabet (excluding Q, X and Y) is used.\r\n*/\r\nexport const getRandomnLetters = (numberOfLetters: number, possibleLetters: string[]): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToRandomnlySelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToRandomnlySelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToRandomnlySelectFrom = lettersToRandomnlySelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\nexport const getPlayersInAlphabeticalOrder = (players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const playerInfoArray = Array.from(players).map(data => data[1]);\r\n    return playerInfoArray.sort((a, b) => {\r\n        if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\r\n        if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\r\n        return 0;\r\n    });\r\n};\r\n\r\n/**\r\n * Returns an array of PlayerInput objects with empty strings and default settings (isMarkedCreative=false, valid=true, standard points).\r\n */\r\nexport const getEmptyRoundInputs = (numberOfInputs: number): PlayerInput[] => {\r\n    return createAndFillArray<PlayerInput>(numberOfInputs, { points: STANDARD_POINTS, star: false, text: '', valid: true });\r\n};\r\n\r\n/**\r\n* Checks each PlayerInput object whether it contains text.\r\n* If text string is empty, valid is set to false, otherwise to true.\r\n* The text is also trimmed in order to support correct scoring (finding duplicates).\r\n*/\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, text: input.text.trim(), valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(_ => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs according to the active scoring options.\r\n */\r\nexport const calculatePointsForRound = (scoringOptions: GameConfigScoringOptions, round: GameRound) => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    const playerId = round.keys().next().value;\r\n    const playerInputsOfPlayer1 = round.get(playerId) as PlayerInput[];\r\n    // Loop through all categories.\r\n    for (let categoryIndex = 0; categoryIndex < playerInputsOfPlayer1.length; categoryIndex++) {\r\n        calculatePointsForCategory(scoringOptions, round, categoryIndex);\r\n    }\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs for one category according to the active scoring options.\r\n */\r\nexport const calculatePointsForCategory = (scoringOptions: GameConfigScoringOptions, round: GameRound, categoryIndex: number) => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    Array.from(round.keys()).forEach(playerId => {\r\n        const playerInputs = round.get(playerId) as PlayerInput[];\r\n        // Only check valid inputs.\r\n        if (playerInputs[categoryIndex].valid) {\r\n            if (scoringOptions.onlyPlayerWithValidAnswer && isOnlyPlayerWithValidAnswer(playerId, round, categoryIndex)) {\r\n                playerInputs[categoryIndex].points = ONLY_ANSWER_POINTS;\r\n            } else {\r\n                if (scoringOptions.checkForDuplicates && isDuplicateOfOtherPlayersInput(playerId, round, categoryIndex)) {\r\n                    playerInputs[categoryIndex].points = SAME_WORD_POINTS;\r\n                } else {\r\n                    playerInputs[categoryIndex].points = STANDARD_POINTS;\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport const isOnlyPlayerWithValidAnswer = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    let isOnlyPlayer = true;\r\n    otherPlayersIds.forEach(id => isOnlyPlayer = isOnlyPlayer && !(round.get(id) as PlayerInput[])[categoryIndex].valid);\r\n    return isOnlyPlayer;\r\n};\r\n\r\n/**\r\n * Returns true if a duplicate (removes all non-alphanumeric characters for comparison) for playerId's input was found.\r\n */\r\nexport const isDuplicateOfOtherPlayersInput = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    const playerInputText = (round.get(playerId) as PlayerInput[])[categoryIndex].text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    return some(otherPlayersIds, id => {\r\n        const otherPlayersInput = (round.get(id) as PlayerInput[])[categoryIndex];\r\n        return otherPlayersInput.valid && playerInputText === otherPlayersInput.text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    });\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfInvalids = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\n/**\r\n * Returns the players that marked the input as invalid in alphabetical order. Parameters:\r\n * - evaluations: Evaluations of all players for one player's input for one category.\r\n * - players: All players taking part in the running game of \"Stadt-Land-Fluss\".\r\n */\r\nexport const getRejectingPlayers = (evaluations: PlayerInputEvaluation, players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const rejectingPlayers = new Map<string, PlayerInfo>();\r\n    evaluations.forEach((markedAsValid, playerId) => {\r\n        if (!markedAsValid) {\r\n            const playerInfo = players.get(playerId);\r\n            if (playerInfo) {\r\n                rejectingPlayers.set(playerId, playerInfo);\r\n            }\r\n        }\r\n    });\r\n    return getPlayersInAlphabeticalOrder(rejectingPlayers);\r\n};\r\n\r\n/**\r\n * Adds extra points for \"very creative answers\" if scoring option is active\r\n * and sets invalid answer's points to zero.\r\n */\r\nexport const applyValidFlagAndStarFlagToPoints = (scoringOptions: GameConfigScoringOptions, round: GameRound) => {\r\n    round.forEach(playerInputs => {\r\n        playerInputs.forEach(input => {\r\n            if (!input.valid) {\r\n                input.points = 0;\r\n            } else if (scoringOptions.creativeAnswersExtraPoints && input.star) {\r\n                input.points = input.points + EXTRA_POINTS;\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: Collection<GameResultForPlayer> = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => total + input.points, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n};\r\n\r\n/**\r\n * Creates a list of entries for the \"Hall of Fame\", the list of answers marked as \"very creative\".\r\n */\r\nexport const createHallOfFameData = (allPlayers: Map<string, PlayerInfo>, gameConfig: GameConfig, gameRounds: GameRound[]): HallOfFameEntry[] => {\r\n    const hallOfFameData: HallOfFameEntry[] = [];\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const playerInfo = allPlayers.get(playerId) as PlayerInfo;\r\n            playerInputs.forEach((playerInput, categoryIndex) => {\r\n                if (playerInput.valid && playerInput.star) {\r\n                    hallOfFameData.push({\r\n                        category: gameConfig.categories[categoryIndex],\r\n                        playerName: playerInfo.name,\r\n                        text: playerInput.text\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n    return hallOfFameData;\r\n};\r\n","import { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\nimport styles from './ToDashboardButton.module.css';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton: React.FunctionComponent<ToDashboardButtonProps> = props => {\r\n    return (\r\n        <div className={styles.button_wrapper}>\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDashboardButton;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"ToDashboardButton_button_wrapper__1EtAB\"};","import React from 'react';\r\nimport { GAME_OPTION_LABEL } from '../../constants/game.constant';\r\nimport { GameConfigScoringOptions } from '../../models/game.interface';\r\n\r\ninterface ScoringOptionsListProps {\r\n    rules: GameConfigScoringOptions;\r\n}\r\n\r\nconst ScoringOptionsList: React.FunctionComponent<ScoringOptionsListProps> = props => {\r\n    const { rules } = props;\r\n    const createFurtherOptionsElement = (): JSX.Element => (\r\n        <React.Fragment>\r\n            <p className=\"bold-text\">Regeln für die Punktevergabe:</p>\r\n            <ul>\r\n                {rules.checkForDuplicates ? <li>{GAME_OPTION_LABEL.checkForDuplicates}</li> : null}\r\n                {rules.onlyPlayerWithValidAnswer ? <li>{GAME_OPTION_LABEL.onlyPlayerWithValidAnswer}</li> : null}\r\n                {rules.creativeAnswersExtraPoints ? <li>{GAME_OPTION_LABEL.creativeAnswersExtraPoints}</li> : null}\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n    if (rules.checkForDuplicates || rules.onlyPlayerWithValidAnswer || rules.creativeAnswersExtraPoints) {\r\n        return createFurtherOptionsElement();\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default ScoringOptionsList;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"GameResults_button_wrapper__3kHLB\"};","import { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport React from 'react';\r\nimport { GameResultForPlayer } from '../../models/game.interface';\r\nimport { makePluralIfCountIsNotOne } from '../../utils/general.utils';\r\n\r\nconst useStyles = makeStyles({\r\n    listItem: {\r\n        flex: '0 0 auto',\r\n        justifyContent: 'center',\r\n        margin: 0,\r\n    },\r\n    listItemText: {\r\n        flex: '0 0 auto',\r\n        minWidth: '6rem',\r\n    },\r\n});\r\n\r\ninterface GameResultsListProps {\r\n    gameResults: GameResultForPlayer[];\r\n}\r\nconst GameResultsList: React.FunctionComponent<GameResultsListProps> = props => {\r\n    const classes = useStyles();\r\n    const mostPoints = Math.max(...props.gameResults.map(result => result.points));\r\n    const getResultIcon = (isWinner: boolean): JSX.Element => {\r\n        return isWinner ? <InsertEmoticonIcon color=\"primary\" fontSize=\"large\" /> : <FaceIcon fontSize=\"large\" />;\r\n    }\r\n    return (\r\n        <List>\r\n            {props.gameResults.map((result, index) => (\r\n                <ListItem key={'results-for-player-' + index} className={classes.listItem}>\r\n                    <ListItemIcon>\r\n                        {getResultIcon(result.points === mostPoints)}\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                        className={classes.listItemText}\r\n                        primary={result.playerName}\r\n                        secondary={`${result.points} ${makePluralIfCountIsNotOne(result.points, 'Punkt', 'Punkte')}`}\r\n                    />\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default GameResultsList;\r\n","import { Tooltip } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { createStyles, makeStyles, Theme, withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React from 'react';\r\nimport { GameConfig, GameRound, PlayerInput } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        head: {\r\n            backgroundColor: theme.palette.primary.main,\r\n            color: theme.palette.primary.contrastText,\r\n            maxWidth: '8rem',\r\n            '&:not(:last-child)': {\r\n                borderRight: '1px solid rgba(255, 255, 255, 0.5)',\r\n            },\r\n        },\r\n        body: {\r\n            fontSize: 14,\r\n            maxWidth: '8rem',\r\n            '&:not(:last-child)': {\r\n                borderRight: '1px solid rgba(224, 224, 224, 1)',\r\n            },\r\n        },\r\n    }),\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n        },\r\n    }),\r\n)(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    tableContainer: {\r\n        borderRadius: 0,\r\n    },\r\n    table: {\r\n        maxWidth: '80vw',\r\n    },\r\n    firstColumn: {\r\n        fontWeight: 'bold',\r\n    },\r\n    invalidInput: {\r\n        color: 'crimson',\r\n        textDecoration: 'line-through',\r\n    },\r\n    creativeAnswerStarIcon: {\r\n        paddingRight: '0.2rem',\r\n        fontSize: '1rem',\r\n        verticalAlign: 'text-top',\r\n    }\r\n});\r\n\r\ninterface GameRoundsTableProps {\r\n    gameConfig: GameConfig;\r\n    round: GameRound;\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\nconst GameRoundsTable: React.FunctionComponent<GameRoundsTableProps> = props => {\r\n    const classes = useStyles();\r\n    const { gameConfig, round, sortedPlayers } = props;\r\n\r\n    const veryCreativeAnswer = (playerInput: PlayerInput): JSX.Element => (\r\n        <React.Fragment>\r\n            <Tooltip\r\n                title=\"Als besonders kreativ markiert\"\r\n                placement=\"bottom\"\r\n            >\r\n                <StarIcon className={classes.creativeAnswerStarIcon} color=\"secondary\" />\r\n            </Tooltip>\r\n            <span>{playerInput.text} (+{playerInput.points})</span>\r\n        </React.Fragment>\r\n    );\r\n    const createTableRowForCategory = (category: string, categoryIndex: number): JSX.Element => {\r\n        return (\r\n            <StyledTableRow key={`slf-table-row-for-category-${categoryIndex}`}>\r\n                <StyledTableCell component=\"th\" scope=\"row\" className={classes.firstColumn}>{category}</StyledTableCell>\r\n                {sortedPlayers.map((player, playerIndex) => {\r\n                    const playerInput = (round.get(player.id) as PlayerInput[])[categoryIndex];\r\n                    return (\r\n                        <StyledTableCell\r\n                            key={`slf-table-cell-for-category-${categoryIndex}-player-${playerIndex}`}\r\n                            className={!playerInput.valid ? classes.invalidInput : ''}\r\n                            align=\"right\"\r\n                        >\r\n                            {playerInput.valid && playerInput.star ? veryCreativeAnswer(playerInput) : null}\r\n                            {playerInput.valid && !playerInput.star ? `${playerInput.text} (+${playerInput.points})` : null}\r\n                            {!playerInput.valid ? playerInput.text : null}\r\n                        </StyledTableCell>\r\n                    );\r\n                })}\r\n            </StyledTableRow>\r\n        );\r\n    };\r\n    return (\r\n        <TableContainer component={Paper} className={classes.tableContainer}>\r\n            <Table className={classes.table} aria-label=\"Die Spielrunde im Detail\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Kategorie</StyledTableCell>\r\n                        {sortedPlayers.map((player, playerIndex) => (\r\n                            <StyledTableCell\r\n                                key={`slf-table-head-cell-for-player-${playerIndex}`}\r\n                                align=\"right\"\r\n                            >{player.name}</StyledTableCell>\r\n                        ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {gameConfig.categories.map(createTableRowForCategory)}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default GameRoundsTable;\r\n","import { Button, Dialog, DialogActions, DialogContent, makeStyles, Theme } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport React, { useState } from 'react';\r\nimport { GameConfig, GameRound } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport GameRoundsTable from '../GameRoundsTable/GameRoundsTable';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\nconst TabPanel: React.FunctionComponent<TabPanelProps> = props => {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && children}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst a11yProps = (index: any) => ({\r\n    id: `scrollable-auto-tab-${index}`,\r\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        padding: '0 !important',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport interface GameRoundsOverviewDialogProps {\r\n    gameConfig: GameConfig;\r\n    open: boolean;\r\n    rounds: GameRound[];\r\n    sortedPlayers: PlayerInfo[];\r\n    onClose: () => void;\r\n}\r\nconst GameRoundsOverviewDialog: React.FunctionComponent<GameRoundsOverviewDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { gameConfig, open, rounds, sortedPlayers, onClose } = props;\r\n    const [tabValue, setTabValue] = React.useState(0);\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => setTabValue(newValue);\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open} maxWidth=\"lg\">\r\n            <DialogContent className={classes.root}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={tabValue}\r\n                        onChange={handleChange}\r\n                        indicatorColor=\"secondary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {rounds.map((_, index) => (\r\n                            <Tab\r\n                                key={`slf-game-rounds-overview-tab-${index}`}\r\n                                label={`Runde ${index + 1}: ${gameConfig.letters[index]}`}\r\n                                {...a11yProps(index)}\r\n                            />\r\n                        ))}\r\n                    </Tabs>\r\n                </AppBar>\r\n                {rounds.map((round, index) => (\r\n                    <TabPanel\r\n                        key={`slf-game-rounds-overview-tab-panel-${index}`}\r\n                        value={tabValue}\r\n                        index={index}\r\n                    >\r\n                        <GameRoundsTable gameConfig={gameConfig} round={round} sortedPlayers={sortedPlayers} />\r\n                    </TabPanel>\r\n                ))}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button type=\"button\" onClick={onClose}>Schließen</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\ninterface GameRoundsOverviewButtonProps {\r\n    gameConfig: GameConfig;\r\n    rounds: GameRound[];\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\n\r\n/**\r\n * Displays a button that opens a dialog with all player inputs, scoring etc. of all rounds.\r\n * The displayed data is organized in tabs, one tab per round.\r\n */\r\nconst GameRoundsOverviewButton: React.FunctionComponent<GameRoundsOverviewButtonProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<EventNoteIcon />}\r\n                onClick={() => setOpen(true)}\r\n            >Alle Runden im Detail</Button>\r\n            <GameRoundsOverviewDialog\r\n                gameConfig={props.gameConfig}\r\n                open={open}\r\n                rounds={props.rounds}\r\n                sortedPlayers={props.sortedPlayers}\r\n                onClose={handleClose}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default GameRoundsOverviewButton;\r\n","import {\r\n    Button,\r\n    Chip,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    Divider,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React, { useState } from 'react';\r\nimport { HallOfFameEntry } from '../../models/game.interface';\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        paddingBottom: 0,\r\n    },\r\n    listItem: {\r\n        padding: '0.25rem 0',\r\n    },\r\n    listItemAvatar: {\r\n        marginRight: '1rem',\r\n    },\r\n});\r\n\r\nexport interface HallOfFameDialogProps {\r\n    hallOfFameData: HallOfFameEntry[];\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\nconst HallOfFameDialog: React.FunctionComponent<HallOfFameDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { hallOfFameData, open, onClose } = props;\r\n    return (\r\n        <Dialog onClose={onClose} open={open} maxWidth=\"lg\">\r\n            <DialogContent>\r\n                <DialogContentText>Hall of Fame</DialogContentText>\r\n                <Divider />\r\n                <List className={classes.list}>\r\n                    {hallOfFameData.map((item, index) => (\r\n                        <ListItem key={`slf-hall-of-fame-item-${index}`} className={classes.listItem}>\r\n                            <ListItemAvatar className={classes.listItemAvatar}>\r\n                                <Chip\r\n                                    icon={<FaceIcon />}\r\n                                    color=\"primary\"\r\n                                    label={item.playerName}\r\n                                />\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={item.text}\r\n                                secondary={item.category}\r\n                            />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button type=\"button\" onClick={onClose}>Schließen</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\ninterface HallOfFameButtonProps {\r\n    hallOfFameData: HallOfFameEntry[];\r\n}\r\n\r\n/**\r\n * Displays a button that opens a dialog with all player inputs that were marked as \"very creative\".\r\n */\r\nconst HallOfFameButton: React.FunctionComponent<HallOfFameButtonProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<StarIcon />}\r\n                disabled={props.hallOfFameData.length === 0}\r\n                onClick={() => setOpen(true)}\r\n            >Hall of Fame</Button>\r\n            <HallOfFameDialog\r\n                hallOfFameData={props.hallOfFameData}\r\n                open={open}\r\n                onClose={handleClose}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default HallOfFameButton;\r\n","import { Divider } from '@material-ui/core';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport GameResultsList from '../../components/GameResultsList/GameResultsList';\r\nimport GameRoundsOverviewButton from '../../components/GameRoundsOverviewButton/GameRoundsOverviewButton';\r\nimport HallOfFameButton from '../../components/HallOfFameButton/HallOfFameButton';\r\nimport ScoringOptionsList from '../../components/ScoringOptionsList/ScoringOptionsList';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { GameConfig, GameResultForPlayer, HallOfFameEntry, GameRound } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { AppAction, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { calculateGameResults, createHallOfFameData, getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\nimport styles from './GameResults.module.css';\r\n\r\ninterface GameResultsDispatchProps {\r\n    onResetAppState: () => void;\r\n}\r\ninterface GameResultsProps extends AppState, GameResultsDispatchProps, RouterProps { }\r\ninterface GameResultsState {\r\n    gameConfig: GameConfig | null;\r\n    gameResults: GameResultForPlayer[];\r\n    gameRounds: GameRound[];\r\n    hallOfFameData: HallOfFameEntry[];\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\n\r\nclass GameResults extends Component<GameResultsProps, GameResultsState> {\r\n    public state: GameResultsState = {\r\n        gameConfig: null,\r\n        gameResults: [],\r\n        gameRounds: [],\r\n        hallOfFameData: [],\r\n        sortedPlayers: []\r\n    };\r\n\r\n    public render() {\r\n        const { gameConfig, gameResults, gameRounds, hallOfFameData, sortedPlayers } = this.state;\r\n        if (gameConfig === null) { return null; }\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Ergebnis\"></SectionHeader>\r\n                    <GameResultsList gameResults={gameResults} />\r\n                    <Divider />\r\n                    <div className={styles.button_wrapper}>\r\n                        <GameRoundsOverviewButton\r\n                            gameConfig={gameConfig}\r\n                            rounds={gameRounds}\r\n                            sortedPlayers={sortedPlayers}\r\n                        />\r\n                        <HallOfFameButton hallOfFameData={hallOfFameData} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spieleinstellungen\"></SectionHeader>\r\n                    <p><span className=\"bold-text\">Runden:</span> {gameConfig.numberOfRounds}</p>\r\n                    <p><span className=\"bold-text\">Buchstaben:</span> {gameConfig.letters.join(', ')}</p>\r\n                    <p><span className=\"bold-text\">Kategorien:</span> {gameConfig.categories.join(', ')}</p>\r\n                    <ScoringOptionsList rules={gameConfig.scoringOptions} />\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={() => this.props.history.push('/')} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { allPlayers, gameConfig, gameRounds} = this.props;\r\n        // If there is no data present in application state, then reroute user to dashboard.\r\n        if (allPlayers === null || gameConfig === null || gameRounds === null) {\r\n            this.props.history.push('/');\r\n        } else {\r\n            this.setState({\r\n                gameConfig,\r\n                gameResults: calculateGameResults(allPlayers, gameRounds),\r\n                gameRounds,\r\n                hallOfFameData: createHallOfFameData(allPlayers, gameConfig, gameRounds),\r\n                sortedPlayers: getPlayersInAlphabeticalOrder(allPlayers)\r\n            });\r\n            this.props.onResetAppState();\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppState => state;\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): GameResultsDispatchProps => {\r\n    return {\r\n        onResetAppState: () => dispatch(resetAppState())\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults);\r\n"],"sourceRoot":""}