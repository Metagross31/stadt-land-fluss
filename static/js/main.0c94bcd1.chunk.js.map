{"version":3,"sources":["constants/themes.constant.ts","constants/game.constant.ts","components/Header/Header.tsx","components/SectionHeader/SectionHeader.tsx","containers/Dashboard/Dashboard.tsx","components/ToDashboardButton/ToDashboardButton.tsx","store/app.actions.ts","components/ChipsArray/ChipsArray.tsx","utils/game.utils.ts","utils/general.utils.ts","containers/GameResults/GameResults.tsx","config/pubnub.config.ts","containers/JoinGame/JoinGame.tsx","components/AddCustomCategory/AddCustomCategory.tsx","containers/NewGame/NewGame.tsx","models/pub-nub-data.model.ts","components/LoadingScreen/LoadingScreen.tsx","components/GameRoundChip/GameRoundChip.tsx","components/PhaseEvaluateRound/PhaseEvaluateRound.tsx","components/PhaseFillOutTextfields/PhaseFillOutTextfields.tsx","components/JoinGameLink/JoinGameLink.tsx","components/PlayerList/PlayerList.tsx","components/PhaseWaitingToStart/PhaseWaitingToStart.tsx","components/PubNubEventHandler/PubNubEventHandler.tsx","components/LetterAnimation/LetterAnimation.tsx","containers/PlayGame/PlayGame.tsx","utils/local-storage.utils.ts","App.tsx","serviceWorker.ts","store/app.reducer.ts","index.tsx"],"names":["APP_THEME_ID","GamePhase","AppThemes","id","green","animationBackgroundColor","className","displayName","muiTheme","createMuiTheme","palette","primary","secondary","red","style","background","process","blue","deepOrange","orange","indigo","pink","purple","amber","black","blueGrey","Header","state","anchorEl","version","handleClick","event","setState","currentTarget","handleClose","color","handleMenuItemClick","selectedTheme","props","switchTheme","playerNameParagraph","this","playerName","theme","href","target","rel","aria-label","Button","aria-controls","aria-haspopup","onClick","Menu","keepMounted","open","Boolean","onClose","map","item","index","MenuItem","key","packageJson","Component","connect","playerInfo","name","SectionHeader","Fragment","text","showDivider","Divider","Dashboard","Link","component","RouterLink","to","src","alt","ToDashboardButton","type","variant","size","startIcon","onReturnToDashboard","setDataForNewGame","payload","ALPHABET_WITHOUT_QXY","STANDARD_CATEGORIES","AVAILABLE_CATEGORIES","ChipType","getRandomnLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToRandomnlySelectFrom","i","randomnLetter","randomnItem","push","filter","letter","markEmptyPlayerInputsAsInvalid","playerInputs","input","valid","createGameRoundEvaluation","players","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","_","evaluationForOneCategory","evaluatingPlayer","set","getMinNumberOfMarkedAsInvalid","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","processPlayerInputEvaluations","gameRound","roundEvaluation","minNumberOfInvalids","evaluatedGameRound","cloneDeep","playerId","get","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","points","round","reduce","total","Object","keys","sort","a","b","createAndFillArray","value","Array","fill","GameResults","getResultIcon","isWinner","fontSize","returnToDashboard","history","onResetAppState","gameConfig","mostPoints","Math","max","result","List","ListItem","ListItemIcon","ListItemText","singular","plural","numberOfRounds","letters","join","dispatch","PUBNUB_KEYS","require","PUBNUB_CONFIG","publishKey","subscribeKey","uuid","uuidv4","ssl","JoinGame","idInput","nameInput","validateInputs","handleInputChange","handleSubmit","preventDefault","trim","onSetGameData","gameId","isAdmin","joinGameForm","onSubmit","noValidate","autoComplete","TextField","label","onChange","fullWidth","required","error","query","URLSearchParams","location","search","has","useStyles","makeStyles","createStyles","lessPadding","padding","dialog","minWidth","CustomCategoryDialog","classes","useState","categoryInput","setCategoryInput","setValidateInputs","Dialog","aria-labelledby","stopPropagation","trimmedCategoryInput","DialogContent","DialogContentText","autoFocus","margin","DialogActions","AddCustomCategory","setOpen","Tooltip","title","placement","IconButton","newCategory","addCustomCategory","CategoryArray","root","display","justifyContent","flexWrap","spacing","chip","chipIcon","backgroundColor","ChipsArray","chipsArray","Chip","chipType","undefined","icon","removeChip","children","PubNubMessageType","NewGame","availableCategories","numberOfRoundsInput","selectedCategories","handleNameInputChange","handleNumberOfRoundsInputChange","updateCategoryArrays","chipToRemove","removeFromArray","newSelectedCategories","newAvailableCategories","selected","category","numberOfRoundsInputLabel","newGameForm","available","loadingScreen","position","top","left","height","width","centralContent","transform","marginBlockStart","fontWeight","textAlign","loadingSpinner","loadingSpinnerSize","LoadingScreen","messageElement","message","CircularProgress","centerContent","marginTop","borderRadius","boxShadow","GameRoundChip","currentLetter","currentRound","PhaseEvaluateRound","getMinNumberOfNecessaryMarkedAsInvalid","finishedGameRound","sortedPlayers","from","data","charCodeAt","createEvaluationCheckboxesAndSearchLink","categoryIndex","indexInSortedPlayers","player","evaluationForCategory","currentRoundEvaluation","playerInput","searchLink","encodeURIComponent","getEvaluatedByText","Checkbox","checked","inputProps","checkboxOwner","updateEvaluationOfPlayerInput","evaluatedPlayerId","handleCheckboxChange","InputProps","startAdornment","InputAdornment","sendEvaluationFinishedMessage","PhaseFillOutTextfields","gameRoundInputs","newGameRoundInputs","updateCurrentRoundInputs","sendRoundFinishedMessage","PubNubCurrentRoundInputsMessage","currentRoundInputs","PubNubEvaluationOfPlayerInputMessage","evaluationOfPlayerInput","JoinGameLink","React","url","window","joinGameLink","slice","OutlinedInput","disabled","endAdornment","element","document","createElement","setAttribute","body","appendChild","select","execCommand","removeChild","copyToClipboard","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","PlayerList","playerNames","PhaseWaitingToStart","waitForGameStartElement","createGameSettingsElement","sendMessage","startGame","memo","pubNubClient","usePubNub","setUserState","newUserState","channels","gameChannel","getHereNowData","hereNow","includeUUIDs","includeState","response","console","log","dataForGameChannel","pubNubUserStates","occupants","occupant","userState","addPlayers","useEffect","pubNubListeners","messageEvent","roundFinished","stopRoundAndSendInputs","addPlayerInputForFinishedRound","publisher","processEvaluationOfPlayerInput","evaluationFinished","countPlayerAsEvaluationFinished","presence","presenceEvent","action","status","statusEvent","channel","messages","navigateToDashboard","setTimeout","addListener","subscribe","withPresence","removeListener","unsubscribeAll","Particle","x","y","radius","ctx","save","translate","fillStyle","fillRect","restore","ParticleAlphabet","callbackWhenAnimationDone","canvas","currentPos","particlePositions","particles","tmpCanvas","tmpCtx","time","counter","myInterval","activeTheme","animate","requestAnimationFrame","animateParticles","querySelector","getContext","mainElement","find","classList","contains","offsetWidth","offsetHeight","setInterval","changeLetter","getPixels","clearInterval","makeParticles","num","random","keyword","innerWidth","innerHeight","font","fillText","measureText","idata","getImageData","buffer32","Uint32Array","buffer","p","pPos","indexOf","draw","LetterAnimation","lettersToUse","letterToUnveil","lettersForAnimation","LETTER_ANIMATION_LETTER_COUNT","init","PlayGame","currentPhase","waitingToStart","loadingScreenMessage","playersThatFinishedEvaluation","showLetterAnimation","showLoadingScreen","PubNub","publish","storeInHistory","ttl","newPlayers","newPlayer","roundInputs","fillOutTextfields","newCurrentRoundInputs","toPubNubMessage","playerInputsForFinishedRound","evaluateRound","newEvaluation","evaluatingPlayerId","playerInputEvaluations","processEvaluationsAndStartNextRoundOrFinishGame","newGameRounds","onSetDataOfFinishedGame","currentPhaseElement","letterAnimationElement","loadingScreenElement","client","setDataOfFinishedGame","setAppThemeIdInLocalStorage","appTheme","localStorage","setItem","backspaceDisabler","App","switchThemeHandler","newTheme","ThemeProvider","basename","path","exact","disable","appThemeId","getItem","hostname","match","initialState","appStore","createStore","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0c94bcd1.chunk.js","sourcesContent":["import green from '@material-ui/core/colors/green';\r\nimport red from '@material-ui/core/colors/red';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport deepOrange from '@material-ui/core/colors/deepOrange';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport { createMuiTheme, Theme } from '@material-ui/core/styles';\r\nimport CSS from 'csstype';\r\n\r\nexport enum APP_THEME_ID {\r\n    green = 'green',\r\n    blue = 'blue',\r\n    orange = 'orange',\r\n    pink = 'pink',\r\n    black = 'black'\r\n}\r\n\r\nexport interface AppTheme {\r\n    id: APP_THEME_ID;\r\n    /** The background color used by the LetterAnimation component */\r\n    animationBackgroundColor: string;\r\n    /** The name of the CSS class that is applied to the header and the main element */\r\n    className: string;\r\n    /** The text displayed in the header's color picker dropdown */\r\n    displayName: string;\r\n    muiTheme: Theme;\r\n    style: CSS.Properties;\r\n}\r\n\r\nexport const AppThemes: AppTheme[] = [\r\n    {\r\n        id: APP_THEME_ID.green,\r\n        animationBackgroundColor: 'rgb(31, 121, 52)',\r\n        className: 'green-theme',\r\n        displayName: 'Grün/Wald',\r\n        muiTheme: createMuiTheme({ palette: { primary: green, secondary: red } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(60, 143, 80, 0.3), rgba(60, 143, 80, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/leaves-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.blue,\r\n        animationBackgroundColor: 'rgb(9, 100, 204)',\r\n        className: 'blue-theme',\r\n        displayName: 'Blau/Meer',\r\n        muiTheme: createMuiTheme({ palette: { primary: blue, secondary: deepOrange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/sea-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.orange,\r\n        animationBackgroundColor: 'rgb(187, 138, 5)',\r\n        className: 'orange-theme',\r\n        displayName: 'Orange/Strand',\r\n        muiTheme: createMuiTheme({ palette: { primary: orange, secondary: indigo } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(241, 179, 8, 0.3), rgba(240, 188, 47, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/beach-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.pink,\r\n        animationBackgroundColor: 'rgb(167, 34, 207)',\r\n        className: 'pink-theme',\r\n        displayName: 'Pink/Musik',\r\n        muiTheme: createMuiTheme({ palette: { primary: purple, secondary: amber } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(133, 14, 103, 0.3), rgba(133, 14, 103, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/music-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.black,\r\n        animationBackgroundColor: 'rgb(0, 0, 0)',\r\n        className: 'black-theme',\r\n        displayName: 'Schwarz/Goth',\r\n        muiTheme: createMuiTheme({ palette: { primary: blueGrey, secondary: orange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(0, 51, 153, 0.1), rgba(0, 51, 153, 0.1)),\r\n                url('${process.env.PUBLIC_URL}/assets/halloween-pattern.jpg')`\r\n        }\r\n    },\r\n]\r\n","export const MIN_NUMBER_OF_ROUNDS = 3;\r\nexport const MAX_NUMBER_OF_ROUNDS = 10;\r\n\r\nexport const ALPHABET_WITHOUT_QXY = [\r\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\r\n    'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'Z'\r\n];\r\n\r\nexport const STANDARD_CATEGORIES = ['Stadt', 'Land', 'Fluss'];\r\nexport const AVAILABLE_CATEGORIES = [\r\n    'Band/Musiker',\r\n    'Berg/Gebirge',\r\n    'Beruf',\r\n    'Berühmte Person',\r\n    'Buchtitel',\r\n    'Chemisches Element',\r\n    'Etwas Eckiges',\r\n    'Etwas Rundes',\r\n    'Fiktiver Charakter',\r\n    'Film/Serie',\r\n    'Getränk',\r\n    'Grund für eine Verspätung',\r\n    'Hobby',\r\n    'Körperteil',\r\n    'Krankheit',\r\n    'Laster',\r\n    'Marke',\r\n    'Mordwaffe',\r\n    'Pflanze',\r\n    'Pizzasorte',\r\n    'Religion',\r\n    'Scheidungsgrund',\r\n    'Schimpfwort',\r\n    'Sehenswürdigkeit',\r\n    'See/Meer',\r\n    'Sex (Synonym)',\r\n    'Speise',\r\n    'Tier',\r\n    'Unnötige Superkraft',\r\n    'Videospiel',\r\n    'Werkzeug',\r\n    'Wort in einer Fremdsprache'\r\n];\r\n\r\nexport enum GamePhase {\r\n    waitingToStart = 'waitingToStart',\r\n    fillOutTextfields = 'fillOutTextfields',\r\n    evaluateRound = 'evaluateRound',\r\n    gameResult = 'gameResult'\r\n}\r\n\r\nexport const MIN_NUMBER_OF_PLAYERS = 2;\r\n\r\nexport const LETTER_ANIMATION_LETTER_COUNT = 5;\r\nexport const LETTER_ANIMATION_REDRAW_SPEED = 800;\r\n","import React, { Component } from 'react';\r\nimport './Header.css';\r\nimport { Button, Menu, MenuItem } from '@material-ui/core';\r\nimport { AppThemes, AppTheme } from '../../constants/themes.constant';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport packageJson from '../../../package.json';\r\n\r\ninterface HeaderPropsFromStore {\r\n    playerName: string | null;\r\n}\r\ninterface HeaderProps extends HeaderPropsFromStore {\r\n    switchTheme: (newTheme: AppTheme) => any;\r\n    theme: AppTheme;\r\n}\r\ninterface HeaderState {\r\n    anchorEl: EventTarget | null;\r\n    version: string;\r\n}\r\n\r\nexport class Header extends Component<HeaderProps, HeaderState> {\r\n    public state = {\r\n        anchorEl: null,\r\n        version: ''\r\n    };\r\n\r\n    public render() {\r\n        const playerNameParagraph = (\r\n            <p>Spieler: {this.props.playerName ? this.props.playerName : '-'}</p>\r\n        );\r\n        return (\r\n            <header className={'app-header ' + this.props.theme.className}>\r\n                <h1>Stadt-Land-Fluss</h1>\r\n                {playerNameParagraph}\r\n                <div className=\"about-section\">\r\n                    <p>v{this.state.version}</p>\r\n                    <a\r\n                        href=\"https://github.com/alexlehner86\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        aria-label=\"Mehr über den Autor erfahren (öffnet neues Fenster)\"\r\n                    >Autor</a>\r\n                </div>\r\n                <Button\r\n                    className=\"color-picker-button\"\r\n                    aria-controls=\"color-picker-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={this.handleClick}\r\n                >\r\n                    Theme\r\n                </Button>\r\n                <Menu\r\n                    id=\"color-picker-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {AppThemes.map((item, index) => (\r\n                        <MenuItem\r\n                            key={'color-picker-menu-item-' + index}\r\n                            onClick={() => this.handleMenuItemClick(item)}\r\n                        >{item.displayName}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({ version: packageJson.version });\r\n    }\r\n\r\n    private handleClick = (event: any) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    private handleClose = (color: string) => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    private handleMenuItemClick = (selectedTheme: AppTheme) => {\r\n        this.setState({ anchorEl: null });\r\n        this.props.switchTheme(selectedTheme);\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): HeaderPropsFromStore => {\r\n    return {\r\n        playerName: state.playerInfo ? state.playerInfo.name : ''\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Header);\r\n","import './SectionHeader.css';\r\nimport { Divider } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ninterface SectionHeaderProps {\r\n    showDivider: boolean;\r\n    text: string;\r\n}\r\n\r\nexport const SectionHeader: React.FunctionComponent<SectionHeaderProps> = props => (\r\n    <React.Fragment>\r\n        <h2 className=\"section-header\">{props.text}</h2>\r\n        {props.showDivider ? <Divider /> : null}\r\n    </React.Fragment>\r\n);\r\n","import './Dashboard.css';\r\nimport Link from '@material-ui/core/Link';\r\nimport React, { Component } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\n\r\nexport class Dashboard extends Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"dashboard-container material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Dashboard\"></SectionHeader>\r\n                    <div className=\"link-container\">\r\n                        <Link component={RouterLink} to=\"/newgame\">Neues Spiel</Link>\r\n                        <Link component={RouterLink} to=\"/joingame\">Spiel beitreten</Link>\r\n                    </div>\r\n                    <img\r\n                        src={`${process.env.PUBLIC_URL}/assets/city-country-river.jpg`}\r\n                        alt=\"Stadt, Land, Fluss\"\r\n                        className=\"dashboard-slf-image\"\r\n                    />\r\n                    <div className=\"img-copyright\">\r\n                        <h3>Credits/Bilder</h3>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/830131-river-city-landscape-with-buildings-hills-and-trees\" target=\"_blank\" rel=\"noopener noreferrer\">Homepage/Stadt-Land-Fluss by pikgura – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/276920-abstract-seamless-pattern-with-tropical-leaves\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Grün/Wald by NadiaGrapes – www.vecteezy.com</a>\r\n                        <a href=\"https://www.freepik.com/free-photos-vectors/background\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Blau/Meer by macrovector – www.freepik.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/460735-seashell-sand-seamless-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Orange/Strand by Macrovector – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/454258-music-seamless\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Pink/Musik by Macrovector – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/662038-cat-and-bat-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Schwarz/Goth by angyee – www.vecteezy.com</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './ToDashboardButton.css';\r\nimport { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton: React.FunctionComponent<ToDashboardButtonProps> = props => {\r\n    return (\r\n        <div className=\"button-wrapper to-dashboard-button\">\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDashboardButton;\r\n","import { PlayerInfo } from './../models/player.interface';\r\nimport { Action } from \"redux\";\r\nimport { GameConfig, GameRound } from \"../models/game.interface\";\r\n\r\nexport const SET_DATA_FOR_NEW_GAME = 'SET_DATA_FOR_NEW_GAME';\r\nexport const SET_DATA_OF_FINISHED_GAME = 'SET_DATA_OF_FINISHED_GAME';\r\nexport const RESET_APP_STATE = 'RESET_APP_STATE';\r\n\r\nexport interface SetDataForNewGamePayload {\r\n    gameId: string;\r\n    gameConfig: GameConfig | null;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\nexport interface SetDataForNewGameAction extends Action {\r\n    payload: SetDataForNewGamePayload\r\n}\r\nexport interface SetDataOfFinishedGamePayload {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n}\r\nexport interface SetDataOfFinishedGameAction extends Action {\r\n    payload: SetDataOfFinishedGamePayload\r\n}\r\nexport interface ResetAppStateAction extends Action {}\r\nexport type AppAction = SetDataForNewGameAction | SetDataOfFinishedGameAction | ResetAppStateAction;\r\n\r\n/*\r\n * Action Creators\r\n */\r\nexport const setDataForNewGame = (payload: SetDataForNewGamePayload): SetDataForNewGameAction => {\r\n    return { type: SET_DATA_FOR_NEW_GAME, payload }\r\n};\r\nexport const setDataOfFinishedGame = (payload: SetDataOfFinishedGamePayload): SetDataOfFinishedGameAction => {\r\n    return { type: SET_DATA_OF_FINISHED_GAME, payload }\r\n};\r\nexport const resetAppState = (): ResetAppStateAction => {\r\n    return { type: RESET_APP_STATE }\r\n};\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport React from 'react';\r\n\r\nexport enum ChipType {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n        chipIcon: {\r\n            backgroundColor: 'inherit'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface ChipsArrayProps {\r\n    chipsArray: string[];\r\n    chipType: ChipType;\r\n    removeChip: (chip: string) => any;\r\n}\r\n\r\nconst ChipsArray: React.FunctionComponent<ChipsArrayProps> = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.chipsArray.map((chip, index) => (\r\n                <Chip\r\n                    key={`chip-to-${props.chipType}-${index}`}\r\n                    color={props.chipType === 'selected' ? 'primary' : undefined}\r\n                    icon={props.chipType === 'selected' ? <DoneIcon className=\"chip-icon-no-bg\" /> : <ChevronRightIcon />}\r\n                    label={chip}\r\n                    className={classes.chip}\r\n                    onClick={() => props.removeChip(chip)}\r\n                />\r\n            ))}\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChipsArray;\r\n","import { cloneDeep } from 'lodash';\r\nimport randomnItem from 'random-item';\r\nimport { ALPHABET_WITHOUT_QXY } from '../constants/game.constant';\r\nimport { PlayerInput } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { GameResultForPlayer, GameRound, GameRoundEvaluation, PlayerInputEvaluation } from './../models/game.interface';\r\n\r\n/**\r\n* Returns an array of unique letters. The number of letters is defined by the parameter numberOfLetters.\r\n* If the second argument is not provided, then the standard alphabet (excluding Q, X and Y) is used.\r\n*/\r\nexport const getRandomnLetters = (numberOfLetters: number, possibleLetters = ALPHABET_WITHOUT_QXY): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToRandomnlySelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToRandomnlySelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToRandomnlySelectFrom = lettersToRandomnlySelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\n /**\r\n * Checks each PlayerInput object whether it contains text.\r\n * If text string is empty, valid is set to false, otherwise to true.\r\n */\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(_ => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfMarkedAsInvalid = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\nexport const processPlayerInputEvaluations = (\r\n    gameRound: GameRound, roundEvaluation: GameRoundEvaluation, minNumberOfInvalids: number\r\n): GameRound => {\r\n    const evaluatedGameRound = cloneDeep(gameRound);\r\n    evaluatedGameRound.forEach((playerInputs, playerId) => {\r\n        const evaluations = roundEvaluation.get(playerId) as PlayerInputEvaluation[];\r\n        for (let i = 0; i < playerInputs.length; i++) {\r\n            // Only process evaluations for inputs that were not\r\n            // already marked as invalid because of being empty strings.\r\n            if (playerInputs[i].valid) {\r\n                playerInputs[i].valid = getNumberOfInvalids(evaluations[i]) < minNumberOfInvalids;\r\n            }\r\n        }\r\n    });\r\n    return evaluatedGameRound;\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: { [key: string]: GameResultForPlayer } = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => input.valid ? total + 1 : total, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n}\r\n","export const copyToClipboard = (text: string) => {\r\n    const element = document.createElement('textarea');\r\n    element.value = text;\r\n    element.setAttribute('readonly', '');\r\n    element.style.position = 'absolute';\r\n    element.style.left = '-9999px';\r\n    document.body.appendChild(element);\r\n    element.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(element);\r\n};\r\n\r\nexport const createAndFillArray = <T>(length: number, value: T): T[] => {\r\n    return new Array(length).fill(value);\r\n};\r\n\r\nexport const makePluralIfCountIsNotOne = (count: number, singular: string, plural: string): string => {\r\n    return count === 1 ? singular : plural;\r\n};\r\n","import { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\n\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { GameConfig, GameResultForPlayer } from '../../models/game.interface';\r\nimport { AppAction, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { calculateGameResults } from '../../utils/game.utils';\r\nimport { makePluralIfCountIsNotOne } from '../../utils/general.utils';\r\n\r\ninterface GameResultsDispatchProps {\r\n    onResetAppState: () => void;\r\n}\r\ninterface GameResultsProps extends AppState, GameResultsDispatchProps, RouterProps { }\r\ninterface GameResultsState {\r\n    gameResults: GameResultForPlayer[];\r\n}\r\n\r\nclass GameResults extends Component<GameResultsProps, GameResultsState> {\r\n    public state: GameResultsState = { gameResults: [] };\r\n\r\n    public render() {\r\n        if (this.props.gameRounds === null) { return null; }\r\n        const gameConfig = this.props.gameConfig as GameConfig;\r\n        const mostPoints = Math.max(...this.state.gameResults.map(result => result.points));\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Ergebnis\"></SectionHeader>\r\n                    <List>\r\n                        {this.state.gameResults.map((result, index) => (\r\n                            <ListItem key={'results-for-player-' + index}>\r\n                                <ListItemIcon>\r\n                                    {this.getResultIcon(result.points === mostPoints)}\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary={result.playerName}\r\n                                    secondary={`${result.points} ${makePluralIfCountIsNotOne(result.points, 'Punkt', 'Punkte')}`}\r\n                                />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </div>\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiele-Settings\"></SectionHeader>\r\n                    <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                    <p>Buchstaben: {gameConfig.letters.join(', ')}</p>\r\n                    <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // If there are no allPlayers or gameRounds present in application state, then reroute user to dashboard.\r\n        if (this.props.allPlayers === null || this.props.gameRounds === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        this.setState({ gameResults: calculateGameResults(this.props.allPlayers, this.props.gameRounds) });\r\n    }\r\n\r\n    private getResultIcon = (isWinner: boolean): JSX.Element => {\r\n        return isWinner ? <StarIcon color=\"primary\" fontSize=\"large\" /> : <FaceIcon fontSize=\"large\" />;\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n        this.props.onResetAppState();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppState => state;\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): GameResultsDispatchProps => {\r\n    return {\r\n        onResetAppState: () => {\r\n            dispatch(resetAppState())\r\n        }\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults);\r\n","import PubNub from 'pubnub';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst PUBNUB_KEYS = require('./pubnub.config.json');\r\n\r\nexport const PUBNUB_CONFIG: PubNub.PubnubConfig = {\r\n    publishKey: PUBNUB_KEYS.publishKey,\r\n    subscribeKey: PUBNUB_KEYS.subscribeKey,\r\n    uuid: uuidv4(), // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d',\r\n    ssl: true\r\n};\r\n","import './JoinGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\n\r\ninterface JoinGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface JoinGameProps extends JoinGameDispatchProps, RouteComponentProps {}\r\ninterface JoinGameState {\r\n    idInput: string;\r\n    nameInput: string;\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass JoinGame extends Component<JoinGameProps, JoinGameState> {\r\n    public state: JoinGameState = {\r\n        idInput: '',\r\n        nameInput: '',\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const joinGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"idInput\"\r\n                    label=\"Spiel-ID\"\r\n                    value={this.state.idInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.idInput}\r\n                />\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                />\r\n                <div className=\"button-wrapper\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<DirectionsWalkIcon />}\r\n                    >Beitreten</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiel beitreten\"></SectionHeader>\r\n                    {joinGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        if (query.has('id')) {\r\n            this.setState({ idInput: query.get('id') as string });\r\n        }\r\n    }\r\n\r\n    private handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value } as any);\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (this.state.idInput && this.state.nameInput.trim()) {\r\n            this.props.onSetGameData({\r\n                gameConfig: null,\r\n                gameId: this.state.idInput,\r\n                playerInfo: {\r\n                    id: PUBNUB_CONFIG.uuid as string,\r\n                    isAdmin: false,\r\n                    name: this.state.nameInput.trim()\r\n                }\r\n            });\r\n            this.props.history.push('/play');\r\n        } else {\r\n            this.setState({ nameInput: this.state.nameInput.trim(), validateInputs: true });\r\n        }\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): JoinGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => {\r\n            dispatch(setDataForNewGame(payload))\r\n        }\r\n    }\r\n};\r\nexport default connect(null, mapDispatchToProps)(JoinGame);\r\n","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    IconButton,\r\n    TextField,\r\n    Tooltip,\r\n} from '@material-ui/core';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport React, { FormEvent, useState } from 'react';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        lessPadding: {\r\n            padding: '0.375rem 0.5rem'\r\n        },\r\n        dialog: {\r\n            minWidth: '20rem'\r\n        }\r\n    }),\r\n);\r\n\r\nexport interface CustomCategoryDialogProps {\r\n    open: boolean;\r\n    onClose: (newCategory: string | null) => void;\r\n}\r\nconst CustomCategoryDialog: React.FunctionComponent<CustomCategoryDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { onClose, open } = props;\r\n    const [categoryInput, setCategoryInput] = useState('');\r\n    const [validateInputs, setValidateInputs] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        onClose(null);\r\n    };\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const trimmedCategoryInput = categoryInput.trim();\r\n        if (trimmedCategoryInput !== '') {\r\n            setCategoryInput('');\r\n            setValidateInputs(false);\r\n            onClose(trimmedCategoryInput);\r\n        } else {\r\n            setCategoryInput('');\r\n            setValidateInputs(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n            <form onSubmit={handleSubmit} className={classes.dialog} noValidate autoComplete=\"off\">\r\n                <DialogContent>\r\n                    <DialogContentText>Kategorie hinzufügen</DialogContentText>\r\n                    <TextField\r\n                        id=\"new-category-input\"\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        required\r\n                        value={categoryInput}\r\n                        error={validateInputs && !categoryInput}\r\n                        onChange={event => setCategoryInput(event.target.value)}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={handleClose}\r\n                    >Abbrechen</Button>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                    >Hinzufügen</Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\ninterface AddCustomCategoryProps {\r\n    addCustomCategory: (newCategory: string) => any;\r\n}\r\nconst AddCustomCategory: React.FunctionComponent<AddCustomCategoryProps> = props => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = (newCategory: string | null) => {\r\n        setOpen(false);\r\n        if (newCategory) {\r\n            props.addCustomCategory(newCategory);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Tooltip\r\n                title=\"Kategorie hinzufügen\"\r\n                placement=\"right\"\r\n            >\r\n                <IconButton\r\n                    className={classes.lessPadding}\r\n                    aria-label=\"Kategorie hinzufügen\"\r\n                    onClick={() => setOpen(true)}\r\n                >\r\n                    <AddCircleOutlineIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <CustomCategoryDialog open={open} onClose={newCategory => handleClose(newCategory)} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AddCustomCategory;\r\n","import './NewGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport AddCustomCategory from '../../components/AddCustomCategory/AddCustomCategory';\r\nimport ChipsArray, { ChipType } from '../../components/ChipsArray/ChipsArray';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport {\r\n    AVAILABLE_CATEGORIES,\r\n    MAX_NUMBER_OF_ROUNDS,\r\n    MIN_NUMBER_OF_ROUNDS,\r\n    STANDARD_CATEGORIES,\r\n} from '../../constants/game.constant';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\n\r\nenum CategoryArray {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\ninterface NewGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface NewGameProps extends NewGameDispatchProps, RouteComponentProps { }\r\ninterface NewGameState {\r\n    availableCategories: string[];\r\n    nameInput: string;\r\n    numberOfRoundsInput: number;\r\n    selectedCategories: string[];\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass NewGame extends Component<NewGameProps, NewGameState> {\r\n    public state: NewGameState = {\r\n        availableCategories: AVAILABLE_CATEGORIES,\r\n        nameInput: '',\r\n        numberOfRoundsInput: MIN_NUMBER_OF_ROUNDS,\r\n        selectedCategories: STANDARD_CATEGORIES,\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const numberOfRoundsInputLabel = `Anzahl Runden (${MIN_NUMBER_OF_ROUNDS}-${MAX_NUMBER_OF_ROUNDS})`;\r\n        const newGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleNameInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                />\r\n                <TextField\r\n                    name=\"numberOfRoundsInput\"\r\n                    label={numberOfRoundsInputLabel}\r\n                    type=\"number\"\r\n                    value={this.state.numberOfRoundsInput}\r\n                    onChange={this.handleNumberOfRoundsInputChange}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                />\r\n                <p className=\"category-array-label\">Ausgewählte Kategorien (mind. 3):</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.selectedCategories}\r\n                    chipType={ChipType.selected}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.selected)}\r\n                />\r\n                <p className=\"category-array-label\">Verfügbare Kategorien:</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.availableCategories}\r\n                    chipType={ChipType.available}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.available)}\r\n                >\r\n                    <AddCustomCategory addCustomCategory={this.addCustomCategory} />\r\n                </ChipsArray>\r\n                <div className=\"button-wrapper add-margin-top\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<AddCircleIcon />}\r\n                    >Spiel erstellen</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Neues Spiel\" />\r\n                    {newGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleNameInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ nameInput: event.target.value });\r\n    }\r\n\r\n    private handleNumberOfRoundsInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +event.target.value;\r\n        value = value < MIN_NUMBER_OF_ROUNDS ? MIN_NUMBER_OF_ROUNDS : value;\r\n        value = value > MAX_NUMBER_OF_ROUNDS ? MAX_NUMBER_OF_ROUNDS : value;\r\n        this.setState({ numberOfRoundsInput: value });\r\n    }\r\n\r\n    private updateCategoryArrays = (chipToRemove: string, removeFromArray: CategoryArray) => {\r\n        let newSelectedCategories: string[];\r\n        let newAvailableCategories: string[];\r\n        if (removeFromArray === CategoryArray.selected) {\r\n            newSelectedCategories = this.state.selectedCategories.filter(category => category !== chipToRemove);\r\n            newAvailableCategories = [...this.state.availableCategories];\r\n            newAvailableCategories.push(chipToRemove);\r\n        } else {\r\n            newAvailableCategories = this.state.availableCategories.filter(category => category !== chipToRemove);\r\n            newSelectedCategories = [...this.state.selectedCategories];\r\n            newSelectedCategories.push(chipToRemove);\r\n        }\r\n        this.setState({\r\n            availableCategories: newAvailableCategories,\r\n            selectedCategories: newSelectedCategories\r\n        });\r\n    }\r\n\r\n    private addCustomCategory = (newCategory: string) => {\r\n        this.setState({ availableCategories: [...this.state.availableCategories, newCategory] });\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (this.state.nameInput.trim() && this.state.selectedCategories.length >= 3) {\r\n            const gameId = uuidv4(); // ⇨ e.g. '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n            const letters = getRandomnLetters(this.state.numberOfRoundsInput);\r\n            this.props.onSetGameData({\r\n                gameConfig: {\r\n                    categories: this.state.selectedCategories,\r\n                    letters,\r\n                    numberOfRounds: this.state.numberOfRoundsInput\r\n                },\r\n                gameId,\r\n                playerInfo: {\r\n                    id: PUBNUB_CONFIG.uuid as string,\r\n                    isAdmin: true,\r\n                    name: this.state.nameInput.trim()\r\n                }\r\n            });\r\n            this.props.history.push('/play');\r\n        } else {\r\n            this.setState({ nameInput: this.state.nameInput.trim(), validateInputs: true });\r\n        }\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): NewGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => {\r\n            dispatch(setDataForNewGame(payload))\r\n        }\r\n    }\r\n};\r\nexport default connect(null, mapDispatchToProps)(NewGame);\r\n","import { GameConfig, PlayerInput, EvaluationOfPlayerInput } from './game.interface';\r\nimport { PlayerInfo } from './player.interface';\r\n\r\nexport interface PubNubUserState {\r\n    gameConfig?: GameConfig;\r\n    playerInfo: PlayerInfo;\r\n}\r\n\r\nexport enum PubNubMessageType {\r\n    startGame = 'startGame',\r\n    roundFinished = 'roundFinished',\r\n    currentRoundInputs = 'currentRoundInputs',\r\n    evaluationOfPlayerInput = 'evaluationOfPlayerInput',\r\n    evaluationFinished = 'evaluationFinished'\r\n}\r\n\r\nexport interface PubNubMessage {\r\n    type: PubNubMessageType;\r\n    payload?: any;\r\n}\r\n\r\nexport class PubNubCurrentRoundInputsMessage {\r\n    constructor(private payload: PlayerInput[]) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.currentRoundInputs,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport class PubNubEvaluationOfPlayerInputMessage {\r\n    constructor(private payload: EvaluationOfPlayerInput) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.evaluationOfPlayerInput,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst loadingSpinnerSize = 60;\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        loadingScreen: {\r\n            position: 'absolute',\r\n            top: '0',\r\n            left: '0',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n        },\r\n        centralContent: {\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)'\r\n        },\r\n        text: {\r\n            marginBlockStart: '0',\r\n            color: 'white',\r\n            fontSize: '1.5rem',\r\n            fontWeight: 'bold',\r\n            textAlign: 'center'\r\n        },\r\n        loadingSpinner: {\r\n            margin: '0 auto',\r\n            width: loadingSpinnerSize + 'px'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface LoadingScreenProps {\r\n    message: string | null;\r\n}\r\n\r\nconst LoadingScreen: React.FunctionComponent<LoadingScreenProps> = props => {\r\n    const classes = useStyles();\r\n    const messageElement = props.message ? (<p className={classes.text}>{props.message}</p>) : null;\r\n    return (\r\n        <div className={classes.loadingScreen}>\r\n            <div className={classes.centralContent}>\r\n                {messageElement}\r\n                <div className={classes.loadingSpinner}>\r\n                    <CircularProgress color=\"secondary\" size={loadingSpinnerSize} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        centerContent: {\r\n            display: 'flex',\r\n            justifyContent: 'center'\r\n        },\r\n        chip: {\r\n            height: '3rem',\r\n            marginTop: '1rem',\r\n            borderRadius: '5px',\r\n            fontSize: '1.2rem',\r\n            boxShadow: '0 2px 4px rgba(0,0,0,.501961)'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface GameRoundChipProps {\r\n    currentLetter: string;\r\n    currentRound: number;\r\n}\r\n\r\nconst GameRoundChip: React.FunctionComponent<GameRoundChipProps> = props => {\r\n    const classes = useStyles();\r\n    const { currentLetter, currentRound } = props;\r\n    return (\r\n        <div className={classes.centerContent}>\r\n            <Chip\r\n                color=\"primary\"\r\n                icon={<EmojiObjectsIcon />}\r\n                label={`Runde ${currentRound}: „${currentLetter}“`}\r\n                className={classes.chip}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameRoundChip;\r\n","import './PhaseEvaluateRound.css';\r\nimport { Checkbox, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport React, { ChangeEvent } from 'react';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    getMinNumberOfMarkedAsInvalid as getMinNumberOfNecessaryMarkedAsInvalid,\r\n    getNumberOfInvalids,\r\n} from '../../utils/game.utils';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseEvaluateRoundProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n    updateEvaluationOfPlayerInput: (newEvaluation: EvaluationOfPlayerInput) => void;\r\n    sendEvaluationFinishedMessage: () => void;\r\n}\r\n\r\nconst PhaseEvaluateRound: React.FunctionComponent<PhaseEvaluateRoundProps> = props => {\r\n    const { allPlayers, currentRound, gameConfig, playerInfo } = props;\r\n    const minNumberOfInvalids = getMinNumberOfNecessaryMarkedAsInvalid(allPlayers.size);\r\n    // Retrieve data for finished round; e.g. if current round is 1, then data is at index 0.\r\n    const finishedGameRound = props.gameRounds[currentRound - 1];\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n    // Sort players alphabetically.\r\n    let sortedPlayers = Array.from(allPlayers).map(data => data[1]);\r\n    sortedPlayers = sortedPlayers.sort((a, b) => a.name.charCodeAt(0) - b.name.charCodeAt(0));\r\n\r\n    const handleCheckboxChange = (\r\n        event: ChangeEvent<HTMLInputElement>, checkboxOwner: PlayerInfo, categoryIndex: number, indexInSortedPlayers: number\r\n    ) => {\r\n        // Only accept checkbox changes for the user's evaluation checkboxes.\r\n        if (checkboxOwner.id === playerInfo.id) {\r\n            const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n            props.updateEvaluationOfPlayerInput({\r\n                evaluatedPlayerId: evaluatedPlayer.id,\r\n                categoryIndex,\r\n                markedAsValid: event.target.checked\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Creates a group of checkboxes for each player in the game that represent their evaluation of\r\n     * the text input of one of the players (including themselves) for one category. Users can either\r\n     * mark a text input as valid (= checkbox checked) or invalid (= checkbox not checked).\r\n     * The first checkbox represents the user's evaluation and is the only one that triggers a PubNub\r\n     * message to the other players (and themselves) with the updated state of the checkbox.\r\n     */\r\n    const createEvaluationCheckboxesAndSearchLink = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        // Make sure that current player's checkbox is first in line.\r\n        const players = [playerInfo, ...(sortedPlayers.filter(player => player.id !== playerInfo.id))];\r\n        const evaluationForPlayer = props.currentRoundEvaluation.get(sortedPlayers[indexInSortedPlayers].id) as PlayerInputEvaluation[];\r\n        const evaluationForCategory = evaluationForPlayer[categoryIndex];\r\n        const category = gameConfig.categories[categoryIndex];\r\n        const playerInput = (finishedGameRound.get(sortedPlayers[indexInSortedPlayers].id) as PlayerInput[])[categoryIndex].text;\r\n        const searchLink = `https://www.ecosia.org/search?q=${encodeURIComponent(category)}+${encodeURIComponent(playerInput)}`\r\n        return (\r\n            <div\r\n                key={`slf-evaluation-container-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-evaluation-container\"\r\n            >\r\n                <div\r\n                    key={`slf-evaluation-checkboxes-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                    className=\"slf-evaluation-checkboxes-wrapper\"\r\n                >\r\n                    {players.map((player, index) => (\r\n                        <Tooltip\r\n                            key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}-${index}`}\r\n                            title={getEvaluatedByText(player)}\r\n                        >\r\n                            <Checkbox\r\n                                key={`slf-evaluation-checkbox-${categoryIndex}-${indexInSortedPlayers}-${index}`}\r\n                                color={player.id === playerInfo.id ? 'primary' : 'default'}\r\n                                checked={!!evaluationForCategory.get(player.id)}\r\n                                inputProps={{ 'aria-label': getEvaluatedByText(player) }}\r\n                                onChange={event => handleCheckboxChange(event, player, categoryIndex, indexInSortedPlayers)}\r\n                            />\r\n                        </Tooltip>\r\n                    ))}\r\n                </div>\r\n                <a\r\n                    key={`slf-evaluation-search-link-${categoryIndex}-${indexInSortedPlayers}`}\r\n                    href={searchLink}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    aria-label=\"Begriff nachschlagen\"\r\n                    className=\"slf-evaluation-search-link\"\r\n                >\r\n                    <Tooltip\r\n                        title=\"Begriff nachschlagen\"\r\n                        placement=\"right\"\r\n                    >\r\n                        <SearchIcon color=\"primary\" />\r\n                    </Tooltip>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n    const getEvaluatedByText = (player: PlayerInfo): string => {\r\n        return player.id === playerInfo.id ? 'Deine Bewertung' : 'Bewertung von ' + player.name;\r\n    };\r\n    /**\r\n     * Creates a section for each category of the current game. It displays the category in the header,\r\n     * followed by one textfield for each player showing their input for the finished round. If the\r\n     * player input isn't an empty string, then on the right side of the textfield a group of\r\n     * checkboxes is displayed which serve to evaluate the player's input (valid or invalid).\r\n     */\r\n    const createCategorySection = (category: string, categoryIndex: number): JSX.Element => (\r\n        <div\r\n            key={'slf-evaluation-for-category-no-' + categoryIndex}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            {sortedPlayers.map((player, indexInSortedPlayers) => (\r\n                <div\r\n                    key={`slf-evaluation-textfield-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                    className=\"slf-evaluation-textfield-wrapper\"\r\n                >\r\n                    <TextField\r\n                        key={'slf-textfield-category-no-' + categoryIndex + '-player-' + indexInSortedPlayers}\r\n                        value={(finishedGameRound.get(player.id) as PlayerInput[])[categoryIndex].text}\r\n                        className=\"slf-evaluation-textfield\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">{player.name}:</InputAdornment>,\r\n                            className: getNumberOfInvalids(\r\n                                (props.currentRoundEvaluation.get(player.id) as PlayerInputEvaluation[])[categoryIndex]\r\n                            ) >= minNumberOfInvalids ? 'text-decoration-line-through' : ''\r\n                        }}\r\n                    />\r\n                    {(finishedGameRound.get(player.id) as PlayerInput[])[categoryIndex].text ?\r\n                        createEvaluationCheckboxesAndSearchLink(categoryIndex, indexInSortedPlayers) : null}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip currentLetter={currentLetter} currentRound={currentRound} />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createCategorySection)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"secondary\"\r\n                    title=\"Akzeptieren\"\r\n                    aria-label=\"Akzeptieren\"\r\n                    onClick={() => props.sendEvaluationFinishedMessage()}\r\n                >\r\n                    <CheckCircleIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseEvaluateRound;\r\n","import { IconButton, InputAdornment, TextField } from '@material-ui/core';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { GameConfig, PlayerInput } from '../../models/game.interface';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseFillOutTextfieldsProps {\r\n    currentRound: number;\r\n    gameConfig: GameConfig;\r\n    gameRoundInputs: PlayerInput[];\r\n    updateCurrentRoundInputs: (newCurrentRoundInputs: PlayerInput[]) => void;\r\n    sendRoundFinishedMessage: () => void;\r\n}\r\n\r\nconst PhaseFillOutTextfields: React.FunctionComponent<PhaseFillOutTextfieldsProps> = props => {\r\n    const { currentRound, gameConfig, gameRoundInputs } = props;\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number) => {\r\n        const newGameRoundInputs = [...gameRoundInputs];\r\n        newGameRoundInputs[index] = { ...newGameRoundInputs[index], text: event.target.value };\r\n        props.updateCurrentRoundInputs(newGameRoundInputs);\r\n    };\r\n    const createTextfieldElement = (category: string, index: number): JSX.Element => (\r\n        <div\r\n            key={'slf-input-for-category-no-' + index}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            <TextField\r\n                value={gameRoundInputs[index].text}\r\n                onChange={event => handleInputChange(event, index)}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">{currentLetter}:</InputAdornment>\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip currentLetter={currentLetter} currentRound={currentRound} />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createTextfieldElement)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"secondary\"\r\n                    title=\"Abschicken\"\r\n                    aria-label=\"Abschicken\"\r\n                    onClick={() => props.sendRoundFinishedMessage()}\r\n                >\r\n                    <EmailIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseFillOutTextfields;\r\n","import './JoinGameLink.css';\r\nimport { IconButton, InputAdornment, OutlinedInput, Snackbar } from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport React from 'react';\r\nimport { copyToClipboard } from '../../utils/general.utils';\r\n\r\ninterface JoinGameLinkProps {\r\n    gameId: string;\r\n}\r\n\r\nexport const JoinGameLink: React.FunctionComponent<JoinGameLinkProps> = props => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClick = () => {\r\n        copyToClipboard(joinGameLink)\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const url = window.location.href;\r\n    // Cut off \"/play\" from the end of the url and add route plus game id.\r\n    const joinGameLink = url.slice(0, url.length - 5) + '/joingame?id=' + props.gameId;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"join-game-link-label\">Teile diesen Link mit Freunden:</p>\r\n            <OutlinedInput\r\n                name=\"idInput\"\r\n                value={joinGameLink}\r\n                className=\"app-form-input\"\r\n                disabled\r\n                fullWidth\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            title=\"Link kopieren\"\r\n                            aria-label=\"Link kopieren\"\r\n                            onClick={handleClick}\r\n                        >\r\n                            <FileCopyIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n            />\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={open}\r\n                autoHideDuration={1500}\r\n                onClose={handleClose}\r\n                message=\"Der Link wurde in Zwischenablage kopiert.\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport React from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface PlayerListProps {\r\n    players: Map<string, PlayerInfo>;\r\n}\r\n\r\nconst PlayerList: React.FunctionComponent<PlayerListProps> = props => {\r\n    const classes = useStyles();\r\n    const playerNames: string[] = [];\r\n    props.players.forEach(player => playerNames.push(player.name));\r\n    return (\r\n        <div className={classes.root}>\r\n            {playerNames.map((name, index) => (\r\n                <Chip\r\n                    key={`player-name-${index}`}\r\n                    icon={<FaceIcon />}\r\n                    color=\"primary\"\r\n                    label={name}\r\n                    className={classes.chip}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerList;\r\n","import './PhaseWaitingToStart.css';\r\nimport { Button, Divider } from '@material-ui/core';\r\nimport PlayCircleFilled from '@material-ui/icons/PlayCircleFilled';\r\nimport React from 'react';\r\nimport { MIN_NUMBER_OF_PLAYERS } from '../../constants/game.constant';\r\nimport { GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport { JoinGameLink } from '../JoinGameLink/JoinGameLink';\r\nimport PlayerList from '../PlayerList/PlayerList';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseWaitingToStartProps {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string;\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    playerInfo: PlayerInfo;\r\n    sendMessage: (message: PubNubMessage) => void;\r\n}\r\n\r\nconst PhaseWaitingToStart: React.FunctionComponent<PhaseWaitingToStartProps> = props => {\r\n    const { gameId, allPlayers, playerInfo } = props;\r\n    const waitForGameStartElement = (\r\n        <p className=\"wait-for-start-animation\">Warte auf Spielbeginn <span>.</span><span>.</span><span>.</span></p>\r\n    );\r\n\r\n    const createGameSettingsElement = (): JSX.Element => {\r\n        const gameConfig = props.gameConfig as GameConfig;\r\n        return (\r\n            <React.Fragment>\r\n                <Divider />\r\n                <h3>Spiele-Settings:</h3>\r\n                <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const createStartGameButton = (): JSX.Element => {\r\n        return (\r\n            <div className=\"button-wrapper add-margin-top\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    startIcon={<PlayCircleFilled />}\r\n                    disabled={allPlayers.size < MIN_NUMBER_OF_PLAYERS}\r\n                    onClick={() => props.sendMessage({ type: PubNubMessageType.startGame })}\r\n                >Starten</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const createInvitePlayersElement = (): JSX.Element => {\r\n        return (\r\n            <div className=\"material-card-style\">\r\n                <JoinGameLink gameId={gameId as string} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"material-card-style\">\r\n                <SectionHeader showDivider={true} text=\"Gleich geht's los...\"></SectionHeader>\r\n                <div className=\"players-wrapper\">\r\n                    <h3>Mitspieler:</h3>\r\n                    <PlayerList players={props.allPlayers} />\r\n                </div>\r\n                {props.gameConfig ? createGameSettingsElement() : null}\r\n                <Divider />\r\n                {playerInfo.isAdmin ? createStartGameButton() : waitForGameStartElement}\r\n            </div>\r\n            {playerInfo.isAdmin ? createInvitePlayersElement() : null}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseWaitingToStart;\r\n","import { usePubNub } from 'pubnub-react';\r\nimport React, { useEffect } from 'react';\r\nimport { GameConfig, PlayerInput, EvaluationOfPlayerInput } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubUserState, PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport Pubnub from 'pubnub';\r\n\r\ninterface PubNubEventHandlerProps {\r\n    gameChannel: string;\r\n    gameConfig: GameConfig | null;\r\n    playerInfo: PlayerInfo;\r\n    navigateToDashboard: () => void;\r\n    addPlayers: (...newPlayers: PubNubUserState[]) => void;\r\n    startGame: () => void;\r\n    stopRoundAndSendInputs: () => void;\r\n    addPlayerInputForFinishedRound: (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => void;\r\n    processEvaluationOfPlayerInput: (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => void;\r\n    countPlayerAsEvaluationFinished: (evaluatingPlayerId: string) => void;\r\n}\r\n\r\nconst PubNubEventHandler: React.FunctionComponent<PubNubEventHandlerProps> = props => {\r\n    const pubNubClient = usePubNub();\r\n\r\n    const setUserStateAndGetHereNowIfGameIsOpen = () => {\r\n        pubNubClient.history(\r\n            { channel: props.gameChannel, count: 10 },\r\n            (_, response) => {\r\n                // If history includes messages, then game has already started and user can't join.\r\n                // User gets rerouted to dashboard page by PlayGame component.\r\n                if (response.messages.length > 0) {\r\n                    props.navigateToDashboard();\r\n                } else {\r\n                    setUserState();\r\n                    if (!props.playerInfo.isAdmin) {\r\n                        getHereNowData();\r\n                        // Safeguard against the possibility of two players joining exactly at the same time:\r\n                        // We call hereNowData again after 3 seconds, to make sure we get all player info.\r\n                        setTimeout(getHereNowData, 3000);\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    };\r\n    const setUserState = () => {\r\n        let newUserState: PubNubUserState;\r\n        if (props.playerInfo.isAdmin) {\r\n            newUserState = { gameConfig: props.gameConfig as GameConfig, playerInfo: props.playerInfo };\r\n        } else {\r\n            newUserState = { playerInfo: props.playerInfo };\r\n        }\r\n        // Set this user's state in game channel.\r\n        pubNubClient.setState({\r\n            channels: [props.gameChannel],\r\n            state: newUserState\r\n        });\r\n    };\r\n    const getHereNowData = () => {\r\n        pubNubClient.hereNow(\r\n            { channels: [props.gameChannel], includeUUIDs: true, includeState: true },\r\n            (_, response) => {\r\n                console.log('PubNub hereNow', response);\r\n                // Response includes states of players that joined before.\r\n                const dataForGameChannel = response.channels[props.gameChannel];\r\n                if (dataForGameChannel) {\r\n                    const pubNubUserStates: PubNubUserState[] = [];\r\n                    dataForGameChannel.occupants.forEach(occupant => {\r\n                        const userState = occupant.state as PubNubUserState;\r\n                        // Safeguard in case that a user's state should be missing or corrupted.\r\n                        if (!!userState && !!userState.playerInfo) {\r\n                            pubNubUserStates.push(userState);\r\n                        }\r\n                    });\r\n                    props.addPlayers(...pubNubUserStates);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const pubNubListeners: Pubnub.ListenerParameters = {\r\n            message: messageEvent => {\r\n                console.log('PubNub message event', messageEvent);\r\n                const message = messageEvent.message as PubNubMessage;\r\n                switch (message.type) {\r\n                    case PubNubMessageType.startGame:\r\n                        props.startGame();\r\n                        break;\r\n                    case PubNubMessageType.roundFinished:\r\n                        props.stopRoundAndSendInputs();\r\n                        break;\r\n                    case PubNubMessageType.currentRoundInputs:\r\n                        props.addPlayerInputForFinishedRound(messageEvent.publisher, message.payload);\r\n                        break;\r\n                    case PubNubMessageType.evaluationOfPlayerInput:\r\n                        props.processEvaluationOfPlayerInput(messageEvent.publisher, message.payload);\r\n                        break;\r\n                    case PubNubMessageType.evaluationFinished:\r\n                        props.countPlayerAsEvaluationFinished(messageEvent.publisher);\r\n                        break;\r\n                    default:\r\n                }\r\n            },\r\n            presence: presenceEvent => {\r\n                console.log('PubNub presence event', presenceEvent);\r\n                // Check for 'state-change' events and process state from new player.\r\n                if (presenceEvent.action === 'state-change') {\r\n                    const userState = presenceEvent.state as PubNubUserState;\r\n                    if (userState.playerInfo.id !== props.playerInfo.id) {\r\n                        props.addPlayers(userState);\r\n                    }\r\n                }\r\n            },\r\n            status: statusEvent => {\r\n                console.log('PubNub status event', statusEvent);\r\n                if (statusEvent.category === 'PNConnectedCategory') {\r\n                    console.log('Player is connected to PubNub game channel');\r\n                    setUserStateAndGetHereNowIfGameIsOpen();\r\n                }\r\n            }\r\n        };\r\n        pubNubClient.addListener(pubNubListeners);\r\n        pubNubClient.subscribe({\r\n            channels: [props.gameChannel],\r\n            withPresence: true\r\n        });\r\n        // When this component is destroyed, we unsubscribe from game channel.\r\n        return () => {\r\n            pubNubClient.removeListener(pubNubListeners);\r\n            pubNubClient.unsubscribeAll();\r\n        }\r\n    });\r\n    return null;\r\n};\r\n\r\nexport default React.memo(PubNubEventHandler);\r\n","import './LetterAnimation.css';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n    ALPHABET_WITHOUT_QXY,\r\n    LETTER_ANIMATION_LETTER_COUNT,\r\n    LETTER_ANIMATION_REDRAW_SPEED,\r\n} from '../../constants/game.constant';\r\nimport { AppTheme, AppThemes } from '../../constants/themes.constant';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\n\r\n// Thanks to Georgi Nikoloff for the great animation source code: https://codepen.io/gbnikolov/pen/jEqQdG\r\n// I rewrote the code in Typescript, refactored it a bit and adapted it to the needs of this application.\r\n\r\nclass Particle {\r\n    private radius = 3.5;\r\n\r\n    constructor(\r\n        public x: number,\r\n        public y: number\r\n    ) { }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.translate(this.x, this.y);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, this.radius, this.radius);\r\n        ctx.restore();\r\n    };\r\n}\r\n\r\nclass ParticleAlphabet {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private currentPos: number;\r\n    private width: number;\r\n    private height: number;\r\n    private particlePositions: any[];\r\n    private particles: Particle[];\r\n    private tmpCanvas: HTMLCanvasElement;\r\n    private tmpCtx: CanvasRenderingContext2D;\r\n    private time: string;\r\n    private counter = 0;\r\n    private myInterval: any;\r\n    private activeTheme: AppTheme;\r\n\r\n    constructor(\r\n        public letters: string[],\r\n        public callbackWhenAnimationDone: () => void\r\n    ) {\r\n        this.canvas = document.querySelector('#letter-animation-canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        const mainElement = document.querySelector('main') as HTMLElement;\r\n        this.activeTheme = AppThemes.find(theme => mainElement.classList.contains(theme.className)) as AppTheme;\r\n        this.width = mainElement.offsetWidth;\r\n        this.height = mainElement.offsetHeight;\r\n        this.particlePositions = [];\r\n        this.particles = [];\r\n        this.tmpCanvas = document.createElement('canvas');\r\n        this.tmpCtx = this.tmpCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.particlePositions = [];\r\n        this.currentPos = 0;\r\n        this.time = '';\r\n    }\r\n\r\n    public init() {\r\n        this.myInterval = setInterval(() => {\r\n            if (this.counter < this.letters.length) {\r\n                this.changeLetter();\r\n                this.getPixels(this.tmpCanvas, this.tmpCtx);\r\n            }\r\n            this.counter++;\r\n            if (this.counter > this.letters.length + 1) {\r\n                clearInterval(this.myInterval);\r\n                this.callbackWhenAnimationDone();\r\n            }\r\n        }, LETTER_ANIMATION_REDRAW_SPEED);\r\n\r\n        this.makeParticles(1000);\r\n        this.animate();\r\n    }\r\n\r\n    private changeLetter() {\r\n        this.time = this.letters[this.currentPos];\r\n        this.currentPos++;\r\n        if (this.currentPos >= this.letters.length) {\r\n            this.currentPos = 0;\r\n        }\r\n    }\r\n\r\n    private makeParticles(num: number) {\r\n        for (var i = 0; i <= num; i++) {\r\n            const x = this.width / 2 + Math.random() * 400 - 200;\r\n            const y = this.height / 2 + Math.random() * 400 - 200;\r\n            this.particles.push(new Particle(x, y));\r\n        }\r\n    }\r\n\r\n    private getPixels(canvas: any, ctx: any) {\r\n        const keyword = this.time,\r\n            gridX = 6,\r\n            gridY = 6;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        ctx.fillStyle = 'red';\r\n        ctx.font = 'italic bold 330px Noto Serif';\r\n        ctx.fillText(keyword, canvas.width / 2 - ctx.measureText(keyword).width / 2, canvas.height / 2 + 100);\r\n        const idata = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const buffer32 = new Uint32Array(idata.data.buffer);\r\n        if (this.particlePositions.length > 0) this.particlePositions = [];\r\n        for (let y = 0; y < canvas.height; y += gridY) {\r\n            for (let x = 0; x < canvas.width; x += gridX) {\r\n                if (buffer32[y * canvas.width + x]) {\r\n                    this.particlePositions.push({ x: x, y: y });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private animateParticles() {\r\n        let p, pPos;\r\n        for (let i = 0, num = this.particles.length; i < num; i++) {\r\n            p = this.particles[i];\r\n            pPos = this.particlePositions[i];\r\n            if (this.particles.indexOf(p) === this.particlePositions.indexOf(pPos)) {\r\n                p.x += (pPos.x - p.x) * .3;\r\n                p.y += (pPos.y - p.y) * .3;\r\n                p.draw(this.ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private animate = () => {\r\n        requestAnimationFrame(this.animate);\r\n        this.ctx.fillStyle = this.activeTheme.animationBackgroundColor;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        this.animateParticles();\r\n    }\r\n}\r\n\r\ninterface LetterAnimationProps {\r\n    letterToUnveil: string;\r\n    callbackWhenAnimationDone: () => void;\r\n}\r\nexport const LetterAnimation: React.FunctionComponent<LetterAnimationProps> = props => {\r\n    const lettersToUse = [...ALPHABET_WITHOUT_QXY].filter(letter => letter !== props.letterToUnveil);\r\n    const lettersForAnimation = [...getRandomnLetters(LETTER_ANIMATION_LETTER_COUNT - 1, lettersToUse), props.letterToUnveil];\r\n    useEffect(() => {\r\n        const particleAlphabet = new ParticleAlphabet(lettersForAnimation, props.callbackWhenAnimationDone);\r\n        particleAlphabet.init();\r\n    });\r\n    return (\r\n        <canvas id=\"letter-animation-canvas\"></canvas>\r\n    );\r\n}\r\n","import { cloneDeep } from 'lodash';\r\nimport PubNub from 'pubnub';\r\nimport { PubNubProvider } from 'pubnub-react';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport LoadingScreen from '../../components/LoadingScreen/LoadingScreen';\r\nimport PhaseEvaluateRound from '../../components/PhaseEvaluateRound/PhaseEvaluateRound';\r\nimport PhaseFillOutTextfields from '../../components/PhaseFillOutTextfields/PhaseFillOutTextfields';\r\nimport PhaseWaitingToStart from '../../components/PhaseWaitingToStart/PhaseWaitingToStart';\r\nimport PubNubEventHandler from '../../components/PubNubEventHandler/PubNubEventHandler';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { GamePhase } from '../../constants/game.constant';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    PubNubCurrentRoundInputsMessage,\r\n    PubNubEvaluationOfPlayerInputMessage,\r\n    PubNubMessage,\r\n    PubNubMessageType,\r\n    PubNubUserState,\r\n} from '../../models/pub-nub-data.model';\r\nimport { SetDataOfFinishedGamePayload, AppAction, setDataOfFinishedGame, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport {\r\n    createGameRoundEvaluation,\r\n    getMinNumberOfMarkedAsInvalid,\r\n    markEmptyPlayerInputsAsInvalid,\r\n    processPlayerInputEvaluations,\r\n} from '../../utils/game.utils';\r\nimport { createAndFillArray } from '../../utils/general.utils';\r\nimport { LetterAnimation } from '../../components/LetterAnimation/LetterAnimation';\r\n\r\ninterface PlayGamePropsFromStore {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string | null;\r\n    playerInfo: PlayerInfo;\r\n}\r\ninterface PlayGameDispatchProps {\r\n    onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => void;\r\n    onResetAppState: () => void;\r\n}\r\ninterface PlayGameProps extends PlayGamePropsFromStore, PlayGameDispatchProps, RouterProps { }\r\ninterface PlayGameState {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentPhase: GamePhase;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    currentRoundInputs: PlayerInput[];\r\n    currentRound: number;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[];\r\n    loadingScreenMessage: string | null;\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    showLetterAnimation: boolean;\r\n    showLoadingScreen: boolean;\r\n}\r\n\r\nclass PlayGame extends Component<PlayGameProps, PlayGameState> {\r\n    public state: PlayGameState = {\r\n        allPlayers: new Map<string, PlayerInfo>(),\r\n        currentPhase: GamePhase.waitingToStart,\r\n        currentRoundEvaluation: new Map<string, PlayerInputEvaluation[]>(),\r\n        currentRoundInputs: [],\r\n        currentRound: 1,\r\n        gameConfig: null,\r\n        gameRounds: [],\r\n        loadingScreenMessage: null,\r\n        playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n        showLetterAnimation: false,\r\n        showLoadingScreen: true\r\n    };\r\n    private pubNubClient = new PubNub(PUBNUB_CONFIG);\r\n\r\n    public render() {\r\n        // This check serves as a route guard. If there is no gameId present in state,\r\n        // then user wasn't redirected here from NewGame or JoinGame component.\r\n        if (this.props.gameId === null) { return null; }\r\n        const { gameId, playerInfo } = this.props;\r\n        const { loadingScreenMessage, showLetterAnimation, showLoadingScreen } = this.state;\r\n        let currentPhaseElement: JSX.Element | null = null;\r\n        switch (this.state.currentPhase) {\r\n            case GamePhase.waitingToStart:\r\n                currentPhaseElement = (\r\n                    <PhaseWaitingToStart\r\n                        gameConfig={this.state.gameConfig}\r\n                        gameId={gameId}\r\n                        allPlayers={this.state.allPlayers}\r\n                        playerInfo={playerInfo}\r\n                        sendMessage={this.sendMessage}\r\n                    />\r\n                );\r\n                break;\r\n            case GamePhase.fillOutTextfields:\r\n                currentPhaseElement = (\r\n                    <PhaseFillOutTextfields\r\n                        currentRound={this.state.currentRound}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRoundInputs={this.state.currentRoundInputs}\r\n                        updateCurrentRoundInputs={this.updateCurrentRoundInputs}\r\n                        sendRoundFinishedMessage={this.sendRoundFinishedMessage}\r\n                    />\r\n                );\r\n                break;\r\n            case GamePhase.evaluateRound:\r\n                currentPhaseElement = (\r\n                    <PhaseEvaluateRound\r\n                        allPlayers={this.state.allPlayers}\r\n                        currentRound={this.state.currentRound}\r\n                        currentRoundEvaluation={this.state.currentRoundEvaluation}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRounds={this.state.gameRounds}\r\n                        playerInfo={playerInfo}\r\n                        updateEvaluationOfPlayerInput={this.updateEvaluationOfPlayerInput}\r\n                        sendEvaluationFinishedMessage={this.sendEvaluationFinishedMessage}\r\n                    />\r\n                );\r\n                break;\r\n            default:\r\n        }\r\n        const letterAnimationElement = this.state.gameConfig && showLetterAnimation ? (\r\n            <LetterAnimation\r\n                letterToUnveil={this.state.gameConfig.letters[this.state.currentRound - 1]}\r\n                callbackWhenAnimationDone={this.callbackWhenAnimationDone}\r\n            />\r\n        ) : null;\r\n        const loadingScreenElement = showLoadingScreen ? <LoadingScreen message={loadingScreenMessage} /> : null;\r\n        return (\r\n            <PubNubProvider client={this.pubNubClient}>\r\n                {/* The props passed to PubNubEventHandler must never be changed,\r\n                    in order to ensure that the component is not rerendered!\r\n                    (PubNubEventHandler is wrapped in React.memo) */}\r\n                <PubNubEventHandler\r\n                    gameChannel={this.props.gameId}\r\n                    gameConfig={this.props.gameConfig}\r\n                    playerInfo={this.props.playerInfo}\r\n                    navigateToDashboard={this.navigateToDashboard}\r\n                    addPlayers={this.addPlayers}\r\n                    startGame={this.startGame}\r\n                    stopRoundAndSendInputs={this.stopRoundAndSendInputs}\r\n                    addPlayerInputForFinishedRound={this.addPlayerInputForFinishedRound}\r\n                    processEvaluationOfPlayerInput={this.processEvaluationOfPlayerInput}\r\n                    countPlayerAsEvaluationFinished={this.countPlayerAsEvaluationFinished}\r\n                />\r\n                {letterAnimationElement}\r\n                {loadingScreenElement}\r\n                {!showLoadingScreen && !showLetterAnimation ? (\r\n                    <div className=\"main-content-wrapper\">\r\n                        {currentPhaseElement}\r\n                    </div>\r\n                ) : null}\r\n            </PubNubProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // If there is no gameId present in application state, then reroute user to dashboard.\r\n        if (this.props.gameId === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        allPlayers.set(this.props.playerInfo.id, this.props.playerInfo);\r\n        // If player is the game admin, the gameConfig can be taken from application state\r\n        // and we can hide the loading screen and show PhaseWaitingToStart component right away.\r\n        if (this.props.playerInfo.isAdmin) {\r\n            this.setState({ allPlayers, gameConfig: this.props.gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    private sendMessage = (message: PubNubMessage) => {\r\n        this.pubNubClient.publish(\r\n            {\r\n                channel: this.props.gameId as string,\r\n                message,\r\n                storeInHistory: true,\r\n                ttl: 1 // time to live (in hours)\r\n            },\r\n            (status, response) => console.log('PubNub Publish:', status, response)\r\n        );\r\n    };\r\n\r\n    private callbackWhenAnimationDone = () => {\r\n        this.setState({ showLetterAnimation: false });\r\n    }\r\n\r\n    private navigateToDashboard = () => {\r\n        this.props.history.push('/');\r\n        this.props.onResetAppState();\r\n    }\r\n\r\n    /**\r\n     * Called by PubNubEventHandler when it receives a PubNub presence event with action 'state-change'.\r\n     * It processes information about players that had already joined the game before this user\r\n     * joined (hereNow result) or about a player that joins the game after this user joined.\r\n     */\r\n    private addPlayers = (...newPlayers: PubNubUserState[]) => {\r\n        // Ignore information about players that try to join after the game has already started.\r\n        if (this.state.currentPhase !== GamePhase.waitingToStart) { return; }\r\n        let gameConfig: GameConfig | null = null;\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        newPlayers.forEach(newPlayer => {\r\n            allPlayers.set(newPlayer.playerInfo.id, newPlayer.playerInfo);\r\n            // If we are not the game admin, we obtain the game config from the admin's PubNubUserState.\r\n            if (newPlayer.gameConfig && !this.state.gameConfig) {\r\n                gameConfig = newPlayer.gameConfig;\r\n            }\r\n        });\r\n        // Only after we received the gameConfig from the admin, we hide the loading screen\r\n        // and render the PhaseWaitingToStart component instead.\r\n        if (gameConfig) {\r\n            this.setState({ allPlayers, gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'startGame'.\r\n     */\r\n    private startGame = () => {\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const roundInputs = createAndFillArray<PlayerInput>(gameConfig.categories.length, { text: '', valid: true });\r\n        this.setState({\r\n            currentPhase: GamePhase.fillOutTextfields,\r\n            currentRoundInputs: roundInputs,\r\n            showLetterAnimation: true\r\n        });\r\n    }\r\n\r\n    private updateCurrentRoundInputs = (newCurrentRoundInputs: PlayerInput[]) => {\r\n        this.setState({ currentRoundInputs: newCurrentRoundInputs });\r\n    }\r\n\r\n    private sendRoundFinishedMessage = () => {\r\n        this.setState({ showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.roundFinished });\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'roundFinished'.\r\n     */\r\n    private stopRoundAndSendInputs = () => {\r\n        // Prepare new GameRound object for addPlayerInputForFinishedRound method\r\n        // as well as new currentRoundEvaluation object for evaluation phase.\r\n        const gameRounds: GameRound[] = [...this.state.gameRounds, new Map<string, PlayerInput[]>()];\r\n        const currentRoundEvaluation = createGameRoundEvaluation(\r\n            this.state.allPlayers, (this.state.gameConfig as GameConfig).categories\r\n        );\r\n        this.setState({ currentRoundEvaluation, gameRounds, showLoadingScreen: true });\r\n        // Send this player's text inputs of current round to other players (and herself/himself).\r\n        const message = new PubNubCurrentRoundInputsMessage(markEmptyPlayerInputsAsInvalid(this.state.currentRoundInputs));\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'currentRoundInputs'.\r\n     */\r\n    private addPlayerInputForFinishedRound = (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => {\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        gameRounds[this.state.currentRound - 1].set(playerId, playerInputsForFinishedRound);\r\n        // Did we collect the inputs from all players?\r\n        if (gameRounds[this.state.currentRound - 1].size === this.state.allPlayers.size) {\r\n            // If yes, then start the evaluation of the finished round.\r\n            this.setState({ currentPhase: GamePhase.evaluateRound, gameRounds, showLoadingScreen: false });\r\n        } else {\r\n            // If no, then only store the updated gameRounds object in state.\r\n            this.setState({ gameRounds });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate a player input evaluation via a\r\n     * PubNub message. This message is then processed by all players in the game (including the user who sent it).\r\n     */\r\n    private updateEvaluationOfPlayerInput = (newEvaluation: EvaluationOfPlayerInput) => {\r\n        const message = new PubNubEvaluationOfPlayerInputMessage(newEvaluation);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'evaluationOfPlayerInput'.\r\n     */\r\n    private processEvaluationOfPlayerInput = (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => {\r\n        const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n        const playerInputEvaluations = currentRoundEvaluation.get(newEvaluation.evaluatedPlayerId);\r\n        if (playerInputEvaluations) {\r\n            playerInputEvaluations[newEvaluation.categoryIndex].set(evaluatingPlayerId, newEvaluation.markedAsValid);\r\n        }\r\n        this.setState({ currentRoundEvaluation });\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate to all players\r\n     * that the user of this instance of the game has finished evaluating the current round.\r\n     */\r\n    private sendEvaluationFinishedMessage = () => {\r\n        this.setState({ loadingScreenMessage: 'Warte auf Mitspieler', showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.evaluationFinished });\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'evaluationFinished'.\r\n     */\r\n    private countPlayerAsEvaluationFinished = (evaluatingPlayerId: string) => {\r\n        const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n        playersThatFinishedEvaluation.set(evaluatingPlayerId, true);\r\n        if (playersThatFinishedEvaluation.size === this.state.allPlayers.size) {\r\n            this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n        } else {\r\n            this.setState({ playersThatFinishedEvaluation });\r\n        }\r\n    }\r\n\r\n    private processEvaluationsAndStartNextRoundOrFinishGame = () => {\r\n        const { allPlayers, currentRound, currentRoundEvaluation, gameRounds } = this.state;\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const newGameRounds = cloneDeep(gameRounds);\r\n        newGameRounds[currentRound - 1] = processPlayerInputEvaluations(\r\n            gameRounds[currentRound - 1], currentRoundEvaluation, getMinNumberOfMarkedAsInvalid(allPlayers.size)\r\n        );\r\n        if (currentRound === gameConfig.numberOfRounds) {\r\n            // Finish game and show results.\r\n            this.props.onSetDataOfFinishedGame({ allPlayers, gameConfig, gameRounds: newGameRounds });\r\n            this.props.history.push('/results');\r\n        } else {\r\n            // Start next round of the game.\r\n            this.setState({\r\n                currentPhase: GamePhase.fillOutTextfields,\r\n                currentRoundEvaluation: createGameRoundEvaluation(allPlayers, gameConfig.categories),\r\n                currentRoundInputs: createAndFillArray<PlayerInput>(gameConfig.categories.length, { text: '', valid: true }),\r\n                currentRound: currentRound + 1,\r\n                gameRounds: newGameRounds,\r\n                loadingScreenMessage: null,\r\n                playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n                showLetterAnimation: true,\r\n                showLoadingScreen: false\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): PlayGamePropsFromStore => {\r\n    return {\r\n        gameConfig: state.gameConfig,\r\n        gameId: state.gameId,\r\n        playerInfo: state.playerInfo as PlayerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): PlayGameDispatchProps => {\r\n    return {\r\n        onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => {\r\n            dispatch(setDataOfFinishedGame(payload))\r\n        },\r\n        onResetAppState: () => {\r\n            dispatch(resetAppState())\r\n        }\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);\r\n","import { APP_THEME_ID } from './../constants/themes.constant';\r\nconst APP_THEME_LOCAL_STORAGE_KEY = 'SLF-APP-THEME';\r\n\r\nexport const getAppThemeIdFromLocalStorage = (): string | null => {\r\n    return localStorage.getItem(APP_THEME_LOCAL_STORAGE_KEY);\r\n};\r\n\r\nexport const setAppThemeIdInLocalStorage = (appTheme: APP_THEME_ID) => {\r\n    return localStorage.setItem(APP_THEME_LOCAL_STORAGE_KEY, appTheme);\r\n};\r\n","import './App.css';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport Header from './components/Header/Header';\r\nimport { AppTheme, AppThemes } from './constants/themes.constant';\r\nimport { Dashboard } from './containers/Dashboard/Dashboard';\r\nimport GameResults from './containers/GameResults/GameResults';\r\nimport JoinGame from './containers/JoinGame/JoinGame';\r\nimport NewGame from './containers/NewGame/NewGame';\r\nimport PlayGame from './containers/PlayGame/PlayGame';\r\nimport { getAppThemeIdFromLocalStorage, setAppThemeIdInLocalStorage } from './utils/local-storage.utils';\r\n\r\nconst backspaceDisabler = require('backspace-disabler');\r\n\r\ninterface AppState {\r\n    activeTheme: AppTheme;\r\n}\r\nclass App extends Component<any, AppState> {\r\n    public state: AppState = {\r\n        activeTheme: AppThemes[0],\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ThemeProvider theme={this.state.activeTheme.muiTheme}>\r\n                <div className=\"app-container\">\r\n                    <Header\r\n                        theme={this.state.activeTheme}\r\n                        switchTheme={this.switchThemeHandler}\r\n                    />\r\n                    <main\r\n                        className={'app-main ' + this.state.activeTheme.className}\r\n                        style={this.state.activeTheme.style}\r\n                    >\r\n                        <HashRouter basename={process.env.PUBLIC_URL}>\r\n                            <Switch>\r\n                                <Route path=\"/\" exact component={Dashboard} />\r\n                                <Route path=\"/newgame\" exact component={NewGame} />\r\n                                <Route path=\"/joingame\" exact component={JoinGame} />\r\n                                <Route path=\"/play\" exact component={PlayGame} />\r\n                                <Route path=\"/results\" exact component={GameResults} />\r\n                            </Switch>\r\n                        </HashRouter>\r\n                    </main>\r\n                </div>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // Prevent browser back on backspace (e.g. in Firefox).\r\n        backspaceDisabler.disable();\r\n        const appThemeId = getAppThemeIdFromLocalStorage();\r\n        if (appThemeId) {\r\n            const appTheme = AppThemes.find(theme => theme.id === appThemeId);\r\n            if (appTheme) {\r\n                this.setState({ activeTheme: appTheme });\r\n            }\r\n        }\r\n    }\r\n\r\n    private switchThemeHandler = (newTheme: AppTheme) => {\r\n        this.setState({ activeTheme: newTheme });\r\n        setAppThemeIdInLocalStorage(newTheme.id);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GameConfig, GameRound } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport {\r\n    AppAction,\r\n    RESET_APP_STATE,\r\n    SET_DATA_FOR_NEW_GAME,\r\n    SET_DATA_OF_FINISHED_GAME,\r\n    SetDataForNewGameAction,\r\n    SetDataOfFinishedGameAction,\r\n} from './app.actions';\r\n\r\nexport interface AppState {\r\n    allPlayers: Map<string, PlayerInfo> | null;\r\n    gameId: string | null;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[] | null;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\n\r\nconst initialState: AppState = {\r\n    allPlayers: null,\r\n    gameId: null,\r\n    gameConfig: null,\r\n    gameRounds: null,\r\n    playerInfo: null\r\n};\r\n\r\nexport const appReducer = (state: AppState = initialState, action: AppAction): AppState => {\r\n    switch (action.type) {\r\n        case SET_DATA_FOR_NEW_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataForNewGameAction).payload\r\n            };\r\n        case SET_DATA_OF_FINISHED_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataOfFinishedGameAction).payload,\r\n                // Set gameId to null to prevent player from manually opening PlayGame route.\r\n                gameId: null\r\n            };\r\n        case RESET_APP_STATE:\r\n            return { ...initialState };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { appReducer } from './store/app.reducer';\r\nimport { Provider } from 'react-redux';\r\n\r\nexport const appStore = createStore(appReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={appStore}><App /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}