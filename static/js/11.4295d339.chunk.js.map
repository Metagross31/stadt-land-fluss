{"version":3,"sources":["components/ToDashboardButton/ToDashboardButton.tsx","components/ToDashboardButton/ToDashboardButton.module.css","../node_modules/@material-ui/core/esm/utils/createSvgIcon.js","../node_modules/@material-ui/core/esm/utils/useControlled.js","constants/text.constant.ts","components/RejoinRunningGameHint/RejoinRunningGameHint.tsx","components/RejoinRunningGameHint/RejoinRunningGameHint.module.css","utils/error-text.util.ts","containers/JoinGame/JoinGame.module.css","../node_modules/@material-ui/icons/DirectionsWalk.js","containers/JoinGame/JoinGame.tsx"],"names":["ToDashboardButton","props","className","styles","button_wrapper","type","color","variant","size","startIcon","onClick","onReturnToDashboard","module","exports","createSvgIcon","path","displayName","Component","ref","React","createElement","SvgIcon","_extends","muiName","memo","forwardRef","useControlled","_ref","controlled","defaultProp","default","isControlled","name","state","undefined","current","_React$useState","valueState","setValue","newValue","GAME_ID_LABEL","NUMBER_OF_CATEGORIES_LABEL","NUMBER_OF_ROUNDS_LABEL","PLAYER_NAME_LABEL","RejoinRunningGameHintContext","RejoinRunningGameHint","condition","context","hintText","hint_text","component","rejoin_game_button","rejoinRunningGame","getInvalidNameError","getInvalidGameIdError","getInvalidRoundsError","MIN_NUMBER_OF_ROUNDS","MAX_NUMBER_OF_ROUNDS","getTooFewCategoriesError","MIN_NUMBER_OF_CATEGORIES","getTooManyLettersExcludedError","numberOfRounds","round","makePluralIfCountIsNotOne","maxNumberToExclude","STANDARD_ALPHABET","length","_interopRequireDefault","require","Object","defineProperty","value","_react","_default","d","JoinGame","a11yMessageAssertive","idInput","isSnackbarOpen","nameInput","playerInfo","snackBarDuration","snackBarMessage","validateInputs","handleInputChange","event","target","setState","handleSubmit","preventDefault","trimmedName","trim","joinGame","alertUser","message","handleSnackBarClose","idCreationTimestamp","playerIdCreationTimestamp","removeAllDataOfRunningGameFromLocalStorage","setPlayerInfoInLocalStorage","id","setRunningGameInfoInLocalStorage","gameId","convertDateToUnixTimestamp","Date","isPlayerAdmin","onSetGameData","gameConfig","isRejoiningGame","isAdmin","history","push","onPrepareRejoiningGame","returnToDashboard","playerNameAriaLabel","PLAYER_NAME_MAX_LENGTH","playerNameVisibleLabel","isNameInvalid","this","isIdInvalid","joinGameForm","onSubmit","noValidate","autoComplete","htmlFor","label","fullWidth","required","autoFocus","error","helperText","inputProps","maxLength","onChange","rejoinRunningGameElement","joingame","text","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","classes","root","alert_snackbar","aria-live","clearOnUnmount","query","URLSearchParams","location","search","has","get","joinGameErrorMessage","prevProps","connect","dispatch","prepareRejoiningGame","payload","setDataForNewGame"],"mappings":"2LAyBeA,IAf4D,SAAAC,GACvE,OACI,qBAAKC,UAAWC,IAAOC,eAAvB,SACI,cAAC,IAAD,CACIC,KAAK,SACLC,MAAM,UACNC,QAAQ,YACRC,KAAK,QACLC,UAAW,cAAC,IAAD,IACXC,QAAST,EAAMU,oBANnB,2B,oBCZZC,EAAOC,QAAU,CAAC,eAAiB,4C,iCCDnC,qEAOe,SAASC,EAAcC,EAAMC,GAC1C,IAAIC,EAAY,SAAmBhB,EAAOiB,GACxC,OAAoBC,IAAMC,cAAcC,IAASC,YAAS,CACxDJ,IAAKA,GACJjB,GAAQc,IAUb,OADAE,EAAUM,QAAUF,IAAQE,QACRJ,IAAMK,KAAmBL,IAAMM,WAAWR,M,iCCrBhE,6CAEe,SAASS,EAAcC,GACpC,IAAIC,EAAaD,EAAKC,WAClBC,EAAcF,EAAKG,QAMnBC,GALOJ,EAAKK,KACCL,EAAKM,MAGFd,cAA4Be,IAAfN,GACAO,SAE7BC,EAAkBjB,WAAeU,GACjCQ,EAAaD,EAAgB,GAC7BE,EAAWF,EAAgB,GA0B/B,MAAO,CAxBKL,EAAeH,EAAaS,EAmBXlB,eAAkB,SAAUoB,GAClDR,GACHO,EAASC,KAEV,O,iCCvCL,wIAAO,IAAMC,EAAgB,WAChBC,EAA6B,oBAC7BC,EAAyB,gBACzBC,EAAoB,e,yGCGrBC,E,oEAAAA,K,kBAAAA,E,qBAAAA,M,KASL,IAAMC,EAA6E,SAAA5C,GACtF,IAAM6C,EAA8B,YAAlB7C,EAAM8C,QAAwB,4BAA8B,iCACxEC,EAAQ,mEAA+DF,EAA/D,kEAGd,OACI,sBAAK5C,UAAU,sBAAf,UACI,oBAAGA,UAAWC,IAAO8C,UAArB,UACI,sBAAM/C,UAAU,uCAAhB,uBACC8C,KAEL,eAAC,IAAD,CACIE,UAAU,SACVhD,UAAWC,IAAOgD,mBAClBzC,QAAST,EAAMmD,kBAHnB,UAKI,cAAC,IAAD,IALJ,uC,oBCzBZxC,EAAOC,QAAU,CAAC,UAAY,yCAAyC,mBAAqB,oD,iCCD5F,8LAIawC,EAAsB,WAC/B,MAAO,wCAGEC,EAAwB,WACjC,MAAO,mCAGEC,EAAwB,WACjC,MAAM,sCAAN,OAA6CC,IAA7C,gBAAyEC,IAAzE,YAGSC,EAA2B,WACpC,MAAM,uBAAN,OAA2BC,IAA3B,qEAGSC,EAAiC,SAACC,GAC3C,IAAMC,EAAQC,YAA0BF,EAAgB,QAAS,UAC3DG,EAAqBC,IAAkBC,OAASL,EACtD,MAAM,mDAAN,OAA0DA,EAA1D,YAA4EC,EAA5E,8BAAuGE,EAAvG,iC,oBCtBJpD,EAAOC,QAAU,CAAC,eAAiB,mC,iCCCnC,IAAIsD,EAAyBC,EAAQ,IAErCC,OAAOC,eAAezD,EAAS,aAAc,CAC3C0D,OAAO,IAET1D,EAAQiB,aAAU,EAElB,IAAI0C,EAASL,EAAuBC,EAAQ,IAIxCK,GAAW,EAFMN,EAAuBC,EAAQ,KAElBtC,SAAS0C,EAAO1C,QAAQV,cAAc,OAAQ,CAC9EsD,EAAG,uNACD,kBAEJ7D,EAAQiB,QAAU2C,G,sQC+BZE,E,4MACK1C,MAAuB,CAC1B2C,qBAAsB,GACtBC,QAAS,GACTC,gBAAgB,EAChBC,UAAW,EAAK9E,MAAM+E,WAAa,EAAK/E,MAAM+E,WAAWhD,KAAO,GAChEiD,iBAAkB,IAClBC,gBAAiB,GACjBC,gBAAgB,G,EAwGZC,kBAAoB,SAACC,GAA0C,IAAD,EAC1CA,EAAMC,OAAtBtD,EAD0D,EAC1DA,KAAMuC,EADoD,EACpDA,MACd,EAAKgB,SAAL,eAAiBvD,EAAOuC,K,EAGpBiB,aAAe,SAACH,GACpBA,EAAMI,iBACN,IAAMC,EAAc,EAAKzD,MAAM8C,UAAUY,OACrCD,GAAe,EAAKzD,MAAM4C,QAC1B,EAAKe,YAEL,EAAKL,SAAS,CAAER,UAAWW,EAAaP,gBAAgB,IACxD,EAAKU,UAAWH,EAAsCpC,cAAxBD,iB,EAI9BwC,UAAY,SAACC,GAAD,IAAkBb,EAAlB,uDAAqC,IAArC,OAA8C,EAAKM,SACnE,CAAEX,qBAAsBkB,EAAShB,gBAAgB,EAAMG,mBAAkBC,gBAAiBY,K,EAGtFC,oBAAsB,kBAAM,EAAKR,SAAS,CAAET,gBAAgB,K,EAE5Dc,SAAW,WACf,IAAMZ,EAAa,EAAK/E,MAAM+E,WACxBgB,EAAsB,EAAK/F,MAAMgG,0BAFlB,EAGU,EAAKhE,MAA5B4C,EAHa,EAGbA,QAASE,EAHI,EAGJA,UACjBmB,cACAC,YAA4B,CAAEC,GAAIpB,EAAWoB,GAAIJ,sBAAqBhE,KAAM+C,EAAUY,SACtFU,YAAiC,CAAEC,OAAQzB,EAASmB,oBAAqBO,YAA2B,IAAIC,MAASC,eAAe,IAChI,EAAKxG,MAAMyG,cAAc,CACrBC,WAAY,KACZL,OAAQzB,EACR+B,iBAAiB,EACjB5B,WAAY,CACRoB,GAAIpB,EAAWoB,GACfS,SAAS,EACT7E,KAAM+C,EAAUY,UAGxB,EAAK1F,MAAM6G,QAAQC,KAAK,U,EAGpB3D,kBAAoB,WACxB,EAAKnD,MAAM+G,yBACX,EAAK/G,MAAM6G,QAAQC,KAAK,U,EAGpBE,kBAAoB,WACxB,EAAKhH,MAAM6G,QAAQC,KAAK,M,uDApJxB,IAAMG,EAAmB,UAAMvE,IAAN,qBAAoCwE,IAApC,aACnBC,EAAsB,UAAMzE,IAAN,kBAAiCwE,IAAjC,aACtBE,EAAgBC,KAAKrF,MAAMkD,iBAAmBmC,KAAKrF,MAAM8C,UACzDwC,EAAcD,KAAKrF,MAAMkD,iBAAmBmC,KAAKrF,MAAM4C,QACvD2C,EACF,uBAAMC,SAAUH,KAAK9B,aAActF,UAAU,WAAWwH,YAAU,EAACC,aAAa,MAAhF,UACI,uBAAOC,QAAQ,oBAAoB1H,UAAU,UAA7C,SAAwDgH,IACxD,cAAC,IAAD,CACIlF,KAAK,YACL6F,MAAOT,EACP7C,MAAO+C,KAAKrF,MAAM8C,UAClB7E,UAAU,iBACVK,QAAQ,WACRuH,WAAS,EACTC,UAAQ,EACRC,WAAS,EACTC,MAAOZ,EACPa,WAAYb,EAAgBhE,cAAwB,GACpD8E,WAAY,CACR/B,GAAI,oBACJuB,aAAc,WACdS,UAAWjB,KAEfkB,SAAUf,KAAKlC,oBAEnB,uBAAOwC,QAAQ,gBAAgB1H,UAAU,UAAzC,SAAoDsC,MACpD,cAAC,IAAD,CACIR,KAAK,UACL6F,MAAOrF,IACP+B,MAAO+C,KAAKrF,MAAM4C,QAClB3E,UAAU,iBACVK,QAAQ,WACRuH,WAAS,EACTC,UAAQ,EACRE,MAAOV,EACPW,WAAYX,EAAcjE,cAA0B,GACpD6E,WAAY,CAAE/B,GAAI,iBAClBiC,SAAUf,KAAKlC,oBAEnB,qBAAKlF,UAAU,iBAAf,SACI,cAAC,IAAD,CACIG,KAAK,SACLC,MAAM,UACNC,QAAQ,YACRC,KAAK,QACLC,UAAW,cAAC,IAAD,IALf,4BAUN6H,EACF,cAAC,IAAD,CACIvF,QAASH,IAA6B2F,SACtCnF,kBAAmBkE,KAAKlE,oBAGhC,OACI,sBAAKlD,UAAU,uBAAf,UACKoH,KAAKrH,MAAMqG,OAASgC,EAA2B,KAChD,sBAAKpI,UAAU,sBAAf,UACI,cAAC,IAAD,CAAesI,KAAK,oBACnBhB,KAEL,cAAC,IAAD,CAAmB7G,oBAAqB2G,KAAKL,oBAC7C,cAAC,IAAD,CACIwB,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,KAAMtB,KAAKrF,MAAM6C,eACjB+D,iBAAkBvB,KAAKrF,MAAMgD,iBAC7B6D,QAASxB,KAAKvB,oBAJlB,SAMI,cAAC,IAAD,CACIgD,QAAS,CAAEC,KAAM7I,IAAO8I,gBACxBnD,QAASwB,KAAKrF,MAAMiD,oBAG5B,cAAC,IAAD,CACIY,QAASwB,KAAKrF,MAAM2C,qBACpBsE,YAAU,YACVC,eAAe,c,0CAO3B,IAAMC,EAAQ,IAAIC,gBAAgB/B,KAAKrH,MAAMqJ,SAASC,QAClDH,EAAMI,IAAI,OACVlC,KAAK/B,SAAS,CAAEV,QAASuE,EAAMK,IAAI,QAEnCnC,KAAKrH,MAAMyJ,sBACXpC,KAAKzB,UAAUyB,KAAKrH,MAAMyJ,qBAAsB,O,yCAI9BC,GAClBrC,KAAKrH,MAAM+E,YAAcsC,KAAKrH,MAAM+E,aAAe2E,EAAU3E,YAC7DsC,KAAK/B,SAAS,CAAER,UAAWuC,KAAKrH,MAAM+E,WAAWhD,W,GA5GtCf,aAkLR2I,uBAdS,SAAC3H,GACrB,MAAO,CACHqE,OAAQrE,EAAMqE,OACdoD,qBAAsBzH,EAAMyH,qBAC5BzD,0BAA2BhE,EAAMgE,0BACjCjB,WAAY/C,EAAM+C,eAGC,SAAC6E,GACxB,MAAO,CACH7C,uBAAwB,kBAAM6C,EAASC,gBACvCpD,cAAe,SAACqD,GAAD,OAAuCF,EAASG,YAAkBD,QAG1EH,CAA6CjF","file":"static/js/11.4295d339.chunk.js","sourcesContent":["import { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\n\r\nimport styles from './ToDashboardButton.module.css';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton: React.FunctionComponent<ToDashboardButtonProps> = props => {\r\n    return (\r\n        <div className={styles.button_wrapper}>\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDashboardButton;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"ToDashboardButton_button_wrapper__1EtAB\"};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport SvgIcon from '../SvgIcon';\n/**\n * Private module reserved for @material-ui/x packages.\n */\n\nexport default function createSvgIcon(path, displayName) {\n  var Component = function Component(props, ref) {\n    return /*#__PURE__*/React.createElement(SvgIcon, _extends({\n      ref: ref\n    }, props), path);\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Need to set `displayName` on the inner component for React.memo.\n    // React prior to 16.14 ignores `displayName` on the wrapper.\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = SvgIcon.muiName;\n  return /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Component));\n}","/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\nimport * as React from 'react';\nexport default function useControlled(_ref) {\n  var controlled = _ref.controlled,\n      defaultProp = _ref.default,\n      name = _ref.name,\n      _ref$state = _ref.state,\n      state = _ref$state === void 0 ? 'value' : _ref$state;\n\n  var _React$useRef = React.useRef(controlled !== undefined),\n      isControlled = _React$useRef.current;\n\n  var _React$useState = React.useState(defaultProp),\n      valueState = _React$useState[0],\n      setValue = _React$useState[1];\n\n  var value = isControlled ? controlled : valueState;\n\n  if (process.env.NODE_ENV !== 'production') {\n    React.useEffect(function () {\n      if (isControlled !== (controlled !== undefined)) {\n        console.error([\"Material-UI: A component is changing the \".concat(isControlled ? '' : 'un', \"controlled \").concat(state, \" state of \").concat(name, \" to be \").concat(isControlled ? 'un' : '', \"controlled.\"), 'Elements should not switch from uncontrolled to controlled (or vice versa).', \"Decide between using a controlled or uncontrolled \".concat(name, \" \") + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [controlled]);\n\n    var _React$useRef2 = React.useRef(defaultProp),\n        defaultValue = _React$useRef2.current;\n\n    React.useEffect(function () {\n      if (!isControlled && defaultValue !== defaultProp) {\n        console.error([\"Material-UI: A component is changing the default \".concat(state, \" state of an uncontrolled \").concat(name, \" after being initialized. \") + \"To suppress this warning opt to use a controlled \".concat(name, \".\")].join('\\n'));\n      }\n    }, [JSON.stringify(defaultProp)]);\n  }\n\n  var setValueIfUncontrolled = React.useCallback(function (newValue) {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  }, []);\n  return [value, setValueIfUncontrolled];\n}","export const GAME_ID_LABEL = 'Spiel-ID';\r\nexport const NUMBER_OF_CATEGORIES_LABEL = 'Anzahl Kategorien';\r\nexport const NUMBER_OF_ROUNDS_LABEL = 'Anzahl Runden';\r\nexport const PLAYER_NAME_LABEL = 'Spielername';\r\n","import { Link } from '@material-ui/core';\r\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\r\nimport React from 'react';\r\n\r\nimport styles from './RejoinRunningGameHint.module.css';\r\n\r\nexport enum RejoinRunningGameHintContext {\r\n    newgame = 'newgame',\r\n    joingame = 'joingame'\r\n}\r\n\r\ninterface RejoinRunningGameHintProps {\r\n    context: RejoinRunningGameHintContext;\r\n    rejoinRunningGame: () => void;\r\n}\r\nexport const RejoinRunningGameHint: React.FunctionComponent<RejoinRunningGameHintProps> = props => {\r\n    const condition = props.context === 'newgame' ? 'ein neues Spiel erstellst' : 'einem anderen Spiel beitrittst';\r\n    const hintText = `Du nimmst bereits an einem laufenden Spiel teil. Wenn du ${condition},\r\n    kannst du nicht mehr in das alte Spiel zurückkehren!`;\r\n\r\n    return (\r\n        <div className=\"material-card-style\">\r\n            <p className={styles.hint_text}>\r\n                <span className=\"rejoin-running-game-hint-highlighted\">Achtung: </span>\r\n                {hintText}\r\n            </p>\r\n            <Link\r\n                component=\"button\"\r\n                className={styles.rejoin_game_button}\r\n                onClick={props.rejoinRunningGame}\r\n            >\r\n                <DirectionsRunIcon />\r\n                Zurück ins laufende Spiel\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hint_text\":\"RejoinRunningGameHint_hint_text__24Gb_\",\"rejoin_game_button\":\"RejoinRunningGameHint_rejoin_game_button__1Tob4\"};","import { MAX_NUMBER_OF_ROUNDS, MIN_NUMBER_OF_CATEGORIES, MIN_NUMBER_OF_ROUNDS, STANDARD_ALPHABET } from '../constants/game.constant';\r\nimport { makePluralIfCountIsNotOne } from './general.utils';\r\n\r\n\r\nexport const getInvalidNameError = (): string => {\r\n    return 'Du musst einen Spielernamen eingeben';\r\n};\r\n\r\nexport const getInvalidGameIdError = (): string => {\r\n    return 'Du musst eine Spiel-ID eingeben';\r\n};\r\n\r\nexport const getInvalidRoundsError = (): string => {\r\n    return `Die Anzahl an Runden muss zwischen ${MIN_NUMBER_OF_ROUNDS} und ${MAX_NUMBER_OF_ROUNDS} liegen`;\r\n};\r\n\r\nexport const getTooFewCategoriesError = (): string => {\r\n    return `Wähle mindestens ${MIN_NUMBER_OF_CATEGORIES} Kategorien aus. Zum Beispiel: Stadt, Land und Fluss/Gewässer`;\r\n};\r\n\r\nexport const getTooManyLettersExcludedError = (numberOfRounds: number): string => {\r\n    const round = makePluralIfCountIsNotOne(numberOfRounds, 'Runde', 'Runden'); \r\n    const maxNumberToExclude = STANDARD_ALPHABET.length - numberOfRounds;\r\n    return `Du hast zu viele Buchstaben ausgeschlossen! Bei ${numberOfRounds} ${round} darfst du maximal ${maxNumberToExclude} Buchstaben ausschließen`;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert_snackbar\":\"JoinGame_alert_snackbar__3KqkF\"};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M13.5 5.5c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zM9.8 8.9L7 23h2.1l1.8-8 2.1 2v6h2v-7.5l-2.1-2 .6-3C14.8 12 16.8 13 19 13v-2c-1.9 0-3.5-1-4.3-2.4l-1-1.6c-.4-.6-1-1-1.7-1-.3 0-.5.1-.8.1L6 8.3V13h2V9.6l1.8-.7\"\n}), 'DirectionsWalk');\n\nexports.default = _default;","import { Button, Snackbar, SnackbarContent, TextField } from '@material-ui/core';\r\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { LiveMessage } from 'react-aria-live';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\n\r\nimport {\r\n    RejoinRunningGameHint,\r\n    RejoinRunningGameHintContext,\r\n} from '../../components/RejoinRunningGameHint/RejoinRunningGameHint';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { PLAYER_NAME_MAX_LENGTH } from '../../constants/app.constant';\r\nimport { GAME_ID_LABEL, PLAYER_NAME_LABEL } from '../../constants/text.constant';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { AppAction, prepareRejoiningGame, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { getInvalidGameIdError, getInvalidNameError } from '../../utils/error-text.util';\r\nimport { convertDateToUnixTimestamp } from '../../utils/general.utils';\r\nimport {\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setPlayerInfoInLocalStorage,\r\n    setRunningGameInfoInLocalStorage,\r\n} from '../../utils/local-storage.utils';\r\nimport styles from './JoinGame.module.css';\r\n\r\ninterface JoinGamePropsFromStore {\r\n    gameId: string | null;\r\n    joinGameErrorMessage: string | null;\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\ninterface JoinGameDispatchProps {\r\n    onPrepareRejoiningGame: () => void;\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface JoinGameProps extends JoinGamePropsFromStore, JoinGameDispatchProps, RouteComponentProps { }\r\ninterface JoinGameState {\r\n    a11yMessageAssertive: string;\r\n    idInput: string;\r\n    isSnackbarOpen: boolean;\r\n    nameInput: string;\r\n    snackBarDuration: number;\r\n    snackBarMessage: string;\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass JoinGame extends Component<JoinGameProps, JoinGameState> {\r\n    public state: JoinGameState = {\r\n        a11yMessageAssertive: '',\r\n        idInput: '',\r\n        isSnackbarOpen: false,\r\n        nameInput: this.props.playerInfo ? this.props.playerInfo.name : '',\r\n        snackBarDuration: 3000,\r\n        snackBarMessage: '',\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const playerNameAriaLabel = `${PLAYER_NAME_LABEL} (maximal ${PLAYER_NAME_MAX_LENGTH} Zeichen)`;\r\n        const playerNameVisibleLabel = `${PLAYER_NAME_LABEL} (max. ${PLAYER_NAME_MAX_LENGTH} Zeichen)`;\r\n        const isNameInvalid = this.state.validateInputs && !this.state.nameInput;\r\n        const isIdInvalid = this.state.validateInputs && !this.state.idInput;\r\n        const joinGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <label htmlFor=\"player-name-input\" className=\"sr-only\">{playerNameAriaLabel}</label>\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label={playerNameVisibleLabel}\r\n                    value={this.state.nameInput}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    autoFocus\r\n                    error={isNameInvalid}\r\n                    helperText={isNameInvalid ? getInvalidNameError() : ''}\r\n                    inputProps={{\r\n                        id: 'player-name-input',\r\n                        autoComplete: 'nickname',\r\n                        maxLength: PLAYER_NAME_MAX_LENGTH\r\n                    }}\r\n                    onChange={this.handleInputChange}\r\n                />\r\n                <label htmlFor=\"game-id-input\" className=\"sr-only\">{GAME_ID_LABEL}</label>\r\n                <TextField\r\n                    name=\"idInput\"\r\n                    label={GAME_ID_LABEL}\r\n                    value={this.state.idInput}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={isIdInvalid}\r\n                    helperText={isIdInvalid ? getInvalidGameIdError() : ''}\r\n                    inputProps={{ id: 'game-id-input' }}\r\n                    onChange={this.handleInputChange}\r\n                />\r\n                <div className=\"button-wrapper\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<DirectionsWalkIcon />}\r\n                    >Beitreten</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        const rejoinRunningGameElement = (\r\n            <RejoinRunningGameHint\r\n                context={RejoinRunningGameHintContext.joingame}\r\n                rejoinRunningGame={this.rejoinRunningGame}\r\n            />\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                {this.props.gameId ? rejoinRunningGameElement : null}\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader text=\"Spiel beitreten\"></SectionHeader>\r\n                    {joinGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n                    open={this.state.isSnackbarOpen}\r\n                    autoHideDuration={this.state.snackBarDuration}\r\n                    onClose={this.handleSnackBarClose}\r\n                >\r\n                    <SnackbarContent\r\n                        classes={{ root: styles.alert_snackbar }}\r\n                        message={this.state.snackBarMessage}\r\n                    ></SnackbarContent>\r\n                </Snackbar>\r\n                <LiveMessage\r\n                    message={this.state.a11yMessageAssertive}\r\n                    aria-live=\"assertive\"\r\n                    clearOnUnmount=\"true\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        if (query.has('id')) {\r\n            this.setState({ idInput: query.get('id') as string });\r\n        }\r\n        if (this.props.joinGameErrorMessage) {\r\n            this.alertUser(this.props.joinGameErrorMessage, 10000);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: JoinGameProps) {\r\n        if (this.props.playerInfo && this.props.playerInfo !== prevProps.playerInfo) {\r\n            this.setState({ nameInput: this.props.playerInfo.name });\r\n        }\r\n    }\r\n\r\n    private handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value } as any);\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        const trimmedName = this.state.nameInput.trim();\r\n        if (trimmedName && this.state.idInput) {\r\n            this.joinGame();\r\n        } else {\r\n            this.setState({ nameInput: trimmedName, validateInputs: true });\r\n            this.alertUser(!trimmedName ? getInvalidNameError() : getInvalidGameIdError());\r\n        }\r\n    }\r\n\r\n    private alertUser = (message: string, snackBarDuration = 3000) => this.setState(\r\n        { a11yMessageAssertive: message, isSnackbarOpen: true, snackBarDuration, snackBarMessage: message }\r\n    );\r\n\r\n    private handleSnackBarClose = () => this.setState({ isSnackbarOpen: false });\r\n\r\n    private joinGame = () => {\r\n        const playerInfo = this.props.playerInfo as PlayerInfo;\r\n        const idCreationTimestamp = this.props.playerIdCreationTimestamp;\r\n        const { idInput, nameInput } = this.state;\r\n        removeAllDataOfRunningGameFromLocalStorage();\r\n        setPlayerInfoInLocalStorage({ id: playerInfo.id, idCreationTimestamp, name: nameInput.trim() });\r\n        setRunningGameInfoInLocalStorage({ gameId: idInput, idCreationTimestamp: convertDateToUnixTimestamp(new Date()), isPlayerAdmin: false });\r\n        this.props.onSetGameData({\r\n            gameConfig: null,\r\n            gameId: idInput,\r\n            isRejoiningGame: false,\r\n            playerInfo: {\r\n                id: playerInfo.id,\r\n                isAdmin: false,\r\n                name: nameInput.trim()\r\n            }\r\n        });\r\n        this.props.history.push('/play');\r\n    }\r\n\r\n    private rejoinRunningGame = () => {\r\n        this.props.onPrepareRejoiningGame();\r\n        this.props.history.push('/play');\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): JoinGamePropsFromStore => {\r\n    return {\r\n        gameId: state.gameId,\r\n        joinGameErrorMessage: state.joinGameErrorMessage,\r\n        playerIdCreationTimestamp: state.playerIdCreationTimestamp,\r\n        playerInfo: state.playerInfo\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): JoinGameDispatchProps => {\r\n    return {\r\n        onPrepareRejoiningGame: () => dispatch(prepareRejoiningGame()),\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => dispatch(setDataForNewGame(payload))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinGame);\r\n"],"sourceRoot":""}