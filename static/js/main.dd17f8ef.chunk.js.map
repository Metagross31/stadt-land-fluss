{"version":3,"sources":["components/Header/Header.tsx","components/NewVersionSnackbar/NewVersionSnackbar.tsx","constants/app.constant.ts","containers/Dashboard/Dashboard.tsx","serviceWorker.ts","App.tsx","store/app.reducer.ts","index.tsx","store/app.actions.ts","utils/local-storage.utils.ts","containers/Dashboard/Dashboard.module.css","constants/themes.constant.ts","utils/general.utils.ts","components/SectionHeader/SectionHeader.module.css","constants/game.constant.ts","components/SectionHeader/SectionHeader.tsx","components/LoadingScreen/LoadingScreen.tsx"],"names":["Header","state","isFullscreenActive","fullscreenButtonTitle","this","className","props","theme","playerName","packageJson","version","href","target","rel","aria-label","IconButton","size","title","onClick","toggleFullscreen","fontSize","history","push","document","addEventListener","setState","fullscreenElement","closeFullscreen","openFullscreen","elem","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","Component","withRouter","connect","playerInfo","name","NewVersionSnackbar","useSnackbar","enqueueSnackbar","closeSnackbar","persist","variant","action","Button","updateServiceWorker","MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS","SERVICE_WORKER_SKIP_WAITING","Dashboard","anchorEl","showCredits","handleThemePickerClick","event","currentTarget","handleThemePickerMenuClose","handleThemePickerMenuItemClick","selectedTheme","onSetAppTheme","setAppThemeIdInLocalStorage","id","handleCreditsClick","rejoinGameElement","Link","component","RouterLink","to","styles","rejoin_game_link","creditsElement","Fragment","SectionHeader","isH3","showDivider","text","link_container","gameId","image_wrapper","src","activeTheme","homepageImageUrl","alt","slf_image","theme_picker_button","color","aria-controls","aria-haspopup","theme_picker_button_icon","Menu","keepMounted","open","Boolean","onClose","AppThemes","map","item","index","MenuItem","displayName","img_copyright","dispatch","payload","setAppTheme","isLocalhost","window","location","hostname","match","register","config","navigator","URL","process","origin","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","gameManualPromise","joinGamePromise","newGamePromise","playGamePromise","GameManual","lazy","GameResults","JoinGame","NewGame","PlayGame","backspaceDisabler","require","App","waitingWorker","newVersionAvailable","restoreAppTheme","appThemeId","getAppThemeIdFromLocalStorage","appTheme","find","restorePlayerInfo","nowTimestamp","storedPlayerInfo","getPlayerInfoFromLocalStorage","idCreationTimestamp","uuidv4","setPlayerInfoInLocalStorage","onSetStoredPlayerInfo","restoreRunningGameInfo","runningGameInfo","getRunningGameInfoFromLocalStorage","onSetStoredRunningGameInfo","removeAllDataOfRunningGameFromLocalStorage","onServiceWorkerUpdate","includes","waiting","postMessage","type","mainContent","style","fallback","LoadingScreen","path","exact","newVersionSnackbar","ThemeProvider","muiTheme","maxSnack","basename","disable","convertDateToUnixTimestamp","Date","setStoredPlayerInfo","setStoredRunningGameInfo","initialState","allPlayers","gameConfig","gameRounds","isRejoiningGame","playerIdCreationTimestamp","appStore","createStore","storedRunningGameInfo","SET_APP_THEME","SET_STORED_PLAYER_INFO","isAdmin","SET_STORED_RUNNING_GAME_INFO","isPlayerAdmin","SET_DATA_FOR_NEW_GAME","SET_DATA_OF_FINISHED_GAME","RESET_APP_STATE","ReactDOM","render","store","StylesProvider","injectFirst","getElementById","setDataForNewGame","setDataOfFinishedGame","resetAppState","APP_THEME_LS_KEY","PLAYER_INFO_LS_KEY","RUNNING_GAME_INFO_LS_KEY","RUNNING_GAME_CONFIG_LS_KEY","RUNNING_GAME_ROUND_LS_KEY_PREFIX","localStorage","getItem","setItem","storedData","JSON","parse","data","stringify","setRunningGameInfoInLocalStorage","getRunningGameConfigFromLocalStorage","setRunningGameConfigInLocalStorage","getRunningGameRoundFromLocalStorage","round","convertCollectionToMap","setRunningGameRoundInLocalStorage","convertMapToCollection","removeItem","i","MAX_NUMBER_OF_ROUNDS","module","exports","APP_THEME_ID","green","animationBackgroundColor","createMuiTheme","palette","primary","secondary","red","background","blue","deepOrange","orange","indigo","pink","purple","amber","black","blueGrey","copyToClipboard","element","createElement","value","setAttribute","position","left","body","appendChild","select","execCommand","removeChild","createAndFillArray","length","Array","fill","makePluralIfCountIsNotOne","count","singular","plural","dateToConvert","getTime","collectionToConvert","dataAsMap","Map","Object","keys","forEach","key","set","mapToConvert","dataAsCollection","GamePhase","DEFAULT_NUMBER_OF_ROUNDS","MIN_NUMBER_OF_ROUNDS","MIN_NUMBER_OF_CATEGORIES","DEFAULT_DURATION_OF_COUNTDOWN","MIN_DURATION_OF_COUNTDOWN","STANDARD_ALPHABET","STANDARD_EXCLUDED_LETTERS","STANDARD_CATEGORIES","AVAILABLE_CATEGORIES","MIN_NUMBER_OF_PLAYERS","LETTER_ANIMATION_LETTER_COUNT","LETTER_ANIMATION_REDRAW_SPEED","SAME_WORD_POINTS","STANDARD_POINTS","ONLY_ANSWER_POINTS","EXTRA_POINTS","GAME_OPTION_LABEL","checkForDuplicates","creativeAnswersExtraPoints","onlyPlayerWithValidAnswer","h2Element","section_header","h3Element","useStyles","makeStyles","loadingScreen","top","height","width","backgroundColor","loadingSpinner","transform","loadingSpinnerSize","waitingForPlayers","bottom","maxWidth","margin","classes","join"],"mappings":"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","file":"static/js/main.dd17f8ef.chunk.js","sourcesContent":["import './Header.css';\r\nimport { IconButton } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport packageJson from '../../../package.json';\r\nimport { AppTheme } from '../../constants/themes.constant';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\r\n\r\ninterface HeaderPropsFromStore {\r\n    playerName: string | null;\r\n}\r\ninterface HeaderProps extends HeaderPropsFromStore, RouteComponentProps {\r\n    theme: AppTheme;\r\n}\r\ninterface HeaderState {\r\n    isFullscreenActive: boolean;\r\n}\r\n\r\nexport class Header extends Component<HeaderProps, HeaderState> {\r\n    public state = { isFullscreenActive: false };\r\n\r\n    public render() {\r\n        const fullscreenButtonTitle = this.state.isFullscreenActive ? 'Vollbildmodus beenden' : 'Vollbildmodus starten';\r\n        return (\r\n            <header className={'app-header ' + this.props.theme.className}>\r\n                <h1>Stadt-Land-Fluss</h1>\r\n                <p>Spieler: {this.props.playerName ? this.props.playerName : '-'}</p>\r\n                <div className=\"about-section\">\r\n                    <p>v{packageJson.version}</p>\r\n                    <a\r\n                        href=\"https://github.com/alexlehner86\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        aria-label=\"Mehr über den Autor erfahren (öffnet neues Fenster)\"\r\n                    >Autor</a>\r\n                </div>\r\n                <div className=\"icon-buttons\">\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        title={fullscreenButtonTitle}\r\n                        aria-label={fullscreenButtonTitle}\r\n                        onClick={() => this.toggleFullscreen()}\r\n                    >\r\n                        {this.state.isFullscreenActive ? <FullscreenExitIcon fontSize=\"small\" /> : <FullscreenIcon fontSize=\"small\" />}\r\n                    </IconButton>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        title=\"Zum Dashboard\"\r\n                        aria-label=\"Zum Dashboard\"\r\n                        onClick={() => this.props.history.push('/')}\r\n                    >\r\n                        <ExitToAppIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        document.addEventListener('fullscreenchange', () => {\r\n            // document.fullscreenElement will point to the element that is in fullscreen mode if there is one.\r\n            // If there isn't one, the value of the property is null.\r\n            this.setState({ isFullscreenActive: !!document.fullscreenElement });\r\n        });\r\n    }\r\n\r\n    private toggleFullscreen() {\r\n        if (this.state.isFullscreenActive) {\r\n            this.closeFullscreen();\r\n        } else {\r\n            this.openFullscreen();\r\n        }\r\n    }\r\n\r\n    private openFullscreen() {\r\n        const elem = document.documentElement;\r\n        if (elem.requestFullscreen) {\r\n            elem.requestFullscreen();\r\n        } else if ((elem as any).mozRequestFullScreen) { /* Firefox */\r\n            (elem as any).mozRequestFullScreen();\r\n        } else if ((elem as any).webkitRequestFullscreen) { /* Chrome, Safari and Opera */\r\n            (elem as any).webkitRequestFullscreen();\r\n        } else if ((elem as any).msRequestFullscreen) { /* IE/Edge */\r\n            (elem as any).msRequestFullscreen();\r\n        }\r\n    }\r\n\r\n    private closeFullscreen() {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if ((document as any).mozCancelFullScreen) { /* Firefox */\r\n            (document as any).mozCancelFullScreen();\r\n        } else if ((document as any).webkitExitFullscreen) { /* Chrome, Safari and Opera */\r\n            (document as any).webkitExitFullscreen();\r\n        } else if ((document as any).msExitFullscreen) { /* IE/Edge */\r\n            (document as any).msExitFullscreen();\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): HeaderPropsFromStore => {\r\n    return {\r\n        playerName: state.playerInfo ? state.playerInfo.name : ''\r\n    };\r\n};\r\nexport default withRouter(connect(mapStateToProps)(Header));\r\n","import { Button } from '@material-ui/core';\r\nimport { useSnackbar } from 'notistack';\r\nimport React from 'react';\r\n\r\ninterface NewVersionSnackbarProps {\r\n    updateServiceWorker: () => void;\r\n}\r\n\r\nconst NewVersionSnackbar: React.FunctionComponent<NewVersionSnackbarProps> = props => {\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n    const refreshAction = () => (\r\n        <Button\r\n            className=\"snackbar-button\"\r\n            size=\"small\"\r\n            onClick={props.updateServiceWorker}\r\n        >\r\n            Aktualisieren\r\n        </Button>\r\n    );\r\n    enqueueSnackbar('Eine neue Version ist verfügbar', {\r\n        persist: true,\r\n        variant: 'success',\r\n        action: refreshAction\r\n    });\r\n    return null;\r\n};\r\n\r\nexport default NewVersionSnackbar;\r\n","/** 7 days in seconds */\r\nexport const MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS = 7 * 24 * 60 * 60;\r\n/** 1 hour in seconds */\r\nexport const MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS = 60 * 60;\r\n\r\nexport const SERVICE_WORKER_SKIP_WAITING = 'SKIP_WAITING';\r\n","import { IconButton, Menu, MenuItem } from '@material-ui/core';\r\nimport Link from '@material-ui/core/Link';\r\nimport BrushIcon from '@material-ui/icons/Brush';\r\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport { AppTheme, AppThemes } from '../../constants/themes.constant';\r\nimport { AppAction, setAppTheme } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { setAppThemeIdInLocalStorage } from '../../utils/local-storage.utils';\r\nimport styles from './Dashboard.module.css';\r\n\r\ninterface DashboardPropsFromStore {\r\n    activeTheme: AppTheme\r\n    gameId: string | null;\r\n}\r\ninterface DashboardDispatchProps {\r\n    onSetAppTheme: (payload: AppTheme) => void;\r\n}\r\ninterface DashboardProps extends DashboardPropsFromStore, DashboardDispatchProps { }\r\ninterface DashboardState {\r\n    anchorEl: EventTarget | null;\r\n    showCredits: boolean;\r\n}\r\n\r\nclass Dashboard extends Component<DashboardProps, DashboardState> {\r\n    public state = {\r\n        anchorEl: null,\r\n        showCredits: false\r\n    };\r\n\r\n    public render() {\r\n        const rejoinGameElement = (\r\n            <Link component={RouterLink} to=\"/play\" className={styles.rejoin_game_link}>\r\n                <DirectionsRunIcon />\r\n                Zurück ins laufende Spiel\r\n            </Link>\r\n        );\r\n        const creditsElement = (\r\n            <React.Fragment>\r\n                <a href=\"https://www.vecteezy.com/vector-art/830131-river-city-landscape-with-buildings-hills-and-trees\" target=\"_blank\" rel=\"noopener noreferrer\">Homepage/Stadt-Land-Fluss by pikgura – www.vecteezy.com</a>\r\n                <a href=\"https://www.vecteezy.com/vector-art/276920-abstract-seamless-pattern-with-tropical-leaves\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Grün/Wald by NadiaGrapes – www.vecteezy.com</a>\r\n                <a href=\"https://www.freepik.com/free-photos-vectors/background\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Blau/Meer by macrovector – www.freepik.com</a>\r\n                <a href=\"https://www.vecteezy.com/vector-art/460735-seashell-sand-seamless-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Orange/Strand by Macrovector – www.vecteezy.com</a>\r\n                <a href=\"https://www.vecteezy.com/vector-art/454258-music-seamless\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Pink/Musik by Macrovector – www.vecteezy.com</a>\r\n                <a href=\"https://www.vecteezy.com/vector-art/662038-cat-and-bat-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Schwarz/Goth by angyee – www.vecteezy.com</a>\r\n            </React.Fragment>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader isH3={false} showDivider={true} text=\"Dashboard\"></SectionHeader>\r\n                    <div className={styles.link_container}>\r\n                        {this.props.gameId ? rejoinGameElement : null}\r\n                        <Link component={RouterLink} to=\"/newgame\">Neues Spiel</Link>\r\n                        <Link component={RouterLink} to=\"/joingame\">Spiel beitreten</Link>\r\n                        <Link component={RouterLink} to=\"/manual\">Spielanleitung</Link>\r\n                    </div>\r\n                    <div className={styles.image_wrapper}>\r\n                        <img\r\n                            src={this.props.activeTheme.homepageImageUrl}\r\n                            alt=\"Stadt, Land, Fluss\"\r\n                            className={styles.slf_image}\r\n                        />\r\n                        <IconButton\r\n                            className={styles.theme_picker_button}\r\n                            color=\"primary\"\r\n                            title=\"Theme ändern\"\r\n                            aria-label=\"Theme ändern\"\r\n                            aria-controls=\"theme-picker-menu\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={this.handleThemePickerClick}\r\n                        >\r\n                            <BrushIcon fontSize=\"small\" className={styles.theme_picker_button_icon} />\r\n                        </IconButton>\r\n                        <Menu\r\n                            id=\"theme-picker-menu\"\r\n                            anchorEl={this.state.anchorEl}\r\n                            keepMounted\r\n                            open={Boolean(this.state.anchorEl)}\r\n                            onClose={this.handleThemePickerMenuClose}\r\n                        >\r\n                            {AppThemes.map((item, index) => (\r\n                                <MenuItem\r\n                                    key={'theme-picker-menu-item-' + index}\r\n                                    onClick={() => this.handleThemePickerMenuItemClick(item)}\r\n                                >{item.displayName}</MenuItem>\r\n                            ))}\r\n                        </Menu>\r\n                    </div>\r\n                    <div className={styles.img_copyright}>\r\n                        <button onClick={this.handleCreditsClick}>Credits/Bilder</button>\r\n                        {this.state.showCredits ? creditsElement : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleThemePickerClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    private handleThemePickerMenuClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    private handleThemePickerMenuItemClick = (selectedTheme: AppTheme) => {\r\n        this.setState({ anchorEl: null });\r\n        this.props.onSetAppTheme(selectedTheme);\r\n        setAppThemeIdInLocalStorage(selectedTheme.id);\r\n    };\r\n\r\n    private handleCreditsClick = () => {\r\n        this.setState({ showCredits: !this.state.showCredits });\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): DashboardPropsFromStore => {\r\n    return {\r\n        activeTheme: state.activeTheme,\r\n        gameId: state.gameId\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): DashboardDispatchProps => {\r\n    return {\r\n        onSetAppTheme: (payload: AppTheme) => dispatch(setAppTheme(payload)),\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config): void {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config): void {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister(): void {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import './App.css';\r\n\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport { SnackbarProvider } from 'notistack';\r\nimport React, { Component, CSSProperties, Dispatch, lazy, Suspense } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport Header from './components/Header/Header';\r\nimport LoadingScreen from './components/LoadingScreen/LoadingScreen';\r\nimport NewVersionSnackbar from './components/NewVersionSnackbar/NewVersionSnackbar';\r\nimport {\r\n    MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS,\r\n    MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS,\r\n    SERVICE_WORKER_SKIP_WAITING,\r\n} from './constants/app.constant';\r\nimport { AppTheme, AppThemes } from './constants/themes.constant';\r\nimport Dashboard from './containers/Dashboard/Dashboard';\r\nimport { StoredRunningGameInfo } from './models/game.interface';\r\nimport { StoredPlayerInfo } from './models/player.interface';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { AppAction, setAppTheme, setStoredPlayerInfo, setStoredRunningGameInfo } from './store/app.actions';\r\nimport { AppState } from './store/app.reducer';\r\nimport { convertDateToUnixTimestamp } from './utils/general.utils';\r\nimport {\r\n    getAppThemeIdFromLocalStorage,\r\n    getPlayerInfoFromLocalStorage,\r\n    getRunningGameInfoFromLocalStorage,\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setPlayerInfoInLocalStorage,\r\n} from './utils/local-storage.utils';\r\n\r\n// Preload all routes available from the dashboard in the background.\r\nconst gameManualPromise = import('./containers/GameManual/GameManual');\r\nconst joinGamePromise = import('./containers/JoinGame/JoinGame');\r\nconst newGamePromise = import('./containers/NewGame/NewGame');\r\nconst playGamePromise = import('./containers/PlayGame/PlayGame');\r\n\r\n// Use lazy loading of routes to speed up time to FCP (first contentful paint)\r\nconst GameManual = lazy(() => gameManualPromise);\r\nconst GameResults = lazy(() => import('./containers/GameResults/GameResults'));\r\nconst JoinGame = lazy(() => joinGamePromise);\r\nconst NewGame = lazy(() => newGamePromise);\r\nconst PlayGame = lazy(() => playGamePromise);\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst backspaceDisabler = require('backspace-disabler');\r\n\r\ninterface AppPropsFromStore {\r\n    activeTheme: AppTheme;\r\n}\r\ninterface AppDispatchProps {\r\n    onSetAppTheme: (payload: AppTheme) => void;\r\n    onSetStoredPlayerInfo: (payload: StoredPlayerInfo) => void;\r\n    onSetStoredRunningGameInfo: (payload: StoredRunningGameInfo) => void;\r\n}\r\ninterface AppProps extends AppPropsFromStore, AppDispatchProps { }\r\n\r\ninterface AppComponentState {\r\n    waitingWorker: ServiceWorker | null,\r\n    newVersionAvailable: boolean\r\n}\r\n\r\nclass App extends Component<AppProps, AppComponentState> {\r\n    public state: AppComponentState = {\r\n        waitingWorker: null,\r\n        newVersionAvailable: false\r\n    };\r\n\r\n    public render() {\r\n        const mainContent = (\r\n            <main\r\n                className={'app-main ' + this.props.activeTheme.className}\r\n                style={this.props.activeTheme.style as CSSProperties}\r\n            >\r\n                <Suspense fallback={<LoadingScreen />}>\r\n                    <Switch>\r\n                        <Route path=\"/manual\" exact component={GameManual} />\r\n                        <Route path=\"/newgame\" exact component={NewGame} />\r\n                        <Route path=\"/joingame\" exact component={JoinGame} />\r\n                        <Route path=\"/play\" exact component={PlayGame} />\r\n                        <Route path=\"/results\" exact component={GameResults} />\r\n                        <Route path=\"/\" component={Dashboard} />\r\n                    </Switch>\r\n                </Suspense>\r\n            </main>\r\n        );\r\n        const newVersionSnackbar = (\r\n            <NewVersionSnackbar updateServiceWorker={this.updateServiceWorker}></NewVersionSnackbar>\r\n        );\r\n        return (\r\n            <ThemeProvider theme={this.props.activeTheme.muiTheme}>\r\n                <SnackbarProvider maxSnack={3}>\r\n                    <div className=\"app-container\">\r\n                        <HashRouter basename={process.env.PUBLIC_URL}>\r\n                            <Header theme={this.props.activeTheme} />\r\n                            {mainContent}\r\n                        </HashRouter>\r\n                    </div>\r\n                    {this.state.newVersionAvailable ? newVersionSnackbar : null}\r\n                </SnackbarProvider>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        serviceWorker.register({ onUpdate: this.onServiceWorkerUpdate });\r\n        // Prevent browser back on backspace (e.g. in Firefox).\r\n        backspaceDisabler.disable();\r\n        this.restoreAppTheme();\r\n        const nowTimestamp = convertDateToUnixTimestamp(new Date());\r\n        this.restorePlayerInfo(nowTimestamp);\r\n        this.restoreRunningGameInfo(nowTimestamp);\r\n    }\r\n\r\n    private restoreAppTheme = (): void => {\r\n        const appThemeId = getAppThemeIdFromLocalStorage();\r\n        if (appThemeId) {\r\n            const appTheme = AppThemes.find(theme => theme.id === appThemeId);\r\n            if (appTheme) {\r\n                this.props.onSetAppTheme(appTheme);\r\n            }\r\n        }\r\n    }\r\n\r\n    private restorePlayerInfo = (nowTimestamp: number): void => {\r\n        let storedPlayerInfo = getPlayerInfoFromLocalStorage();\r\n        // If no stored player info was found or player's id is past validity, create a new uuid and store in local storage.\r\n        if (!storedPlayerInfo || nowTimestamp - storedPlayerInfo.idCreationTimestamp > MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS) {\r\n            storedPlayerInfo = { id: uuidv4(), idCreationTimestamp: nowTimestamp, name: storedPlayerInfo ? storedPlayerInfo.name : '' };\r\n            setPlayerInfoInLocalStorage(storedPlayerInfo);\r\n        }\r\n        this.props.onSetStoredPlayerInfo(storedPlayerInfo);\r\n    }\r\n\r\n    private restoreRunningGameInfo = (nowTimestamp: number): void => {\r\n        const runningGameInfo = getRunningGameInfoFromLocalStorage();\r\n        if (runningGameInfo) {\r\n            // A running game is only valid for the time specified in the max validity constant.\r\n            if (nowTimestamp - runningGameInfo.idCreationTimestamp <= MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS) {\r\n                this.props.onSetStoredRunningGameInfo(runningGameInfo);\r\n            } else {\r\n                removeAllDataOfRunningGameFromLocalStorage();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onServiceWorkerUpdate = (registration: ServiceWorkerRegistration) => {\r\n        // Only alert user to new version, if they're not in the middle of playing a game.\r\n        if (!window.location.href.includes('/play')) {\r\n            this.setState({\r\n                waitingWorker: registration && registration.waiting,\r\n                newVersionAvailable: true\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateServiceWorker = (): void => {\r\n        const { waitingWorker } = this.state;\r\n        waitingWorker && waitingWorker.postMessage({ type: SERVICE_WORKER_SKIP_WAITING });\r\n        this.setState({ newVersionAvailable: false });\r\n        window.location.reload();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppPropsFromStore => {\r\n    return {\r\n        activeTheme: state.activeTheme\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): AppDispatchProps => {\r\n    return {\r\n        onSetAppTheme: (payload: AppTheme) => dispatch(setAppTheme(payload)),\r\n        onSetStoredPlayerInfo: (payload: StoredPlayerInfo) => dispatch(setStoredPlayerInfo(payload)),\r\n        onSetStoredRunningGameInfo: (payload: StoredRunningGameInfo) => dispatch(setStoredRunningGameInfo(payload))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { AppTheme, AppThemes } from '../constants/themes.constant';\r\nimport { GameConfig, GameRound } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { StoredRunningGameInfo } from './../models/game.interface';\r\nimport { StoredPlayerInfo } from './../models/player.interface';\r\nimport {\r\n    AppAction,\r\n    RESET_APP_STATE,\r\n    SET_APP_THEME,\r\n    SET_DATA_FOR_NEW_GAME,\r\n    SET_DATA_OF_FINISHED_GAME,\r\n    SET_STORED_PLAYER_INFO,\r\n    SET_STORED_RUNNING_GAME_INFO,\r\n    SetAppThemeAction,\r\n    SetDataForNewGameAction,\r\n    SetDataOfFinishedGameAction,\r\n    SetStoredPlayerInfoAction,\r\n    SetStoredRunningGameInfoAction,\r\n} from './app.actions';\r\n\r\nexport interface AppState {\r\n    activeTheme: AppTheme;\r\n    allPlayers: Map<string, PlayerInfo> | null;\r\n    gameId: string | null;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[] | null;\r\n    isRejoiningGame: boolean;\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\n\r\nconst initialState: AppState = {\r\n    activeTheme: AppThemes[0],\r\n    allPlayers: null,\r\n    gameId: null,\r\n    gameConfig: null,\r\n    gameRounds: null,\r\n    isRejoiningGame: false,\r\n    playerIdCreationTimestamp: 0,\r\n    playerInfo: null\r\n};\r\n\r\nexport const appReducer = (state: AppState = initialState, action: AppAction): AppState => {\r\n    let storedPlayerInfo: StoredPlayerInfo;\r\n    let storedRunningGameInfo: StoredRunningGameInfo;\r\n    switch (action.type) {\r\n        case SET_APP_THEME:\r\n            return { ...state, activeTheme: (action as SetAppThemeAction).payload };\r\n        case SET_STORED_PLAYER_INFO:\r\n            storedPlayerInfo = (action as SetStoredPlayerInfoAction).payload;\r\n            return {\r\n                ...state,\r\n                isRejoiningGame: false,\r\n                playerIdCreationTimestamp: storedPlayerInfo.idCreationTimestamp,\r\n                playerInfo: {\r\n                    id: storedPlayerInfo.id,\r\n                    isAdmin: false,\r\n                    name: storedPlayerInfo.name\r\n                }\r\n            };\r\n        case SET_STORED_RUNNING_GAME_INFO:\r\n            storedRunningGameInfo = (action as SetStoredRunningGameInfoAction).payload;\r\n            return {\r\n                ...state,\r\n                isRejoiningGame: true,\r\n                gameId: storedRunningGameInfo.gameId,\r\n                playerInfo: {\r\n                    ...state.playerInfo as PlayerInfo,\r\n                    isAdmin: storedRunningGameInfo.isPlayerAdmin\r\n                }\r\n            };\r\n        case SET_DATA_FOR_NEW_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataForNewGameAction).payload\r\n            };\r\n        case SET_DATA_OF_FINISHED_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataOfFinishedGameAction).payload,\r\n                // Set gameId to null to prevent player from manually opening PlayGame route.\r\n                gameId: null\r\n            };\r\n        case RESET_APP_STATE:\r\n            return {\r\n                ...state,\r\n                allPlayers: null,\r\n                gameId: null,\r\n                gameConfig: null,\r\n                gameRounds: null,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import './index.css';\r\n\r\nimport { StylesProvider } from '@material-ui/core';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport App from './App';\r\nimport { appReducer } from './store/app.reducer';\r\n\r\nexport const appStore = createStore(appReducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={appStore}>\r\n        <StylesProvider injectFirst>\r\n            <App />\r\n        </StylesProvider>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n","import { Action } from 'redux';\r\nimport { AppTheme } from '../constants/themes.constant';\r\nimport { GameConfig, GameRound, StoredRunningGameInfo } from '../models/game.interface';\r\nimport { PlayerInfo, StoredPlayerInfo } from './../models/player.interface';\r\n\r\nexport const SET_APP_THEME = 'SET_APP_THEME';\r\nexport const SET_STORED_PLAYER_INFO = 'SET_STORED_PLAYER_INFO';\r\nexport const SET_STORED_RUNNING_GAME_INFO = 'SET_STORED_RUNNING_GAME_INFO';\r\nexport const SET_DATA_FOR_NEW_GAME = 'SET_DATA_FOR_NEW_GAME';\r\nexport const SET_DATA_OF_FINISHED_GAME = 'SET_DATA_OF_FINISHED_GAME';\r\nexport const RESET_APP_STATE = 'RESET_APP_STATE';\r\n\r\nexport interface SetAppThemeAction extends Action {\r\n    payload: AppTheme;\r\n}\r\n\r\nexport interface SetStoredPlayerInfoAction extends Action {\r\n    payload: StoredPlayerInfo;\r\n}\r\n\r\nexport interface SetStoredRunningGameInfoAction extends Action {\r\n    payload: StoredRunningGameInfo;\r\n}\r\n\r\nexport interface SetDataForNewGamePayload {\r\n    gameId: string;\r\n    gameConfig: GameConfig | null;\r\n    isRejoiningGame: boolean;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\nexport interface SetDataForNewGameAction extends Action {\r\n    payload: SetDataForNewGamePayload\r\n}\r\n\r\nexport interface SetDataOfFinishedGamePayload {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n}\r\nexport interface SetDataOfFinishedGameAction extends Action {\r\n    payload: SetDataOfFinishedGamePayload\r\n}\r\n\r\nexport type AppAction = SetAppThemeAction | SetStoredPlayerInfoAction | SetStoredRunningGameInfoAction\r\n    | SetDataForNewGameAction | SetDataOfFinishedGameAction | Action;\r\n\r\n/*\r\n * Action Creators\r\n */\r\nexport const setAppTheme = (payload: AppTheme): SetAppThemeAction => {\r\n    return { type: SET_APP_THEME, payload };\r\n};\r\nexport const setStoredPlayerInfo = (payload: StoredPlayerInfo): SetStoredPlayerInfoAction => {\r\n    return { type: SET_STORED_PLAYER_INFO, payload };\r\n};\r\nexport const setStoredRunningGameInfo = (payload: StoredRunningGameInfo): SetStoredRunningGameInfoAction => {\r\n    return { type: SET_STORED_RUNNING_GAME_INFO, payload };\r\n};\r\nexport const setDataForNewGame = (payload: SetDataForNewGamePayload): SetDataForNewGameAction => {\r\n    return { type: SET_DATA_FOR_NEW_GAME, payload };\r\n};\r\nexport const setDataOfFinishedGame = (payload: SetDataOfFinishedGamePayload): SetDataOfFinishedGameAction => {\r\n    return { type: SET_DATA_OF_FINISHED_GAME, payload };\r\n};\r\nexport const resetAppState = (): Action => {\r\n    return { type: RESET_APP_STATE };\r\n};\r\n","import { GameConfig, GameRound, PlayerInput, StoredRunningGameInfo } from '../models/game.interface';\r\nimport { StoredPlayerInfo } from '../models/player.interface';\r\nimport { APP_THEME_ID } from './../constants/themes.constant';\r\nimport { convertMapToCollection, convertCollectionToMap } from './general.utils';\r\nimport { MAX_NUMBER_OF_ROUNDS } from '../constants/game.constant';\r\n\r\nconst APP_THEME_LS_KEY = 'SLF-APP-THEME';\r\nconst PLAYER_INFO_LS_KEY = 'SLF-PLAYER-INFO';\r\nconst RUNNING_GAME_INFO_LS_KEY = 'SLF-RUNNING-GAME-INFO';\r\nconst RUNNING_GAME_CONFIG_LS_KEY = 'SLF-RUNNING-GAME-CONFIG';\r\n/** Is used to store a completed round in local storage; e.g. 'SLF-RUNNING-GAME-ROUND-1' */\r\nconst RUNNING_GAME_ROUND_LS_KEY_PREFIX = 'SLF-RUNNING-GAME-ROUND-';\r\n\r\nexport const getAppThemeIdFromLocalStorage = (): string | null =>  localStorage.getItem(APP_THEME_LS_KEY);\r\nexport const setAppThemeIdInLocalStorage = (appTheme: APP_THEME_ID): void => localStorage.setItem(APP_THEME_LS_KEY, appTheme);\r\n\r\nexport const getPlayerInfoFromLocalStorage = (): StoredPlayerInfo | null => {\r\n    const storedData = localStorage.getItem(PLAYER_INFO_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n};\r\nexport const setPlayerInfoInLocalStorage = (data: StoredPlayerInfo): void => localStorage.setItem(PLAYER_INFO_LS_KEY, JSON.stringify(data));\r\n\r\nexport const getRunningGameInfoFromLocalStorage = (): StoredRunningGameInfo | null => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_INFO_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n};\r\nexport const setRunningGameInfoInLocalStorage = (data: StoredRunningGameInfo): void => localStorage.setItem(RUNNING_GAME_INFO_LS_KEY, JSON.stringify(data));\r\n\r\nexport const getRunningGameConfigFromLocalStorage = (): GameConfig | null => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_CONFIG_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n};\r\nexport const setRunningGameConfigInLocalStorage = (data: GameConfig): void => localStorage.setItem(RUNNING_GAME_CONFIG_LS_KEY, JSON.stringify(data));\r\n\r\nexport const getRunningGameRoundFromLocalStorage = (round: number): GameRound | null => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_ROUND_LS_KEY_PREFIX + round);\r\n    return storedData ? convertCollectionToMap<PlayerInput[]>(JSON.parse(storedData)) : null;\r\n};\r\nexport const setRunningGameRoundInLocalStorage = (round: number, data: GameRound): void => {\r\n    localStorage.setItem(\r\n        RUNNING_GAME_ROUND_LS_KEY_PREFIX + round,\r\n        JSON.stringify(convertMapToCollection<PlayerInput[]>(data))\r\n    );\r\n};\r\n\r\nexport const removeAllDataOfRunningGameFromLocalStorage = (): void => {\r\n    localStorage.removeItem(RUNNING_GAME_INFO_LS_KEY);\r\n    localStorage.removeItem(RUNNING_GAME_CONFIG_LS_KEY);\r\n    for (let i = 1; i <= MAX_NUMBER_OF_ROUNDS; i++) {\r\n        localStorage.removeItem(RUNNING_GAME_ROUND_LS_KEY_PREFIX + i);\r\n    }\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link_container\":\"Dashboard_link_container__3OzIj\",\"rejoin_game_link\":\"Dashboard_rejoin_game_link__3ZrTM\",\"image_wrapper\":\"Dashboard_image_wrapper__2diTg\",\"theme_picker_button\":\"Dashboard_theme_picker_button__LkZGQ\",\"theme_picker_button_icon\":\"Dashboard_theme_picker_button_icon__1dDsC\",\"slf_image\":\"Dashboard_slf_image__xWV0X\",\"img_copyright\":\"Dashboard_img_copyright__PC5ge\"};","import green from '@material-ui/core/colors/green';\r\nimport red from '@material-ui/core/colors/red';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport deepOrange from '@material-ui/core/colors/deepOrange';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport { createMuiTheme, Theme } from '@material-ui/core/styles';\r\nimport CSS from 'csstype';\r\n\r\nexport enum APP_THEME_ID {\r\n    green = 'green',\r\n    blue = 'blue',\r\n    orange = 'orange',\r\n    pink = 'pink',\r\n    black = 'black'\r\n}\r\n\r\nexport interface AppTheme {\r\n    id: APP_THEME_ID;\r\n    /** The background color used by the LetterAnimation component */\r\n    animationBackgroundColor: string;\r\n    /** The name of the CSS class that is applied to the header and the main element */\r\n    className: string;\r\n    /** The text displayed in the header's color picker dropdown */\r\n    displayName: string;\r\n    /** URL of the \"Stadt-Land-Fluss\" image visible on the homepage */\r\n    homepageImageUrl: string;\r\n    muiTheme: Theme;\r\n    style: CSS.Properties;\r\n}\r\n\r\nexport const AppThemes: AppTheme[] = [\r\n    {\r\n        id: APP_THEME_ID.green,\r\n        animationBackgroundColor: 'rgb(31, 121, 52)',\r\n        className: 'green-theme',\r\n        displayName: 'Grün/Wald',\r\n        homepageImageUrl: `${process.env.PUBLIC_URL}/assets/city-country-river-green.jpg`,\r\n        muiTheme: createMuiTheme({ palette: { primary: green, secondary: red } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(60, 143, 80, 0.3), rgba(60, 143, 80, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/leaves-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.blue,\r\n        animationBackgroundColor: 'rgb(9, 100, 204)',\r\n        className: 'blue-theme',\r\n        displayName: 'Blau/Meer',\r\n        homepageImageUrl: `${process.env.PUBLIC_URL}/assets/city-country-river-blue.jpg`,\r\n        muiTheme: createMuiTheme({ palette: { primary: blue, secondary: deepOrange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/sea-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.orange,\r\n        animationBackgroundColor: 'rgb(187, 138, 5)',\r\n        className: 'orange-theme',\r\n        displayName: 'Orange/Strand',\r\n        homepageImageUrl: `${process.env.PUBLIC_URL}/assets/city-country-river-orange.jpg`,\r\n        muiTheme: createMuiTheme({ palette: { primary: orange, secondary: indigo } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(241, 179, 8, 0.3), rgba(240, 188, 47, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/beach-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.pink,\r\n        animationBackgroundColor: 'rgb(167, 34, 207)',\r\n        className: 'pink-theme',\r\n        displayName: 'Pink/Musik',\r\n        homepageImageUrl: `${process.env.PUBLIC_URL}/assets/city-country-river-pink.jpg`,\r\n        muiTheme: createMuiTheme({ palette: { primary: purple, secondary: amber } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(133, 14, 103, 0.3), rgba(133, 14, 103, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/music-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.black,\r\n        animationBackgroundColor: 'rgb(0, 0, 0)',\r\n        className: 'black-theme',\r\n        displayName: 'Schwarz/Goth',\r\n        homepageImageUrl: `${process.env.PUBLIC_URL}/assets/city-country-river-bw.jpg`,\r\n        muiTheme: createMuiTheme({ palette: { primary: blueGrey, secondary: orange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(0, 51, 153, 0.1), rgba(0, 51, 153, 0.1)),\r\n                url('${process.env.PUBLIC_URL}/assets/halloween-pattern.jpg')`\r\n        }\r\n    },\r\n];\r\n","import { Collection } from '../models/collection.interface';\r\n\r\nexport const copyToClipboard = (text: string): void => {\r\n    const element = document.createElement('textarea');\r\n    element.value = text;\r\n    element.setAttribute('readonly', '');\r\n    element.style.position = 'absolute';\r\n    element.style.left = '-9999px';\r\n    document.body.appendChild(element);\r\n    element.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(element);\r\n};\r\n\r\nexport const createAndFillArray = <T>(length: number, value: T): T[] => {\r\n    return new Array(length).fill(value);\r\n};\r\n\r\nexport const makePluralIfCountIsNotOne = (count: number, singular: string, plural: string): string => {\r\n    return count === 1 ? singular : plural;\r\n};\r\n\r\nexport const convertDateToUnixTimestamp = (dateToConvert: Date): number => dateToConvert.getTime() / 1000 | 0;\r\n\r\nexport const convertCollectionToMap = <T>(collectionToConvert: Collection<T>): Map<string, T> => {\r\n    const dataAsMap = new Map<string, T>();\r\n    Object.keys(collectionToConvert).forEach(key => dataAsMap.set(key, collectionToConvert[key]));\r\n    return dataAsMap;\r\n};\r\n\r\nexport const convertMapToCollection = <T>(mapToConvert: Map<string, T>): Collection<T> => {\r\n    const dataAsCollection: Collection<T> = {};\r\n    mapToConvert.forEach((data, key) => dataAsCollection[key] = data);\r\n    return dataAsCollection;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section_header\":\"SectionHeader_section_header__yNLGp\"};","export const DEFAULT_NUMBER_OF_ROUNDS = 3;\r\nexport const MIN_NUMBER_OF_ROUNDS = 1;\r\nexport const MAX_NUMBER_OF_ROUNDS = 15;\r\nexport const MIN_NUMBER_OF_CATEGORIES = 3;\r\n/** Duration of countdown in seconds */\r\nexport const DEFAULT_DURATION_OF_COUNTDOWN = 60;\r\nexport const MIN_DURATION_OF_COUNTDOWN = 30;\r\n\r\nexport const STANDARD_ALPHABET = [\r\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\r\n    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\r\n];\r\nexport const STANDARD_EXCLUDED_LETTERS = ['Q', 'X', 'Y'];\r\n\r\nexport const STANDARD_CATEGORIES = ['Stadt', 'Land', 'Fluss/Gewässer'];\r\nexport const AVAILABLE_CATEGORIES = [\r\n    'Arbeitsunfall',\r\n    'Band/Musiker',\r\n    'Berg/Gebirge',\r\n    'Beruf',\r\n    'Berühmte Person',\r\n    'Buchtitel',\r\n    'Chemisches Element',\r\n    'Dinge die man jeden Tag macht',\r\n    'Etwas Eckiges',\r\n    'Etwas Rundes',\r\n    'Fiktiver Charakter',\r\n    'Film/Serie',\r\n    'Getränk',\r\n    'Grund für eine Verspätung',\r\n    'Haushaltsgerät',\r\n    'Hobby',\r\n    'In Zeiten des Corona-Lockdowns verboten',\r\n    'Könnte ein Trump-Tweet sein',\r\n    'Körperteil',\r\n    'Krankheit',\r\n    'Laster',\r\n    'Marke',\r\n    'Mordwaffe',\r\n    'Name rückwärts geschrieben',\r\n    'Ort, um eine Leiche zu verstecken',\r\n    'Pflanze',\r\n    'Pizzasorte',\r\n    'Porno-Künstlername',\r\n    'Religion',\r\n    'Scheidungsgrund',\r\n    'Schimpfwort',\r\n    'See/Meer',\r\n    'Sehenswürdigkeit',\r\n    'Sex (Stellung, Synonym)',\r\n    'Speise',\r\n    'Tier',\r\n    'Title of your Sex Tape',\r\n    'Unnötige Superkraft',\r\n    'Videospiel',\r\n    'Was bei einer Zoom-Konferenz schiefgehen kann',\r\n    'Werkzeug',\r\n    'Wort in einer Fremdsprache'\r\n];\r\n\r\nexport enum GamePhase {\r\n    waitingToStart = 'waitingToStart',\r\n    fillOutTextfields = 'fillOutTextfields',\r\n    evaluateRound = 'evaluateRound'\r\n}\r\n\r\nexport const MIN_NUMBER_OF_PLAYERS = 2;\r\n\r\nexport const LETTER_ANIMATION_LETTER_COUNT = 5;\r\nexport const LETTER_ANIMATION_REDRAW_SPEED = 800;\r\n\r\nexport const SAME_WORD_POINTS = 5;\r\nexport const STANDARD_POINTS = 10;\r\nexport const ONLY_ANSWER_POINTS = 20;\r\n/**\r\n * Extra points for answers that are deemed especially creative or funny by other players.\r\n * Are only awarded if the corresponding scoring option was selected.\r\n */\r\nexport const EXTRA_POINTS = 5;\r\n\r\nexport const GAME_OPTION_LABEL = {\r\n    checkForDuplicates: `Wenn zwei oder mehr Spieler einen identischen Begriff in einer Kategorie eintragen,\r\n        so zählt dieser nur ${SAME_WORD_POINTS} statt ${STANDARD_POINTS} Punkte.`,\r\n    creativeAnswersExtraPoints: `Von Mitspielern als besonders kreativ oder lustig ausgezeichnete Begriffe bringen ${EXTRA_POINTS} Extrapunkte.`,\r\n    onlyPlayerWithValidAnswer: `Wenn ein Spieler als einziger einen zulässigen Begriff in einer Kategorie\r\n        einträgt, so zählt dieser Begriff ${ONLY_ANSWER_POINTS} statt ${STANDARD_POINTS} Punkte.`\r\n};\r\n","import { Divider } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nimport styles from './SectionHeader.module.css';\r\n\r\ninterface SectionHeaderProps {\r\n    isH3: boolean;\r\n    showDivider: boolean;\r\n    text: string;\r\n}\r\n\r\nexport const SectionHeader: React.FunctionComponent<SectionHeaderProps> = props => {\r\n    const h2Element = <h2 className={styles.section_header}>{props.text}</h2>;\r\n    const h3Element = <h3 className={styles.section_header}>{props.text}</h3>;\r\n    return (\r\n        <React.Fragment>\r\n            {props.isH3 ? h3Element : h2Element}\r\n            {props.showDivider ? <Divider /> : null}\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst loadingSpinnerSize = 60;\r\n\r\nconst useStyles = makeStyles({\r\n    loadingScreen: {\r\n        position: 'absolute',\r\n        top: '0',\r\n        left: '0',\r\n        height: '100%',\r\n        width: '100%',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n    },\r\n    loadingSpinner: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: loadingSpinnerSize + 'px'\r\n    },\r\n    waitingForPlayers: {\r\n        position: 'absolute',\r\n        bottom: '1rem',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n        maxWidth: '36rem',\r\n        margin: '0 !important'\r\n    }\r\n});\r\n\r\ninterface LoadingScreenProps {\r\n    waitingForPlayers?: string[];\r\n}\r\n\r\nconst LoadingScreen: React.FunctionComponent<LoadingScreenProps> = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.loadingScreen}>\r\n            <div className={classes.loadingSpinner}>\r\n                <CircularProgress color=\"secondary\" size={loadingSpinnerSize} />\r\n            </div>\r\n            {props.waitingForPlayers ? (\r\n                <div className={'material-card-style ' + classes.waitingForPlayers}>\r\n                    Warte auf Spieler: <span className=\"bold-text\">{props.waitingForPlayers.join(', ')}</span>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingScreen;\r\n"],"sourceRoot":""}