{"version":3,"sources":["constants/themes.constant.ts","constants/game.constant.ts","components/Header/Header.tsx","components/SectionHeader/SectionHeader.tsx","containers/Dashboard/Dashboard.tsx","components/ToDashboardButton/ToDashboardButton.tsx","store/app.actions.ts","components/ChipsArray/ChipsArray.tsx","utils/game.utils.ts","utils/general.utils.ts","containers/GameResults/GameResults.tsx","config/pubnub.config.ts","containers/JoinGame/JoinGame.tsx","components/AddCustomCategory/AddCustomCategory.tsx","containers/NewGame/NewGame.tsx","models/pub-nub-data.model.ts","components/LoadingScreen/LoadingScreen.tsx","components/GameRoundChip/GameRoundChip.tsx","components/PhaseEvaluateRound/PhaseEvaluateRound.tsx","components/PhaseFillOutTextfields/PhaseFillOutTextfields.tsx","components/JoinGameLink/JoinGameLink.tsx","components/PlayerList/PlayerList.tsx","components/PhaseWaitingToStart/PhaseWaitingToStart.tsx","components/PubNubEventHandler/PubNubEventHandler.tsx","components/LetterAnimation/LetterAnimation.tsx","containers/PlayGame/PlayGame.tsx","utils/local-storage.utils.ts","App.tsx","serviceWorker.ts","store/app.reducer.ts","index.tsx"],"names":["APP_THEME_ID","GamePhase","AppThemes","id","green","animationBackgroundColor","className","displayName","muiTheme","createMuiTheme","palette","primary","secondary","red","style","background","process","blue","deepOrange","orange","indigo","pink","purple","amber","black","blueGrey","Header","state","anchorEl","version","handleClick","event","setState","currentTarget","handleClose","color","handleMenuItemClick","selectedTheme","props","switchTheme","playerNameParagraph","this","playerName","theme","href","target","rel","aria-label","Button","aria-controls","aria-haspopup","onClick","Menu","keepMounted","open","Boolean","onClose","map","item","index","MenuItem","key","packageJson","Component","connect","playerInfo","name","SectionHeader","Fragment","text","showDivider","Divider","Dashboard","Link","component","RouterLink","to","src","alt","ToDashboardButton","type","variant","size","startIcon","onReturnToDashboard","setDataForNewGame","payload","ALPHABET_WITHOUT_QXY","STANDARD_CATEGORIES","AVAILABLE_CATEGORIES","ChipType","getRandomnLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToRandomnlySelectFrom","i","randomnLetter","randomnItem","push","filter","letter","getPlayersInAlphabeticalOrder","players","Array","from","data","sort","a","b","charCodeAt","markEmptyPlayerInputsAsInvalid","playerInputs","input","valid","createGameRoundEvaluation","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","_","evaluationForOneCategory","evaluatingPlayer","set","getMinNumberOfMarkedAsInvalid","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","processPlayerInputEvaluations","gameRound","roundEvaluation","minNumberOfInvalids","evaluatedGameRound","cloneDeep","playerId","get","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","points","round","reduce","total","Object","keys","createAndFillArray","value","fill","GameResults","getResultIcon","isWinner","fontSize","returnToDashboard","history","onResetAppState","gameConfig","mostPoints","Math","max","result","List","ListItem","ListItemIcon","ListItemText","singular","plural","numberOfRounds","letters","join","dispatch","PUBNUB_KEYS","require","PUBNUB_CONFIG","publishKey","subscribeKey","uuid","uuidv4","ssl","JoinGame","idInput","nameInput","validateInputs","handleInputChange","handleSubmit","preventDefault","trim","onSetGameData","gameId","isAdmin","joinGameForm","onSubmit","noValidate","autoComplete","TextField","label","onChange","fullWidth","required","error","query","URLSearchParams","location","search","has","useStyles","makeStyles","createStyles","lessPadding","padding","dialog","minWidth","CustomCategoryDialog","classes","useState","categoryInput","setCategoryInput","setValidateInputs","Dialog","aria-labelledby","stopPropagation","trimmedCategoryInput","DialogContent","DialogContentText","autoFocus","margin","DialogActions","AddCustomCategory","setOpen","Tooltip","title","placement","IconButton","newCategory","addCustomCategory","CategoryArray","root","display","justifyContent","flexWrap","spacing","chip","chipIcon","backgroundColor","ChipsArray","chipsArray","Chip","chipType","undefined","icon","removeChip","children","PubNubMessageType","NewGame","availableCategories","numberOfRoundsInput","selectedCategories","handleNameInputChange","handleNumberOfRoundsInputChange","updateCategoryArrays","chipToRemove","removeFromArray","newSelectedCategories","newAvailableCategories","selected","category","numberOfRoundsInputLabel","newGameForm","inputProps","available","loadingScreen","position","top","left","height","width","centralContent","transform","marginBlockStart","fontWeight","textAlign","loadingSpinner","loadingSpinnerSize","LoadingScreen","messageElement","message","CircularProgress","centerContent","marginTop","borderRadius","boxShadow","GameRoundChip","currentLetter","currentRound","StyledBadge","withStyles","badge","right","border","paper","Badge","PhaseEvaluateRound","currentRoundEvaluation","getMinNumberOfNecessaryMarkedAsInvalid","finishedGameRound","sortedPlayers","createEvaluationButton","categoryIndex","indexInSortedPlayers","evaluationForCategory","isInputAcceptedByUser","rejectingPlayers","getRejectingPlayers","tooltipText","p","hasPlayerTypedText","evaluatedPlayerId","currentEvaluation","updateEvaluationOfPlayerInput","handleEvaluationButtonClick","badgeContent","playerEvaluationElements","isInputValid","InputProps","startAdornment","InputAdornment","playerInput","searchLink","encodeURIComponent","createSearchLink","sendEvaluationFinishedMessage","PhaseFillOutTextfields","gameRoundInputs","newGameRoundInputs","updateCurrentRoundInputs","sendRoundFinishedMessage","PubNubCurrentRoundInputsMessage","currentRoundInputs","PubNubEvaluationOfPlayerInputMessage","evaluationOfPlayerInput","JoinGameLink","React","url","window","joinGameLink","slice","OutlinedInput","disabled","endAdornment","element","document","createElement","setAttribute","body","appendChild","select","execCommand","removeChild","copyToClipboard","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","PlayerList","PhaseWaitingToStart","waitForGameStartElement","createGameSettingsElement","sendMessage","startGame","memo","pubNubClient","usePubNub","setUserState","newUserState","channels","gameChannel","getHereNowData","hereNow","includeUUIDs","includeState","response","console","log","dataForGameChannel","pubNubUserStates","occupants","occupant","userState","addPlayers","useEffect","pubNubListeners","messageEvent","roundFinished","stopRoundAndSendInputs","addPlayerInputForFinishedRound","publisher","processEvaluationOfPlayerInput","evaluationFinished","countPlayerAsEvaluationFinished","presence","presenceEvent","action","status","statusEvent","channel","messages","navigateToDashboard","setTimeout","addListener","subscribe","withPresence","removeListener","unsubscribeAll","Particle","x","y","radius","ctx","save","translate","fillStyle","fillRect","restore","ParticleAlphabet","callbackWhenAnimationDone","canvas","currentPos","particlePositions","particles","tmpCanvas","tmpCtx","time","counter","myInterval","activeTheme","animate","requestAnimationFrame","animateParticles","querySelector","getContext","mainElement","find","classList","contains","offsetWidth","offsetHeight","setInterval","changeLetter","getPixels","clearInterval","makeParticles","num","random","keyword","innerWidth","innerHeight","font","fillText","measureText","idata","getImageData","buffer32","Uint32Array","buffer","pPos","indexOf","draw","LetterAnimation","lettersToUse","letterToUnveil","lettersForAnimation","LETTER_ANIMATION_LETTER_COUNT","init","PlayGame","currentPhase","waitingToStart","loadingScreenMessage","playersThatFinishedEvaluation","showLetterAnimation","showLoadingScreen","PubNub","publish","storeInHistory","ttl","newPlayers","newPlayer","roundInputs","fillOutTextfields","newCurrentRoundInputs","toPubNubMessage","playerInputsForFinishedRound","evaluateRound","newEvaluation","evaluatingPlayerId","playerInputEvaluations","processEvaluationsAndStartNextRoundOrFinishGame","newGameRounds","onSetDataOfFinishedGame","currentPhaseElement","letterAnimationElement","loadingScreenElement","client","setDataOfFinishedGame","setAppThemeIdInLocalStorage","appTheme","localStorage","setItem","backspaceDisabler","App","switchThemeHandler","newTheme","ThemeProvider","basename","path","exact","disable","appThemeId","getItem","hostname","match","initialState","appStore","createStore","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9ad7d700.chunk.js","sourcesContent":["import green from '@material-ui/core/colors/green';\r\nimport red from '@material-ui/core/colors/red';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport deepOrange from '@material-ui/core/colors/deepOrange';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport { createMuiTheme, Theme } from '@material-ui/core/styles';\r\nimport CSS from 'csstype';\r\n\r\nexport enum APP_THEME_ID {\r\n    green = 'green',\r\n    blue = 'blue',\r\n    orange = 'orange',\r\n    pink = 'pink',\r\n    black = 'black'\r\n}\r\n\r\nexport interface AppTheme {\r\n    id: APP_THEME_ID;\r\n    /** The background color used by the LetterAnimation component */\r\n    animationBackgroundColor: string;\r\n    /** The name of the CSS class that is applied to the header and the main element */\r\n    className: string;\r\n    /** The text displayed in the header's color picker dropdown */\r\n    displayName: string;\r\n    muiTheme: Theme;\r\n    style: CSS.Properties;\r\n}\r\n\r\nexport const AppThemes: AppTheme[] = [\r\n    {\r\n        id: APP_THEME_ID.green,\r\n        animationBackgroundColor: 'rgb(31, 121, 52)',\r\n        className: 'green-theme',\r\n        displayName: 'Grün/Wald',\r\n        muiTheme: createMuiTheme({ palette: { primary: green, secondary: red } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(60, 143, 80, 0.3), rgba(60, 143, 80, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/leaves-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.blue,\r\n        animationBackgroundColor: 'rgb(9, 100, 204)',\r\n        className: 'blue-theme',\r\n        displayName: 'Blau/Meer',\r\n        muiTheme: createMuiTheme({ palette: { primary: blue, secondary: deepOrange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/sea-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.orange,\r\n        animationBackgroundColor: 'rgb(187, 138, 5)',\r\n        className: 'orange-theme',\r\n        displayName: 'Orange/Strand',\r\n        muiTheme: createMuiTheme({ palette: { primary: orange, secondary: indigo } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(241, 179, 8, 0.3), rgba(240, 188, 47, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/beach-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.pink,\r\n        animationBackgroundColor: 'rgb(167, 34, 207)',\r\n        className: 'pink-theme',\r\n        displayName: 'Pink/Musik',\r\n        muiTheme: createMuiTheme({ palette: { primary: purple, secondary: amber } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(133, 14, 103, 0.3), rgba(133, 14, 103, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/music-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.black,\r\n        animationBackgroundColor: 'rgb(0, 0, 0)',\r\n        className: 'black-theme',\r\n        displayName: 'Schwarz/Goth',\r\n        muiTheme: createMuiTheme({ palette: { primary: blueGrey, secondary: orange } }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(0, 51, 153, 0.1), rgba(0, 51, 153, 0.1)),\r\n                url('${process.env.PUBLIC_URL}/assets/halloween-pattern.jpg')`\r\n        }\r\n    },\r\n]\r\n","export const DEFAULT_NUMBER_OF_ROUNDS = 3;\r\nexport const MIN_NUMBER_OF_ROUNDS = 1;\r\nexport const MAX_NUMBER_OF_ROUNDS = 15;\r\n\r\nexport const ALPHABET_WITHOUT_QXY = [\r\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\r\n    'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'Z'\r\n];\r\n\r\nexport const STANDARD_CATEGORIES = ['Stadt', 'Land', 'Fluss/Gewässer'];\r\nexport const AVAILABLE_CATEGORIES = [\r\n    'Band/Musiker',\r\n    'Berg/Gebirge',\r\n    'Beruf',\r\n    'Berühmte Person',\r\n    'Buchtitel',\r\n    'Chemisches Element',\r\n    'Dinge die man jeden Tag macht',\r\n    'Etwas Eckiges',\r\n    'Etwas Rundes',\r\n    'Fiktiver Charakter',\r\n    'Film/Serie',\r\n    'Getränk',\r\n    'Grund für eine Verspätung',\r\n    'Hobby',\r\n    'In Zeiten von Corona verboten',\r\n    'Könnte ein Trump-Tweet sein',\r\n    'Körperteil',\r\n    'Krankheit',\r\n    'Laster',\r\n    'Marke',\r\n    'Mordwaffe',\r\n    'Pflanze',\r\n    'Pizzasorte',\r\n    'Porno-Künstlername',\r\n    'Religion',\r\n    'Scheidungsgrund',\r\n    'Schimpfwort',\r\n    'See/Meer',\r\n    'Sehenswürdigkeit',\r\n    'Sex (Stellung, Synonym)',\r\n    'Speise',\r\n    'Tier',\r\n    'Title of your Sex Tape',\r\n    'Unnötige Superkraft',\r\n    'Videospiel',\r\n    'Werkzeug',\r\n    'Wort in einer Fremdsprache'\r\n];\r\n\r\nexport enum GamePhase {\r\n    waitingToStart = 'waitingToStart',\r\n    fillOutTextfields = 'fillOutTextfields',\r\n    evaluateRound = 'evaluateRound',\r\n    gameResult = 'gameResult'\r\n}\r\n\r\nexport const MIN_NUMBER_OF_PLAYERS = 2;\r\n\r\nexport const LETTER_ANIMATION_LETTER_COUNT = 5;\r\nexport const LETTER_ANIMATION_REDRAW_SPEED = 800;\r\n","import React, { Component } from 'react';\r\nimport './Header.css';\r\nimport { Button, Menu, MenuItem } from '@material-ui/core';\r\nimport { AppThemes, AppTheme } from '../../constants/themes.constant';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport packageJson from '../../../package.json';\r\n\r\ninterface HeaderPropsFromStore {\r\n    playerName: string | null;\r\n}\r\ninterface HeaderProps extends HeaderPropsFromStore {\r\n    switchTheme: (newTheme: AppTheme) => any;\r\n    theme: AppTheme;\r\n}\r\ninterface HeaderState {\r\n    anchorEl: EventTarget | null;\r\n    version: string;\r\n}\r\n\r\nexport class Header extends Component<HeaderProps, HeaderState> {\r\n    public state = {\r\n        anchorEl: null,\r\n        version: ''\r\n    };\r\n\r\n    public render() {\r\n        const playerNameParagraph = (\r\n            <p>Spieler: {this.props.playerName ? this.props.playerName : '-'}</p>\r\n        );\r\n        return (\r\n            <header className={'app-header ' + this.props.theme.className}>\r\n                <h1>Stadt-Land-Fluss</h1>\r\n                {playerNameParagraph}\r\n                <div className=\"about-section\">\r\n                    <p>v{this.state.version}</p>\r\n                    <a\r\n                        href=\"https://github.com/alexlehner86\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        aria-label=\"Mehr über den Autor erfahren (öffnet neues Fenster)\"\r\n                    >Autor</a>\r\n                </div>\r\n                <Button\r\n                    className=\"color-picker-button\"\r\n                    aria-controls=\"color-picker-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={this.handleClick}\r\n                >\r\n                    Theme\r\n                </Button>\r\n                <Menu\r\n                    id=\"color-picker-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {AppThemes.map((item, index) => (\r\n                        <MenuItem\r\n                            key={'color-picker-menu-item-' + index}\r\n                            onClick={() => this.handleMenuItemClick(item)}\r\n                        >{item.displayName}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({ version: packageJson.version });\r\n    }\r\n\r\n    private handleClick = (event: any) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    private handleClose = (color: string) => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    private handleMenuItemClick = (selectedTheme: AppTheme) => {\r\n        this.setState({ anchorEl: null });\r\n        this.props.switchTheme(selectedTheme);\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): HeaderPropsFromStore => {\r\n    return {\r\n        playerName: state.playerInfo ? state.playerInfo.name : ''\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Header);\r\n","import './SectionHeader.css';\r\nimport { Divider } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ninterface SectionHeaderProps {\r\n    showDivider: boolean;\r\n    text: string;\r\n}\r\n\r\nexport const SectionHeader: React.FunctionComponent<SectionHeaderProps> = props => (\r\n    <React.Fragment>\r\n        <h2 className=\"section-header\">{props.text}</h2>\r\n        {props.showDivider ? <Divider /> : null}\r\n    </React.Fragment>\r\n);\r\n","import './Dashboard.css';\r\nimport Link from '@material-ui/core/Link';\r\nimport React, { Component } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\n\r\nexport class Dashboard extends Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"dashboard-container material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Dashboard\"></SectionHeader>\r\n                    <div className=\"link-container\">\r\n                        <Link component={RouterLink} to=\"/newgame\">Neues Spiel</Link>\r\n                        <Link component={RouterLink} to=\"/joingame\">Spiel beitreten</Link>\r\n                    </div>\r\n                    <img\r\n                        src={`${process.env.PUBLIC_URL}/assets/city-country-river.jpg`}\r\n                        alt=\"Stadt, Land, Fluss\"\r\n                        className=\"dashboard-slf-image\"\r\n                    />\r\n                    <div className=\"img-copyright\">\r\n                        <h3>Credits/Bilder</h3>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/830131-river-city-landscape-with-buildings-hills-and-trees\" target=\"_blank\" rel=\"noopener noreferrer\">Homepage/Stadt-Land-Fluss by pikgura – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/276920-abstract-seamless-pattern-with-tropical-leaves\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Grün/Wald by NadiaGrapes – www.vecteezy.com</a>\r\n                        <a href=\"https://www.freepik.com/free-photos-vectors/background\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Blau/Meer by macrovector – www.freepik.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/460735-seashell-sand-seamless-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Orange/Strand by Macrovector – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/454258-music-seamless\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Pink/Musik by Macrovector – www.vecteezy.com</a>\r\n                        <a href=\"https://www.vecteezy.com/vector-art/662038-cat-and-bat-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Theme Schwarz/Goth by angyee – www.vecteezy.com</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './ToDashboardButton.css';\r\nimport { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton: React.FunctionComponent<ToDashboardButtonProps> = props => {\r\n    return (\r\n        <div className=\"button-wrapper to-dashboard-button\">\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDashboardButton;\r\n","import { PlayerInfo } from './../models/player.interface';\r\nimport { Action } from \"redux\";\r\nimport { GameConfig, GameRound } from \"../models/game.interface\";\r\n\r\nexport const SET_DATA_FOR_NEW_GAME = 'SET_DATA_FOR_NEW_GAME';\r\nexport const SET_DATA_OF_FINISHED_GAME = 'SET_DATA_OF_FINISHED_GAME';\r\nexport const RESET_APP_STATE = 'RESET_APP_STATE';\r\n\r\nexport interface SetDataForNewGamePayload {\r\n    gameId: string;\r\n    gameConfig: GameConfig | null;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\nexport interface SetDataForNewGameAction extends Action {\r\n    payload: SetDataForNewGamePayload\r\n}\r\nexport interface SetDataOfFinishedGamePayload {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n}\r\nexport interface SetDataOfFinishedGameAction extends Action {\r\n    payload: SetDataOfFinishedGamePayload\r\n}\r\nexport interface ResetAppStateAction extends Action {}\r\nexport type AppAction = SetDataForNewGameAction | SetDataOfFinishedGameAction | ResetAppStateAction;\r\n\r\n/*\r\n * Action Creators\r\n */\r\nexport const setDataForNewGame = (payload: SetDataForNewGamePayload): SetDataForNewGameAction => {\r\n    return { type: SET_DATA_FOR_NEW_GAME, payload }\r\n};\r\nexport const setDataOfFinishedGame = (payload: SetDataOfFinishedGamePayload): SetDataOfFinishedGameAction => {\r\n    return { type: SET_DATA_OF_FINISHED_GAME, payload }\r\n};\r\nexport const resetAppState = (): ResetAppStateAction => {\r\n    return { type: RESET_APP_STATE }\r\n};\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport React from 'react';\r\n\r\nexport enum ChipType {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n        chipIcon: {\r\n            backgroundColor: 'inherit'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface ChipsArrayProps {\r\n    chipsArray: string[];\r\n    chipType: ChipType;\r\n    removeChip: (chip: string) => any;\r\n}\r\n\r\nconst ChipsArray: React.FunctionComponent<ChipsArrayProps> = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.chipsArray.map((chip, index) => (\r\n                <Chip\r\n                    key={`chip-to-${props.chipType}-${index}`}\r\n                    color={props.chipType === 'selected' ? 'primary' : undefined}\r\n                    icon={props.chipType === 'selected' ? <DoneIcon className=\"chip-icon-no-bg\" /> : <ChevronRightIcon />}\r\n                    label={chip}\r\n                    className={classes.chip}\r\n                    onClick={() => props.removeChip(chip)}\r\n                />\r\n            ))}\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChipsArray;\r\n","import { cloneDeep } from 'lodash';\r\nimport randomnItem from 'random-item';\r\nimport { ALPHABET_WITHOUT_QXY } from '../constants/game.constant';\r\nimport { PlayerInput } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { GameResultForPlayer, GameRound, GameRoundEvaluation, PlayerInputEvaluation } from './../models/game.interface';\r\n\r\n/**\r\n* Returns an array of unique letters. The number of letters is defined by the parameter numberOfLetters.\r\n* If the second argument is not provided, then the standard alphabet (excluding Q, X and Y) is used.\r\n*/\r\nexport const getRandomnLetters = (numberOfLetters: number, possibleLetters = ALPHABET_WITHOUT_QXY): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToRandomnlySelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToRandomnlySelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToRandomnlySelectFrom = lettersToRandomnlySelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\nexport const getPlayersInAlphabeticalOrder = (players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    let playerInfoArray = Array.from(players).map(data => data[1]);\r\n    return playerInfoArray.sort((a, b) => a.name.charCodeAt(0) - b.name.charCodeAt(0));\r\n}\r\n\r\n /**\r\n * Checks each PlayerInput object whether it contains text.\r\n * If text string is empty, valid is set to false, otherwise to true.\r\n */\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(_ => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfMarkedAsInvalid = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\n/**\r\n * Returns the players that marked the input as invalid in alphabetical order. Parameters:\r\n * - evaluations: Evaluations of all players for one player's input for one category.\r\n * - players: All players taking part in the running game of \"Stadt-Land-Fluss\".\r\n */\r\nexport const getRejectingPlayers = (evaluations: PlayerInputEvaluation, players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const rejectingPlayers = new Map<string, PlayerInfo>();\r\n    evaluations.forEach((markedAsValid, playerId) => {\r\n        if (!markedAsValid) {\r\n            const playerInfo = players.get(playerId);\r\n            if (playerInfo) {\r\n                rejectingPlayers.set(playerId, playerInfo);\r\n            }\r\n        }\r\n    });\r\n    return getPlayersInAlphabeticalOrder(rejectingPlayers);;\r\n};\r\n\r\nexport const processPlayerInputEvaluations = (\r\n    gameRound: GameRound, roundEvaluation: GameRoundEvaluation, minNumberOfInvalids: number\r\n): GameRound => {\r\n    const evaluatedGameRound = cloneDeep(gameRound);\r\n    evaluatedGameRound.forEach((playerInputs, playerId) => {\r\n        const evaluations = roundEvaluation.get(playerId) as PlayerInputEvaluation[];\r\n        for (let i = 0; i < playerInputs.length; i++) {\r\n            // Only process evaluations for inputs that were not\r\n            // already marked as invalid because of being empty strings.\r\n            if (playerInputs[i].valid) {\r\n                playerInputs[i].valid = getNumberOfInvalids(evaluations[i]) < minNumberOfInvalids;\r\n            }\r\n        }\r\n    });\r\n    return evaluatedGameRound;\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: { [key: string]: GameResultForPlayer } = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => input.valid ? total + 1 : total, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n}\r\n","export const copyToClipboard = (text: string) => {\r\n    const element = document.createElement('textarea');\r\n    element.value = text;\r\n    element.setAttribute('readonly', '');\r\n    element.style.position = 'absolute';\r\n    element.style.left = '-9999px';\r\n    document.body.appendChild(element);\r\n    element.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(element);\r\n};\r\n\r\nexport const createAndFillArray = <T>(length: number, value: T): T[] => {\r\n    return new Array(length).fill(value);\r\n};\r\n\r\nexport const makePluralIfCountIsNotOne = (count: number, singular: string, plural: string): string => {\r\n    return count === 1 ? singular : plural;\r\n};\r\n","import { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\n\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { GameConfig, GameResultForPlayer } from '../../models/game.interface';\r\nimport { AppAction, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { calculateGameResults } from '../../utils/game.utils';\r\nimport { makePluralIfCountIsNotOne } from '../../utils/general.utils';\r\n\r\ninterface GameResultsDispatchProps {\r\n    onResetAppState: () => void;\r\n}\r\ninterface GameResultsProps extends AppState, GameResultsDispatchProps, RouterProps { }\r\ninterface GameResultsState {\r\n    gameResults: GameResultForPlayer[];\r\n}\r\n\r\nclass GameResults extends Component<GameResultsProps, GameResultsState> {\r\n    public state: GameResultsState = { gameResults: [] };\r\n\r\n    public render() {\r\n        if (this.props.gameRounds === null) { return null; }\r\n        const gameConfig = this.props.gameConfig as GameConfig;\r\n        const mostPoints = Math.max(...this.state.gameResults.map(result => result.points));\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Ergebnis\"></SectionHeader>\r\n                    <List>\r\n                        {this.state.gameResults.map((result, index) => (\r\n                            <ListItem key={'results-for-player-' + index}>\r\n                                <ListItemIcon>\r\n                                    {this.getResultIcon(result.points === mostPoints)}\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary={result.playerName}\r\n                                    secondary={`${result.points} ${makePluralIfCountIsNotOne(result.points, 'Punkt', 'Punkte')}`}\r\n                                />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </div>\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiele-Settings\"></SectionHeader>\r\n                    <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                    <p>Buchstaben: {gameConfig.letters.join(', ')}</p>\r\n                    <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // If there are no allPlayers or gameRounds present in application state, then reroute user to dashboard.\r\n        if (this.props.allPlayers === null || this.props.gameRounds === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        this.setState({ gameResults: calculateGameResults(this.props.allPlayers, this.props.gameRounds) });\r\n    }\r\n\r\n    private getResultIcon = (isWinner: boolean): JSX.Element => {\r\n        return isWinner ? <StarIcon color=\"primary\" fontSize=\"large\" /> : <FaceIcon fontSize=\"large\" />;\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n        this.props.onResetAppState();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppState => state;\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): GameResultsDispatchProps => {\r\n    return {\r\n        onResetAppState: () => {\r\n            dispatch(resetAppState())\r\n        }\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults);\r\n","import PubNub from 'pubnub';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst PUBNUB_KEYS = require('./pubnub.config.json');\r\n\r\nexport const PUBNUB_CONFIG: PubNub.PubnubConfig = {\r\n    publishKey: PUBNUB_KEYS.publishKey,\r\n    subscribeKey: PUBNUB_KEYS.subscribeKey,\r\n    uuid: uuidv4(), // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d',\r\n    ssl: true\r\n};\r\n","import './JoinGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\n\r\ninterface JoinGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface JoinGameProps extends JoinGameDispatchProps, RouteComponentProps {}\r\ninterface JoinGameState {\r\n    idInput: string;\r\n    nameInput: string;\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass JoinGame extends Component<JoinGameProps, JoinGameState> {\r\n    public state: JoinGameState = {\r\n        idInput: '',\r\n        nameInput: '',\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const joinGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"idInput\"\r\n                    label=\"Spiel-ID\"\r\n                    value={this.state.idInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.idInput}\r\n                />\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                />\r\n                <div className=\"button-wrapper\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<DirectionsWalkIcon />}\r\n                    >Beitreten</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Spiel beitreten\"></SectionHeader>\r\n                    {joinGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        if (query.has('id')) {\r\n            this.setState({ idInput: query.get('id') as string });\r\n        }\r\n    }\r\n\r\n    private handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value } as any);\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (this.state.idInput && this.state.nameInput.trim()) {\r\n            this.props.onSetGameData({\r\n                gameConfig: null,\r\n                gameId: this.state.idInput,\r\n                playerInfo: {\r\n                    id: PUBNUB_CONFIG.uuid as string,\r\n                    isAdmin: false,\r\n                    name: this.state.nameInput.trim()\r\n                }\r\n            });\r\n            this.props.history.push('/play');\r\n        } else {\r\n            this.setState({ nameInput: this.state.nameInput.trim(), validateInputs: true });\r\n        }\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): JoinGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => {\r\n            dispatch(setDataForNewGame(payload))\r\n        }\r\n    }\r\n};\r\nexport default connect(null, mapDispatchToProps)(JoinGame);\r\n","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    IconButton,\r\n    TextField,\r\n    Tooltip,\r\n} from '@material-ui/core';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport React, { FormEvent, useState } from 'react';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        lessPadding: {\r\n            padding: '0.375rem 0.5rem'\r\n        },\r\n        dialog: {\r\n            minWidth: '20rem'\r\n        }\r\n    }),\r\n);\r\n\r\nexport interface CustomCategoryDialogProps {\r\n    open: boolean;\r\n    onClose: (newCategory: string | null) => void;\r\n}\r\nconst CustomCategoryDialog: React.FunctionComponent<CustomCategoryDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { onClose, open } = props;\r\n    const [categoryInput, setCategoryInput] = useState('');\r\n    const [validateInputs, setValidateInputs] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        onClose(null);\r\n    };\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const trimmedCategoryInput = categoryInput.trim();\r\n        if (trimmedCategoryInput !== '') {\r\n            setCategoryInput('');\r\n            setValidateInputs(false);\r\n            onClose(trimmedCategoryInput);\r\n        } else {\r\n            setCategoryInput('');\r\n            setValidateInputs(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n            <form onSubmit={handleSubmit} className={classes.dialog} noValidate autoComplete=\"off\">\r\n                <DialogContent>\r\n                    <DialogContentText>Kategorie hinzufügen</DialogContentText>\r\n                    <TextField\r\n                        id=\"new-category-input\"\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        required\r\n                        value={categoryInput}\r\n                        error={validateInputs && !categoryInput}\r\n                        onChange={event => setCategoryInput(event.target.value)}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={handleClose}\r\n                    >Abbrechen</Button>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                    >Hinzufügen</Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\ninterface AddCustomCategoryProps {\r\n    addCustomCategory: (newCategory: string) => any;\r\n}\r\nconst AddCustomCategory: React.FunctionComponent<AddCustomCategoryProps> = props => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = (newCategory: string | null) => {\r\n        setOpen(false);\r\n        if (newCategory) {\r\n            props.addCustomCategory(newCategory);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Tooltip\r\n                title=\"Kategorie hinzufügen\"\r\n                placement=\"right\"\r\n            >\r\n                <IconButton\r\n                    className={classes.lessPadding}\r\n                    aria-label=\"Kategorie hinzufügen\"\r\n                    onClick={() => setOpen(true)}\r\n                >\r\n                    <AddCircleOutlineIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <CustomCategoryDialog open={open} onClose={newCategory => handleClose(newCategory)} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AddCustomCategory;\r\n","import './NewGame.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport React, { ChangeEvent, Component, Dispatch, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport AddCustomCategory from '../../components/AddCustomCategory/AddCustomCategory';\r\nimport ChipsArray, { ChipType } from '../../components/ChipsArray/ChipsArray';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport {\r\n    AVAILABLE_CATEGORIES,\r\n    DEFAULT_NUMBER_OF_ROUNDS,\r\n    MAX_NUMBER_OF_ROUNDS,\r\n    MIN_NUMBER_OF_ROUNDS,\r\n    STANDARD_CATEGORIES,\r\n} from '../../constants/game.constant';\r\nimport { AppAction, setDataForNewGame, SetDataForNewGamePayload } from '../../store/app.actions';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\n\r\nenum CategoryArray {\r\n    available = 'available',\r\n    selected = 'selected'\r\n}\r\n\r\ninterface NewGameDispatchProps {\r\n    onSetGameData: (payload: SetDataForNewGamePayload) => void\r\n}\r\ninterface NewGameProps extends NewGameDispatchProps, RouteComponentProps { }\r\ninterface NewGameState {\r\n    availableCategories: string[];\r\n    nameInput: string;\r\n    numberOfRoundsInput: number;\r\n    selectedCategories: string[];\r\n    validateInputs: boolean;\r\n}\r\n\r\nclass NewGame extends Component<NewGameProps, NewGameState> {\r\n    public state: NewGameState = {\r\n        availableCategories: AVAILABLE_CATEGORIES,\r\n        nameInput: '',\r\n        numberOfRoundsInput: DEFAULT_NUMBER_OF_ROUNDS,\r\n        selectedCategories: STANDARD_CATEGORIES,\r\n        validateInputs: false\r\n    };\r\n\r\n    public render() {\r\n        const numberOfRoundsInputLabel = `Anzahl Runden (${MIN_NUMBER_OF_ROUNDS}-${MAX_NUMBER_OF_ROUNDS})`;\r\n        const newGameForm = (\r\n            <form onSubmit={this.handleSubmit} className=\"app-form\" noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    name=\"nameInput\"\r\n                    label=\"Spielername (max. 20 Zeichen)\"\r\n                    value={this.state.nameInput}\r\n                    onChange={this.handleNameInputChange}\r\n                    className=\"app-form-input\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    error={this.state.validateInputs && !this.state.nameInput}\r\n                    inputProps={{ 'maxLength': '20' }}\r\n                />\r\n                <TextField\r\n                    name=\"numberOfRoundsInput\"\r\n                    label={numberOfRoundsInputLabel}\r\n                    type=\"number\"\r\n                    value={this.state.numberOfRoundsInput}\r\n                    onChange={this.handleNumberOfRoundsInputChange}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    inputProps={{ 'min': MIN_NUMBER_OF_ROUNDS, 'max': MAX_NUMBER_OF_ROUNDS }}\r\n                />\r\n                <p className=\"category-array-label\">Ausgewählte Kategorien (mind. 3):</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.selectedCategories}\r\n                    chipType={ChipType.selected}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.selected)}\r\n                />\r\n                <p className=\"category-array-label\">Verfügbare Kategorien:</p>\r\n                <ChipsArray\r\n                    chipsArray={this.state.availableCategories}\r\n                    chipType={ChipType.available}\r\n                    removeChip={(chipToRemove) => this.updateCategoryArrays(chipToRemove, CategoryArray.available)}\r\n                >\r\n                    <AddCustomCategory addCustomCategory={this.addCustomCategory} />\r\n                </ChipsArray>\r\n                <div className=\"button-wrapper add-margin-top\">\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<AddCircleIcon />}\r\n                    >Spiel erstellen</Button>\r\n                </div>\r\n            </form>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader showDivider={true} text=\"Neues Spiel\" />\r\n                    {newGameForm}\r\n                </div>\r\n                <ToDashboardButton onReturnToDashboard={this.returnToDashboard} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleNameInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ nameInput: event.target.value });\r\n    }\r\n\r\n    private handleNumberOfRoundsInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +event.target.value;\r\n        if (value >= MIN_NUMBER_OF_ROUNDS && value <= MAX_NUMBER_OF_ROUNDS) {\r\n            this.setState({ numberOfRoundsInput: value });\r\n        }\r\n    }\r\n\r\n    private updateCategoryArrays = (chipToRemove: string, removeFromArray: CategoryArray) => {\r\n        let newSelectedCategories: string[];\r\n        let newAvailableCategories: string[];\r\n        if (removeFromArray === CategoryArray.selected) {\r\n            newSelectedCategories = this.state.selectedCategories.filter(category => category !== chipToRemove);\r\n            newAvailableCategories = [...this.state.availableCategories];\r\n            newAvailableCategories.push(chipToRemove);\r\n        } else {\r\n            newAvailableCategories = this.state.availableCategories.filter(category => category !== chipToRemove);\r\n            newSelectedCategories = [...this.state.selectedCategories];\r\n            newSelectedCategories.push(chipToRemove);\r\n        }\r\n        this.setState({\r\n            availableCategories: newAvailableCategories,\r\n            selectedCategories: newSelectedCategories\r\n        });\r\n    }\r\n\r\n    private addCustomCategory = (newCategory: string) => {\r\n        this.setState({ availableCategories: [...this.state.availableCategories, newCategory] });\r\n    }\r\n\r\n    private handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (this.state.nameInput.trim() && this.state.selectedCategories.length >= 3) {\r\n            const gameId = uuidv4(); // ⇨ e.g. '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n            const letters = getRandomnLetters(this.state.numberOfRoundsInput);\r\n            this.props.onSetGameData({\r\n                gameConfig: {\r\n                    categories: this.state.selectedCategories,\r\n                    letters,\r\n                    numberOfRounds: this.state.numberOfRoundsInput\r\n                },\r\n                gameId,\r\n                playerInfo: {\r\n                    id: PUBNUB_CONFIG.uuid as string,\r\n                    isAdmin: true,\r\n                    name: this.state.nameInput.trim()\r\n                }\r\n            });\r\n            this.props.history.push('/play');\r\n        } else {\r\n            this.setState({ nameInput: this.state.nameInput.trim(), validateInputs: true });\r\n        }\r\n    }\r\n\r\n    private returnToDashboard = () => {\r\n        this.props.history.push('/');\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): NewGameDispatchProps => {\r\n    return {\r\n        onSetGameData: (payload: SetDataForNewGamePayload) => {\r\n            dispatch(setDataForNewGame(payload))\r\n        }\r\n    }\r\n};\r\nexport default connect(null, mapDispatchToProps)(NewGame);\r\n","import { GameConfig, PlayerInput, EvaluationOfPlayerInput } from './game.interface';\r\nimport { PlayerInfo } from './player.interface';\r\n\r\nexport interface PubNubUserState {\r\n    gameConfig?: GameConfig;\r\n    playerInfo: PlayerInfo;\r\n}\r\n\r\nexport enum PubNubMessageType {\r\n    startGame = 'startGame',\r\n    roundFinished = 'roundFinished',\r\n    currentRoundInputs = 'currentRoundInputs',\r\n    evaluationOfPlayerInput = 'evaluationOfPlayerInput',\r\n    evaluationFinished = 'evaluationFinished'\r\n}\r\n\r\nexport interface PubNubMessage {\r\n    type: PubNubMessageType;\r\n    payload?: any;\r\n}\r\n\r\nexport class PubNubCurrentRoundInputsMessage {\r\n    constructor(private payload: PlayerInput[]) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.currentRoundInputs,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport class PubNubEvaluationOfPlayerInputMessage {\r\n    constructor(private payload: EvaluationOfPlayerInput) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.evaluationOfPlayerInput,\r\n            payload: this.payload\r\n        }\r\n    }\r\n}\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst loadingSpinnerSize = 60;\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        loadingScreen: {\r\n            position: 'absolute',\r\n            top: '0',\r\n            left: '0',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n        },\r\n        centralContent: {\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)'\r\n        },\r\n        text: {\r\n            marginBlockStart: '0',\r\n            color: 'white',\r\n            fontSize: '1.5rem',\r\n            fontWeight: 'bold',\r\n            textAlign: 'center'\r\n        },\r\n        loadingSpinner: {\r\n            margin: '0 auto',\r\n            width: loadingSpinnerSize + 'px'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface LoadingScreenProps {\r\n    message: string | null;\r\n}\r\n\r\nconst LoadingScreen: React.FunctionComponent<LoadingScreenProps> = props => {\r\n    const classes = useStyles();\r\n    const messageElement = props.message ? (<p className={classes.text}>{props.message}</p>) : null;\r\n    return (\r\n        <div className={classes.loadingScreen}>\r\n            <div className={classes.centralContent}>\r\n                {messageElement}\r\n                <div className={classes.loadingSpinner}>\r\n                    <CircularProgress color=\"secondary\" size={loadingSpinnerSize} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(_ =>\r\n    createStyles({\r\n        centerContent: {\r\n            display: 'flex',\r\n            justifyContent: 'center'\r\n        },\r\n        chip: {\r\n            height: '3rem',\r\n            marginTop: '1rem',\r\n            borderRadius: '5px',\r\n            fontSize: '1.2rem',\r\n            boxShadow: '0 2px 4px rgba(0,0,0,.501961)'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface GameRoundChipProps {\r\n    currentLetter: string;\r\n    currentRound: number;\r\n    numberOfRounds: number;\r\n}\r\n\r\nconst GameRoundChip: React.FunctionComponent<GameRoundChipProps> = props => {\r\n    const classes = useStyles();\r\n    const { currentLetter, currentRound, numberOfRounds } = props;\r\n    return (\r\n        <div className={classes.centerContent}>\r\n            <Chip\r\n                color=\"primary\"\r\n                icon={<EmojiObjectsIcon />}\r\n                label={`Runde ${currentRound} von ${numberOfRounds}: „${currentLetter}“`}\r\n                className={classes.chip}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameRoundChip;\r\n","import './PhaseEvaluateRound.css';\r\nimport { Badge, createStyles, IconButton, InputAdornment, TextField, Theme, Tooltip, withStyles } from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ThumbDownRoundedIcon from '@material-ui/icons/ThumbDownRounded';\r\nimport React from 'react';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    getMinNumberOfMarkedAsInvalid as getMinNumberOfNecessaryMarkedAsInvalid,\r\n    getNumberOfInvalids,\r\n    getPlayersInAlphabeticalOrder,\r\n    getRejectingPlayers,\r\n} from '../../utils/game.utils';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\nconst StyledBadge = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        badge: {\r\n            right: -3,\r\n            top: '100%',\r\n            border: `2px solid ${theme.palette.background.paper}`,\r\n            padding: '0 4px',\r\n        },\r\n    }),\r\n)(Badge);\r\n\r\ninterface PhaseEvaluateRoundProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n    updateEvaluationOfPlayerInput: (newEvaluation: EvaluationOfPlayerInput) => void;\r\n    sendEvaluationFinishedMessage: () => void;\r\n}\r\nconst PhaseEvaluateRound: React.FunctionComponent<PhaseEvaluateRoundProps> = props => {\r\n    const { allPlayers, currentRound, currentRoundEvaluation, gameConfig, playerInfo } = props;\r\n    const minNumberOfInvalids = getMinNumberOfNecessaryMarkedAsInvalid(allPlayers.size);\r\n    // Retrieve data for finished round; e.g. if current round is 1, then data is at index 0.\r\n    const finishedGameRound = props.gameRounds[currentRound - 1];\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(allPlayers);\r\n\r\n   /**\r\n     * Toggles the user's evaluation of a player's input for a category.\r\n     */\r\n    const handleEvaluationButtonClick = (\r\n        categoryIndex: number, evaluatedPlayerId: string, currentEvaluation: boolean\r\n    ) => {\r\n        props.updateEvaluationOfPlayerInput({ categoryIndex, evaluatedPlayerId, markedAsValid: !currentEvaluation });\r\n    }\r\n    /**\r\n     * Displays a button that allows the user to reject a player's input for a category.\r\n     * A badge attached to the button shows the total number of rejections. If the player\r\n     * didn't type any text, then a not clickable thumb down icon is shown instead,\r\n     * which indicates that the input was automatically rejected by the application.\r\n     */\r\n    const createEvaluationButton = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const allEvaluationsForPlayer = currentRoundEvaluation.get(evaluatedPlayer.id) as PlayerInputEvaluation[];\r\n        const evaluationForCategory = allEvaluationsForPlayer[categoryIndex];\r\n        const isInputAcceptedByUser = evaluationForCategory.get(playerInfo.id) as boolean;\r\n        const rejectingPlayers = getRejectingPlayers(evaluationForCategory, allPlayers);\r\n        const tooltipText = rejectingPlayers.length === 0 ? 'Keine Ablehnungen' :\r\n            'Abgelehnt von ' + rejectingPlayers.map(p => p.name).join(', ');\r\n        const hasPlayerTypedText = !!(finishedGameRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n        return (\r\n            <div\r\n                key={`slf-evaluation-button-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-evaluation-button-wrapper\"\r\n            >\r\n                {hasPlayerTypedText ? (\r\n                    <Tooltip\r\n                        key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}`}\r\n                        title={tooltipText}\r\n                    >\r\n                        <IconButton\r\n                            className=\"slf-evaluation-button\"\r\n                            color={isInputAcceptedByUser ? 'default' : 'secondary'}\r\n                            onClick={() => handleEvaluationButtonClick(categoryIndex, evaluatedPlayer.id, isInputAcceptedByUser)}\r\n                        >\r\n                            <StyledBadge badgeContent={rejectingPlayers.length} color=\"secondary\">\r\n                                <ThumbDownRoundedIcon />\r\n                            </StyledBadge>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                ) : (\r\n                        <Tooltip\r\n                            key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}`}\r\n                            title=\"Automatisch abgelehnt\"\r\n                        >\r\n                            <ThumbDownRoundedIcon color=\"secondary\" className=\"slf-auto-reject-icon\" />\r\n                        </Tooltip>\r\n                    )}\r\n            </div>\r\n        );\r\n    }\r\n    /**\r\n     * Creates a search link for a specific category and player input.\r\n     */\r\n    const createSearchLink = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const category = gameConfig.categories[categoryIndex];\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const playerInput = (finishedGameRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n        const searchLink = `https://www.ecosia.org/search?q=${encodeURIComponent(category)}+${encodeURIComponent(playerInput)}`\r\n        return (\r\n            <div\r\n                key={`slf-search-link-container-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-search-link-container\"\r\n            >\r\n                <a\r\n                    key={`slf-evaluation-search-link-${categoryIndex}-${indexInSortedPlayers}`}\r\n                    className=\"slf-evaluation-search-link\"\r\n                    href={searchLink}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    aria-label=\"Begriff nachschlagen\"\r\n                >\r\n                    <Tooltip\r\n                        title=\"Begriff nachschlagen\"\r\n                        placement=\"right\"\r\n                    >\r\n                        <SearchIcon color=\"primary\" />\r\n                    </Tooltip>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n    /**\r\n     * Creates a text input showing the player's input for a category. If the player input isn't an empty string,\r\n     * then on the right side of the textfield a search link and clickable evaluation button are displayed.\r\n     */\r\n    const playerEvaluationElements = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const hasPlayerTypedText = !!(finishedGameRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n        const isInputValid = getNumberOfInvalids((currentRoundEvaluation.get(evaluatedPlayer.id) as PlayerInputEvaluation[])[categoryIndex]) < minNumberOfInvalids;\r\n        return (\r\n            <div\r\n                key={`slf-evaluation-textfield-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                className=\"slf-evaluation-textfield-wrapper\"\r\n            >\r\n                <TextField\r\n                    key={'slf-textfield-category-no-' + categoryIndex + '-player-' + indexInSortedPlayers}\r\n                    value={(finishedGameRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">{evaluatedPlayer.name}:</InputAdornment>,\r\n                        className: !hasPlayerTypedText || !isInputValid ? 'invalid-player-input' : ''\r\n                    }}\r\n                />\r\n                {hasPlayerTypedText ? createSearchLink(categoryIndex, indexInSortedPlayers) : null}\r\n                {createEvaluationButton(categoryIndex, indexInSortedPlayers)}\r\n            </div>\r\n        );\r\n    }\r\n    /**\r\n     * Creates a section for each category of the current game. It displays the category in the header,\r\n     * followed by one textfield for each player showing their input for the finished round.\r\n     * If the input isn't empty, a search link and clickable evaluation button are displayed.\r\n     */\r\n    const createCategorySection = (category: string, categoryIndex: number): JSX.Element => (\r\n        <div\r\n            key={'slf-evaluation-for-category-no-' + categoryIndex}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            {sortedPlayers.map((_, indexInSortedPlayers) => playerEvaluationElements(categoryIndex, indexInSortedPlayers))}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip\r\n                currentLetter={currentLetter}\r\n                currentRound={currentRound}\r\n                numberOfRounds={gameConfig.numberOfRounds}\r\n            />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createCategorySection)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"secondary\"\r\n                    title=\"Akzeptieren\"\r\n                    aria-label=\"Akzeptieren\"\r\n                    onClick={() => props.sendEvaluationFinishedMessage()}\r\n                >\r\n                    <CheckCircleIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseEvaluateRound;\r\n","import { IconButton, InputAdornment, TextField } from '@material-ui/core';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { GameConfig, PlayerInput } from '../../models/game.interface';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseFillOutTextfieldsProps {\r\n    currentRound: number;\r\n    gameConfig: GameConfig;\r\n    gameRoundInputs: PlayerInput[];\r\n    updateCurrentRoundInputs: (newCurrentRoundInputs: PlayerInput[]) => void;\r\n    sendRoundFinishedMessage: () => void;\r\n}\r\n\r\nconst PhaseFillOutTextfields: React.FunctionComponent<PhaseFillOutTextfieldsProps> = props => {\r\n    const { currentRound, gameConfig, gameRoundInputs } = props;\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number) => {\r\n        const newGameRoundInputs = [...gameRoundInputs];\r\n        newGameRoundInputs[index] = { ...newGameRoundInputs[index], text: event.target.value };\r\n        props.updateCurrentRoundInputs(newGameRoundInputs);\r\n    };\r\n    const createTextfieldElement = (category: string, index: number): JSX.Element => (\r\n        <div\r\n            key={'slf-input-for-category-no-' + index}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader showDivider={false} text={category}></SectionHeader>\r\n            <TextField\r\n                value={gameRoundInputs[index].text}\r\n                onChange={event => handleInputChange(event, index)}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">{currentLetter}:</InputAdornment>\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip\r\n                currentLetter={currentLetter}\r\n                currentRound={currentRound}\r\n                numberOfRounds={gameConfig.numberOfRounds}\r\n            />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createTextfieldElement)}\r\n                <IconButton\r\n                    type=\"button\"\r\n                    className=\"fixed-bottom-right-button\"\r\n                    color=\"secondary\"\r\n                    title=\"Abschicken\"\r\n                    aria-label=\"Abschicken\"\r\n                    onClick={() => props.sendRoundFinishedMessage()}\r\n                >\r\n                    <EmailIcon />\r\n                </IconButton>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseFillOutTextfields;\r\n","import './JoinGameLink.css';\r\nimport { IconButton, InputAdornment, OutlinedInput, Snackbar } from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport React from 'react';\r\nimport { copyToClipboard } from '../../utils/general.utils';\r\n\r\ninterface JoinGameLinkProps {\r\n    gameId: string;\r\n}\r\n\r\nexport const JoinGameLink: React.FunctionComponent<JoinGameLinkProps> = props => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClick = () => {\r\n        copyToClipboard(joinGameLink)\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const url = window.location.href;\r\n    // Cut off \"/play\" from the end of the url and add route plus game id.\r\n    const joinGameLink = url.slice(0, url.length - 5) + '/joingame?id=' + props.gameId;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p className=\"join-game-link-label\">Teile diesen Link mit Freunden:</p>\r\n            <OutlinedInput\r\n                name=\"idInput\"\r\n                value={joinGameLink}\r\n                className=\"app-form-input\"\r\n                disabled\r\n                fullWidth\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            title=\"Link kopieren\"\r\n                            aria-label=\"Link kopieren\"\r\n                            onClick={handleClick}\r\n                        >\r\n                            <FileCopyIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n            />\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={open}\r\n                autoHideDuration={1500}\r\n                onClose={handleClose}\r\n                message=\"Der Link wurde in Zwischenablage kopiert.\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport React from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface PlayerListProps {\r\n    players: Map<string, PlayerInfo>;\r\n}\r\nconst PlayerList: React.FunctionComponent<PlayerListProps> = props => {\r\n    const classes = useStyles();\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(props.players);\r\n    return (\r\n        <div className={classes.root}>\r\n            {sortedPlayers.map((playerInfo, index) => (\r\n                <Chip\r\n                    key={`player-name-${index}`}\r\n                    icon={<FaceIcon />}\r\n                    color=\"primary\"\r\n                    label={playerInfo.name}\r\n                    className={classes.chip}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerList;\r\n","import './PhaseWaitingToStart.css';\r\nimport { Button, Divider } from '@material-ui/core';\r\nimport PlayCircleFilled from '@material-ui/icons/PlayCircleFilled';\r\nimport React from 'react';\r\nimport { MIN_NUMBER_OF_PLAYERS } from '../../constants/game.constant';\r\nimport { GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport { JoinGameLink } from '../JoinGameLink/JoinGameLink';\r\nimport PlayerList from '../PlayerList/PlayerList';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseWaitingToStartProps {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string;\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    playerInfo: PlayerInfo;\r\n    sendMessage: (message: PubNubMessage) => void;\r\n}\r\n\r\nconst PhaseWaitingToStart: React.FunctionComponent<PhaseWaitingToStartProps> = props => {\r\n    const { gameId, allPlayers, playerInfo } = props;\r\n    const waitForGameStartElement = (\r\n        <p className=\"wait-for-start-animation\">Warte auf Spielbeginn <span>.</span><span>.</span><span>.</span></p>\r\n    );\r\n\r\n    const createGameSettingsElement = (): JSX.Element => {\r\n        const gameConfig = props.gameConfig as GameConfig;\r\n        return (\r\n            <React.Fragment>\r\n                <Divider />\r\n                <h3>Spiele-Settings:</h3>\r\n                <p>Runden: {gameConfig.numberOfRounds}</p>\r\n                <p>Kategorien: {gameConfig.categories.join(', ')}</p>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const createStartGameButton = (): JSX.Element => {\r\n        return (\r\n            <div className=\"button-wrapper add-margin-top\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    startIcon={<PlayCircleFilled />}\r\n                    disabled={allPlayers.size < MIN_NUMBER_OF_PLAYERS}\r\n                    onClick={() => props.sendMessage({ type: PubNubMessageType.startGame })}\r\n                >Starten</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const createInvitePlayersElement = (): JSX.Element => {\r\n        return (\r\n            <div className=\"material-card-style\">\r\n                <JoinGameLink gameId={gameId as string} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"material-card-style\">\r\n                <SectionHeader showDivider={true} text=\"Gleich geht's los...\"></SectionHeader>\r\n                <div className=\"players-wrapper\">\r\n                    <h3>Mitspieler:</h3>\r\n                    <PlayerList players={props.allPlayers} />\r\n                </div>\r\n                {props.gameConfig ? createGameSettingsElement() : null}\r\n                <Divider />\r\n                {playerInfo.isAdmin ? createStartGameButton() : waitForGameStartElement}\r\n            </div>\r\n            {playerInfo.isAdmin ? createInvitePlayersElement() : null}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PhaseWaitingToStart;\r\n","import { usePubNub } from 'pubnub-react';\r\nimport React, { useEffect } from 'react';\r\nimport { GameConfig, PlayerInput, EvaluationOfPlayerInput } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubUserState, PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport Pubnub from 'pubnub';\r\n\r\ninterface PubNubEventHandlerProps {\r\n    gameChannel: string;\r\n    gameConfig: GameConfig | null;\r\n    playerInfo: PlayerInfo;\r\n    navigateToDashboard: () => void;\r\n    addPlayers: (...newPlayers: PubNubUserState[]) => void;\r\n    startGame: () => void;\r\n    stopRoundAndSendInputs: () => void;\r\n    addPlayerInputForFinishedRound: (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => void;\r\n    processEvaluationOfPlayerInput: (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => void;\r\n    countPlayerAsEvaluationFinished: (evaluatingPlayerId: string) => void;\r\n}\r\n\r\nconst PubNubEventHandler: React.FunctionComponent<PubNubEventHandlerProps> = props => {\r\n    const pubNubClient = usePubNub();\r\n\r\n    const setUserStateAndGetHereNowIfGameIsOpen = () => {\r\n        pubNubClient.history(\r\n            { channel: props.gameChannel, count: 10 },\r\n            (_, response) => {\r\n                // If history includes messages, then game has already started and user can't join.\r\n                // User gets rerouted to dashboard page by PlayGame component.\r\n                if (response.messages.length > 0) {\r\n                    props.navigateToDashboard();\r\n                } else {\r\n                    setUserState();\r\n                    if (!props.playerInfo.isAdmin) {\r\n                        getHereNowData();\r\n                        // Safeguard against the possibility of two players joining exactly at the same time:\r\n                        // We call hereNowData again after 2 seconds, to make sure we get all player info.\r\n                        setTimeout(getHereNowData, 2000);\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    };\r\n    const setUserState = () => {\r\n        let newUserState: PubNubUserState;\r\n        if (props.playerInfo.isAdmin) {\r\n            newUserState = { gameConfig: props.gameConfig as GameConfig, playerInfo: props.playerInfo };\r\n        } else {\r\n            newUserState = { playerInfo: props.playerInfo };\r\n        }\r\n        // Set this user's state in game channel.\r\n        pubNubClient.setState({\r\n            channels: [props.gameChannel],\r\n            state: newUserState\r\n        });\r\n    };\r\n    const getHereNowData = () => {\r\n        pubNubClient.hereNow(\r\n            { channels: [props.gameChannel], includeUUIDs: true, includeState: true },\r\n            (_, response) => {\r\n                console.log('PubNub hereNow', response);\r\n                // Response includes states of players that joined before.\r\n                const dataForGameChannel = response.channels[props.gameChannel];\r\n                if (dataForGameChannel) {\r\n                    const pubNubUserStates: PubNubUserState[] = [];\r\n                    dataForGameChannel.occupants.forEach(occupant => {\r\n                        const userState = occupant.state as PubNubUserState;\r\n                        // Safeguard in case that a user's state should be missing or corrupted.\r\n                        if (!!userState && !!userState.playerInfo) {\r\n                            pubNubUserStates.push(userState);\r\n                        }\r\n                    });\r\n                    props.addPlayers(...pubNubUserStates);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const pubNubListeners: Pubnub.ListenerParameters = {\r\n            message: messageEvent => {\r\n                console.log('PubNub message event', messageEvent);\r\n                const message = messageEvent.message as PubNubMessage;\r\n                switch (message.type) {\r\n                    case PubNubMessageType.startGame:\r\n                        props.startGame();\r\n                        break;\r\n                    case PubNubMessageType.roundFinished:\r\n                        props.stopRoundAndSendInputs();\r\n                        break;\r\n                    case PubNubMessageType.currentRoundInputs:\r\n                        props.addPlayerInputForFinishedRound(messageEvent.publisher, message.payload);\r\n                        break;\r\n                    case PubNubMessageType.evaluationOfPlayerInput:\r\n                        props.processEvaluationOfPlayerInput(messageEvent.publisher, message.payload);\r\n                        break;\r\n                    case PubNubMessageType.evaluationFinished:\r\n                        props.countPlayerAsEvaluationFinished(messageEvent.publisher);\r\n                        break;\r\n                    default:\r\n                }\r\n            },\r\n            presence: presenceEvent => {\r\n                console.log('PubNub presence event', presenceEvent);\r\n                // Check for 'state-change' events and process state from new player.\r\n                if (presenceEvent.action === 'state-change') {\r\n                    const userState = presenceEvent.state as PubNubUserState;\r\n                    if (userState.playerInfo.id !== props.playerInfo.id) {\r\n                        props.addPlayers(userState);\r\n                    }\r\n                }\r\n            },\r\n            status: statusEvent => {\r\n                console.log('PubNub status event', statusEvent);\r\n                if (statusEvent.category === 'PNConnectedCategory') {\r\n                    console.log('Player is connected to PubNub game channel');\r\n                    setUserStateAndGetHereNowIfGameIsOpen();\r\n                }\r\n            }\r\n        };\r\n        pubNubClient.addListener(pubNubListeners);\r\n        pubNubClient.subscribe({\r\n            channels: [props.gameChannel],\r\n            withPresence: true\r\n        });\r\n        // When this component is destroyed, we unsubscribe from game channel.\r\n        return () => {\r\n            pubNubClient.removeListener(pubNubListeners);\r\n            pubNubClient.unsubscribeAll();\r\n        }\r\n    });\r\n    return null;\r\n};\r\n\r\nexport default React.memo(PubNubEventHandler);\r\n","import './LetterAnimation.css';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n    ALPHABET_WITHOUT_QXY,\r\n    LETTER_ANIMATION_LETTER_COUNT,\r\n    LETTER_ANIMATION_REDRAW_SPEED,\r\n} from '../../constants/game.constant';\r\nimport { AppTheme, AppThemes } from '../../constants/themes.constant';\r\nimport { getRandomnLetters } from '../../utils/game.utils';\r\n\r\n// Thanks to Georgi Nikoloff for the great animation source code: https://codepen.io/gbnikolov/pen/jEqQdG\r\n// I rewrote the code in Typescript, refactored it a bit and adapted it to the needs of this application.\r\n\r\nclass Particle {\r\n    private radius = 3.5;\r\n\r\n    constructor(\r\n        public x: number,\r\n        public y: number\r\n    ) { }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.translate(this.x, this.y);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, this.radius, this.radius);\r\n        ctx.restore();\r\n    };\r\n}\r\n\r\nclass ParticleAlphabet {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private currentPos: number;\r\n    private width: number;\r\n    private height: number;\r\n    private particlePositions: any[];\r\n    private particles: Particle[];\r\n    private tmpCanvas: HTMLCanvasElement;\r\n    private tmpCtx: CanvasRenderingContext2D;\r\n    private time: string;\r\n    private counter = 0;\r\n    private myInterval: any;\r\n    private activeTheme: AppTheme;\r\n\r\n    constructor(\r\n        public letters: string[],\r\n        public callbackWhenAnimationDone: () => void\r\n    ) {\r\n        this.canvas = document.querySelector('#letter-animation-canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        const mainElement = document.querySelector('main') as HTMLElement;\r\n        this.activeTheme = AppThemes.find(theme => mainElement.classList.contains(theme.className)) as AppTheme;\r\n        this.width = mainElement.offsetWidth;\r\n        this.height = mainElement.offsetHeight;\r\n        this.particlePositions = [];\r\n        this.particles = [];\r\n        this.tmpCanvas = document.createElement('canvas');\r\n        this.tmpCtx = this.tmpCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.particlePositions = [];\r\n        this.currentPos = 0;\r\n        this.time = '';\r\n    }\r\n\r\n    public init() {\r\n        this.myInterval = setInterval(() => {\r\n            if (this.counter < this.letters.length) {\r\n                this.changeLetter();\r\n                this.getPixels(this.tmpCanvas, this.tmpCtx);\r\n            }\r\n            this.counter++;\r\n            if (this.counter > this.letters.length + 1) {\r\n                clearInterval(this.myInterval);\r\n                this.callbackWhenAnimationDone();\r\n            }\r\n        }, LETTER_ANIMATION_REDRAW_SPEED);\r\n\r\n        this.makeParticles(1000);\r\n        this.animate();\r\n    }\r\n\r\n    private changeLetter() {\r\n        this.time = this.letters[this.currentPos];\r\n        this.currentPos++;\r\n        if (this.currentPos >= this.letters.length) {\r\n            this.currentPos = 0;\r\n        }\r\n    }\r\n\r\n    private makeParticles(num: number) {\r\n        for (var i = 0; i <= num; i++) {\r\n            const x = this.width / 2 + Math.random() * 400 - 200;\r\n            const y = this.height / 2 + Math.random() * 400 - 200;\r\n            this.particles.push(new Particle(x, y));\r\n        }\r\n    }\r\n\r\n    private getPixels(canvas: any, ctx: any) {\r\n        const keyword = this.time,\r\n            gridX = 6,\r\n            gridY = 6;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        ctx.fillStyle = 'red';\r\n        ctx.font = 'italic bold 330px Noto Serif';\r\n        ctx.fillText(keyword, canvas.width / 2 - ctx.measureText(keyword).width / 2, canvas.height / 2 + 100);\r\n        const idata = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const buffer32 = new Uint32Array(idata.data.buffer);\r\n        if (this.particlePositions.length > 0) this.particlePositions = [];\r\n        for (let y = 0; y < canvas.height; y += gridY) {\r\n            for (let x = 0; x < canvas.width; x += gridX) {\r\n                if (buffer32[y * canvas.width + x]) {\r\n                    this.particlePositions.push({ x: x, y: y });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private animateParticles() {\r\n        let p, pPos;\r\n        for (let i = 0, num = this.particles.length; i < num; i++) {\r\n            p = this.particles[i];\r\n            pPos = this.particlePositions[i];\r\n            if (this.particles.indexOf(p) === this.particlePositions.indexOf(pPos)) {\r\n                p.x += (pPos.x - p.x) * .3;\r\n                p.y += (pPos.y - p.y) * .3;\r\n                p.draw(this.ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private animate = () => {\r\n        requestAnimationFrame(this.animate);\r\n        this.ctx.fillStyle = this.activeTheme.animationBackgroundColor;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        this.animateParticles();\r\n    }\r\n}\r\n\r\ninterface LetterAnimationProps {\r\n    letterToUnveil: string;\r\n    callbackWhenAnimationDone: () => void;\r\n}\r\nexport const LetterAnimation: React.FunctionComponent<LetterAnimationProps> = props => {\r\n    const lettersToUse = [...ALPHABET_WITHOUT_QXY].filter(letter => letter !== props.letterToUnveil);\r\n    const lettersForAnimation = [...getRandomnLetters(LETTER_ANIMATION_LETTER_COUNT - 1, lettersToUse), props.letterToUnveil];\r\n    useEffect(() => {\r\n        const particleAlphabet = new ParticleAlphabet(lettersForAnimation, props.callbackWhenAnimationDone);\r\n        particleAlphabet.init();\r\n    });\r\n    return (\r\n        <canvas id=\"letter-animation-canvas\"></canvas>\r\n    );\r\n}\r\n","import { cloneDeep } from 'lodash';\r\nimport PubNub from 'pubnub';\r\nimport { PubNubProvider } from 'pubnub-react';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport LoadingScreen from '../../components/LoadingScreen/LoadingScreen';\r\nimport PhaseEvaluateRound from '../../components/PhaseEvaluateRound/PhaseEvaluateRound';\r\nimport PhaseFillOutTextfields from '../../components/PhaseFillOutTextfields/PhaseFillOutTextfields';\r\nimport PhaseWaitingToStart from '../../components/PhaseWaitingToStart/PhaseWaitingToStart';\r\nimport PubNubEventHandler from '../../components/PubNubEventHandler/PubNubEventHandler';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { GamePhase } from '../../constants/game.constant';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    PubNubCurrentRoundInputsMessage,\r\n    PubNubEvaluationOfPlayerInputMessage,\r\n    PubNubMessage,\r\n    PubNubMessageType,\r\n    PubNubUserState,\r\n} from '../../models/pub-nub-data.model';\r\nimport { SetDataOfFinishedGamePayload, AppAction, setDataOfFinishedGame, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport {\r\n    createGameRoundEvaluation,\r\n    getMinNumberOfMarkedAsInvalid,\r\n    markEmptyPlayerInputsAsInvalid,\r\n    processPlayerInputEvaluations,\r\n} from '../../utils/game.utils';\r\nimport { createAndFillArray } from '../../utils/general.utils';\r\nimport { LetterAnimation } from '../../components/LetterAnimation/LetterAnimation';\r\n\r\ninterface PlayGamePropsFromStore {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string | null;\r\n    playerInfo: PlayerInfo;\r\n}\r\ninterface PlayGameDispatchProps {\r\n    onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => void;\r\n    onResetAppState: () => void;\r\n}\r\ninterface PlayGameProps extends PlayGamePropsFromStore, PlayGameDispatchProps, RouterProps { }\r\ninterface PlayGameState {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentPhase: GamePhase;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    currentRoundInputs: PlayerInput[];\r\n    currentRound: number;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[];\r\n    loadingScreenMessage: string | null;\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    showLetterAnimation: boolean;\r\n    showLoadingScreen: boolean;\r\n}\r\n\r\nclass PlayGame extends Component<PlayGameProps, PlayGameState> {\r\n    public state: PlayGameState = {\r\n        allPlayers: new Map<string, PlayerInfo>(),\r\n        currentPhase: GamePhase.waitingToStart,\r\n        currentRoundEvaluation: new Map<string, PlayerInputEvaluation[]>(),\r\n        currentRoundInputs: [],\r\n        currentRound: 1,\r\n        gameConfig: null,\r\n        gameRounds: [],\r\n        loadingScreenMessage: null,\r\n        playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n        showLetterAnimation: false,\r\n        showLoadingScreen: true\r\n    };\r\n    private pubNubClient = new PubNub(PUBNUB_CONFIG);\r\n\r\n    public render() {\r\n        // This check serves as a route guard. If there is no gameId present in state,\r\n        // then user wasn't redirected here from NewGame or JoinGame component.\r\n        if (this.props.gameId === null) { return null; }\r\n        const { gameId, playerInfo } = this.props;\r\n        const { loadingScreenMessage, showLetterAnimation, showLoadingScreen } = this.state;\r\n        let currentPhaseElement: JSX.Element | null = null;\r\n        switch (this.state.currentPhase) {\r\n            case GamePhase.waitingToStart:\r\n                currentPhaseElement = (\r\n                    <PhaseWaitingToStart\r\n                        gameConfig={this.state.gameConfig}\r\n                        gameId={gameId}\r\n                        allPlayers={this.state.allPlayers}\r\n                        playerInfo={playerInfo}\r\n                        sendMessage={this.sendMessage}\r\n                    />\r\n                );\r\n                break;\r\n            case GamePhase.fillOutTextfields:\r\n                currentPhaseElement = (\r\n                    <PhaseFillOutTextfields\r\n                        currentRound={this.state.currentRound}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRoundInputs={this.state.currentRoundInputs}\r\n                        updateCurrentRoundInputs={this.updateCurrentRoundInputs}\r\n                        sendRoundFinishedMessage={this.sendRoundFinishedMessage}\r\n                    />\r\n                );\r\n                break;\r\n            case GamePhase.evaluateRound:\r\n                currentPhaseElement = (\r\n                    <PhaseEvaluateRound\r\n                        allPlayers={this.state.allPlayers}\r\n                        currentRound={this.state.currentRound}\r\n                        currentRoundEvaluation={this.state.currentRoundEvaluation}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRounds={this.state.gameRounds}\r\n                        playerInfo={playerInfo}\r\n                        updateEvaluationOfPlayerInput={this.updateEvaluationOfPlayerInput}\r\n                        sendEvaluationFinishedMessage={this.sendEvaluationFinishedMessage}\r\n                    />\r\n                );\r\n                break;\r\n            default:\r\n        }\r\n        const letterAnimationElement = this.state.gameConfig && showLetterAnimation ? (\r\n            <LetterAnimation\r\n                letterToUnveil={this.state.gameConfig.letters[this.state.currentRound - 1]}\r\n                callbackWhenAnimationDone={this.callbackWhenAnimationDone}\r\n            />\r\n        ) : null;\r\n        const loadingScreenElement = showLoadingScreen ? <LoadingScreen message={loadingScreenMessage} /> : null;\r\n        return (\r\n            <PubNubProvider client={this.pubNubClient}>\r\n                {/* The props passed to PubNubEventHandler must never be changed,\r\n                    in order to ensure that the component is not rerendered!\r\n                    (PubNubEventHandler is wrapped in React.memo) */}\r\n                <PubNubEventHandler\r\n                    gameChannel={this.props.gameId}\r\n                    gameConfig={this.props.gameConfig}\r\n                    playerInfo={this.props.playerInfo}\r\n                    navigateToDashboard={this.navigateToDashboard}\r\n                    addPlayers={this.addPlayers}\r\n                    startGame={this.startGame}\r\n                    stopRoundAndSendInputs={this.stopRoundAndSendInputs}\r\n                    addPlayerInputForFinishedRound={this.addPlayerInputForFinishedRound}\r\n                    processEvaluationOfPlayerInput={this.processEvaluationOfPlayerInput}\r\n                    countPlayerAsEvaluationFinished={this.countPlayerAsEvaluationFinished}\r\n                />\r\n                {letterAnimationElement}\r\n                {loadingScreenElement}\r\n                {!showLoadingScreen && !showLetterAnimation ? (\r\n                    <div className=\"main-content-wrapper\">\r\n                        {currentPhaseElement}\r\n                    </div>\r\n                ) : null}\r\n            </PubNubProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // If there is no gameId present in application state, then reroute user to dashboard.\r\n        if (this.props.gameId === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        allPlayers.set(this.props.playerInfo.id, this.props.playerInfo);\r\n        // If player is the game admin, the gameConfig can be taken from application state\r\n        // and we can hide the loading screen and show PhaseWaitingToStart component right away.\r\n        if (this.props.playerInfo.isAdmin) {\r\n            this.setState({ allPlayers, gameConfig: this.props.gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    private sendMessage = (message: PubNubMessage) => {\r\n        this.pubNubClient.publish(\r\n            {\r\n                channel: this.props.gameId as string,\r\n                message,\r\n                storeInHistory: true,\r\n                ttl: 1 // time to live (in hours)\r\n            },\r\n            (status, response) => console.log('PubNub Publish:', status, response)\r\n        );\r\n    };\r\n\r\n    private callbackWhenAnimationDone = () => {\r\n        this.setState({ showLetterAnimation: false });\r\n    }\r\n\r\n    private navigateToDashboard = () => {\r\n        this.props.history.push('/');\r\n        this.props.onResetAppState();\r\n    }\r\n\r\n    /**\r\n     * Called by PubNubEventHandler when it receives a PubNub presence event with action 'state-change'.\r\n     * It processes information about players that had already joined the game before this user\r\n     * joined (hereNow result) or about a player that joins the game after this user joined.\r\n     */\r\n    private addPlayers = (...newPlayers: PubNubUserState[]) => {\r\n        // Ignore information about players that try to join after the game has already started.\r\n        if (this.state.currentPhase !== GamePhase.waitingToStart) { return; }\r\n        let gameConfig: GameConfig | null = null;\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        newPlayers.forEach(newPlayer => {\r\n            allPlayers.set(newPlayer.playerInfo.id, newPlayer.playerInfo);\r\n            // If we are not the game admin, we obtain the game config from the admin's PubNubUserState.\r\n            if (newPlayer.gameConfig && !this.state.gameConfig) {\r\n                gameConfig = newPlayer.gameConfig;\r\n            }\r\n        });\r\n        // Only after we received the gameConfig from the admin, we hide the loading screen\r\n        // and render the PhaseWaitingToStart component instead.\r\n        if (gameConfig) {\r\n            this.setState({ allPlayers, gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'startGame'.\r\n     */\r\n    private startGame = () => {\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const roundInputs = createAndFillArray<PlayerInput>(gameConfig.categories.length, { text: '', valid: true });\r\n        this.setState({\r\n            currentPhase: GamePhase.fillOutTextfields,\r\n            currentRoundInputs: roundInputs,\r\n            showLetterAnimation: true\r\n        });\r\n    }\r\n\r\n    private updateCurrentRoundInputs = (newCurrentRoundInputs: PlayerInput[]) => {\r\n        this.setState({ currentRoundInputs: newCurrentRoundInputs });\r\n    }\r\n\r\n    private sendRoundFinishedMessage = () => {\r\n        this.setState({ showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.roundFinished });\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'roundFinished'.\r\n     */\r\n    private stopRoundAndSendInputs = () => {\r\n        // Prepare new GameRound object for addPlayerInputForFinishedRound method\r\n        // as well as new currentRoundEvaluation object for evaluation phase.\r\n        const gameRounds: GameRound[] = [...this.state.gameRounds, new Map<string, PlayerInput[]>()];\r\n        const currentRoundEvaluation = createGameRoundEvaluation(\r\n            this.state.allPlayers, (this.state.gameConfig as GameConfig).categories\r\n        );\r\n        this.setState({ currentRoundEvaluation, gameRounds, showLoadingScreen: true });\r\n        // Send this player's text inputs of current round to other players (and herself/himself).\r\n        const message = new PubNubCurrentRoundInputsMessage(markEmptyPlayerInputsAsInvalid(this.state.currentRoundInputs));\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'currentRoundInputs'.\r\n     */\r\n    private addPlayerInputForFinishedRound = (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => {\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        gameRounds[this.state.currentRound - 1].set(playerId, playerInputsForFinishedRound);\r\n        // Did we collect the inputs from all players?\r\n        if (gameRounds[this.state.currentRound - 1].size === this.state.allPlayers.size) {\r\n            // If yes, then start the evaluation of the finished round.\r\n            this.setState({ currentPhase: GamePhase.evaluateRound, gameRounds, showLoadingScreen: false });\r\n        } else {\r\n            // If no, then only store the updated gameRounds object in state.\r\n            this.setState({ gameRounds });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate a player input evaluation via a\r\n     * PubNub message. This message is then processed by all players in the game (including the user who sent it).\r\n     */\r\n    private updateEvaluationOfPlayerInput = (newEvaluation: EvaluationOfPlayerInput) => {\r\n        const message = new PubNubEvaluationOfPlayerInputMessage(newEvaluation);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'evaluationOfPlayerInput'.\r\n     */\r\n    private processEvaluationOfPlayerInput = (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => {\r\n        const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n        const playerInputEvaluations = currentRoundEvaluation.get(newEvaluation.evaluatedPlayerId);\r\n        if (playerInputEvaluations) {\r\n            playerInputEvaluations[newEvaluation.categoryIndex].set(evaluatingPlayerId, newEvaluation.markedAsValid);\r\n        }\r\n        this.setState({ currentRoundEvaluation });\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate to all players\r\n     * that the user of this instance of the game has finished evaluating the current round.\r\n     */\r\n    private sendEvaluationFinishedMessage = () => {\r\n        this.setState({ loadingScreenMessage: 'Warte auf Mitspieler', showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.evaluationFinished });\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with type 'evaluationFinished'.\r\n     */\r\n    private countPlayerAsEvaluationFinished = (evaluatingPlayerId: string) => {\r\n        const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n        playersThatFinishedEvaluation.set(evaluatingPlayerId, true);\r\n        if (playersThatFinishedEvaluation.size === this.state.allPlayers.size) {\r\n            this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n        } else {\r\n            this.setState({ playersThatFinishedEvaluation });\r\n        }\r\n    }\r\n\r\n    private processEvaluationsAndStartNextRoundOrFinishGame = () => {\r\n        const { allPlayers, currentRound, currentRoundEvaluation, gameRounds } = this.state;\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const newGameRounds = cloneDeep(gameRounds);\r\n        newGameRounds[currentRound - 1] = processPlayerInputEvaluations(\r\n            gameRounds[currentRound - 1], currentRoundEvaluation, getMinNumberOfMarkedAsInvalid(allPlayers.size)\r\n        );\r\n        if (currentRound === gameConfig.numberOfRounds) {\r\n            // Finish game and show results.\r\n            this.props.onSetDataOfFinishedGame({ allPlayers, gameConfig, gameRounds: newGameRounds });\r\n            this.props.history.push('/results');\r\n        } else {\r\n            // Start next round of the game.\r\n            this.setState({\r\n                currentPhase: GamePhase.fillOutTextfields,\r\n                currentRoundEvaluation: createGameRoundEvaluation(allPlayers, gameConfig.categories),\r\n                currentRoundInputs: createAndFillArray<PlayerInput>(gameConfig.categories.length, { text: '', valid: true }),\r\n                currentRound: currentRound + 1,\r\n                gameRounds: newGameRounds,\r\n                loadingScreenMessage: null,\r\n                playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n                showLetterAnimation: true,\r\n                showLoadingScreen: false\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): PlayGamePropsFromStore => {\r\n    return {\r\n        gameConfig: state.gameConfig,\r\n        gameId: state.gameId,\r\n        playerInfo: state.playerInfo as PlayerInfo\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): PlayGameDispatchProps => {\r\n    return {\r\n        onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => {\r\n            dispatch(setDataOfFinishedGame(payload))\r\n        },\r\n        onResetAppState: () => {\r\n            dispatch(resetAppState())\r\n        }\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);\r\n","import { APP_THEME_ID } from './../constants/themes.constant';\r\nconst APP_THEME_LOCAL_STORAGE_KEY = 'SLF-APP-THEME';\r\n\r\nexport const getAppThemeIdFromLocalStorage = (): string | null => {\r\n    return localStorage.getItem(APP_THEME_LOCAL_STORAGE_KEY);\r\n};\r\n\r\nexport const setAppThemeIdInLocalStorage = (appTheme: APP_THEME_ID) => {\r\n    return localStorage.setItem(APP_THEME_LOCAL_STORAGE_KEY, appTheme);\r\n};\r\n","import './App.css';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport Header from './components/Header/Header';\r\nimport { AppTheme, AppThemes } from './constants/themes.constant';\r\nimport { Dashboard } from './containers/Dashboard/Dashboard';\r\nimport GameResults from './containers/GameResults/GameResults';\r\nimport JoinGame from './containers/JoinGame/JoinGame';\r\nimport NewGame from './containers/NewGame/NewGame';\r\nimport PlayGame from './containers/PlayGame/PlayGame';\r\nimport { getAppThemeIdFromLocalStorage, setAppThemeIdInLocalStorage } from './utils/local-storage.utils';\r\n\r\nconst backspaceDisabler = require('backspace-disabler');\r\n\r\ninterface AppState {\r\n    activeTheme: AppTheme;\r\n}\r\nclass App extends Component<any, AppState> {\r\n    public state: AppState = {\r\n        activeTheme: AppThemes[0],\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ThemeProvider theme={this.state.activeTheme.muiTheme}>\r\n                <div className=\"app-container\">\r\n                    <Header\r\n                        theme={this.state.activeTheme}\r\n                        switchTheme={this.switchThemeHandler}\r\n                    />\r\n                    <main\r\n                        className={'app-main ' + this.state.activeTheme.className}\r\n                        style={this.state.activeTheme.style}\r\n                    >\r\n                        <HashRouter basename={process.env.PUBLIC_URL}>\r\n                            <Switch>\r\n                                <Route path=\"/\" exact component={Dashboard} />\r\n                                <Route path=\"/newgame\" exact component={NewGame} />\r\n                                <Route path=\"/joingame\" exact component={JoinGame} />\r\n                                <Route path=\"/play\" exact component={PlayGame} />\r\n                                <Route path=\"/results\" exact component={GameResults} />\r\n                            </Switch>\r\n                        </HashRouter>\r\n                    </main>\r\n                </div>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // Prevent browser back on backspace (e.g. in Firefox).\r\n        backspaceDisabler.disable();\r\n        const appThemeId = getAppThemeIdFromLocalStorage();\r\n        if (appThemeId) {\r\n            const appTheme = AppThemes.find(theme => theme.id === appThemeId);\r\n            if (appTheme) {\r\n                this.setState({ activeTheme: appTheme });\r\n            }\r\n        }\r\n    }\r\n\r\n    private switchThemeHandler = (newTheme: AppTheme) => {\r\n        this.setState({ activeTheme: newTheme });\r\n        setAppThemeIdInLocalStorage(newTheme.id);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GameConfig, GameRound } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport {\r\n    AppAction,\r\n    RESET_APP_STATE,\r\n    SET_DATA_FOR_NEW_GAME,\r\n    SET_DATA_OF_FINISHED_GAME,\r\n    SetDataForNewGameAction,\r\n    SetDataOfFinishedGameAction,\r\n} from './app.actions';\r\n\r\nexport interface AppState {\r\n    allPlayers: Map<string, PlayerInfo> | null;\r\n    gameId: string | null;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[] | null;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\n\r\nconst initialState: AppState = {\r\n    allPlayers: null,\r\n    gameId: null,\r\n    gameConfig: null,\r\n    gameRounds: null,\r\n    playerInfo: null\r\n};\r\n\r\nexport const appReducer = (state: AppState = initialState, action: AppAction): AppState => {\r\n    switch (action.type) {\r\n        case SET_DATA_FOR_NEW_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataForNewGameAction).payload\r\n            };\r\n        case SET_DATA_OF_FINISHED_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataOfFinishedGameAction).payload,\r\n                // Set gameId to null to prevent player from manually opening PlayGame route.\r\n                gameId: null\r\n            };\r\n        case RESET_APP_STATE:\r\n            return { ...initialState };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { appReducer } from './store/app.reducer';\r\nimport { Provider } from 'react-redux';\r\n\r\nexport const appStore = createStore(appReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={appStore}><App /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}