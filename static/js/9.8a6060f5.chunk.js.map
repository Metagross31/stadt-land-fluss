{"version":3,"sources":["utils/game.utils.ts","models/game.interface.ts","components/ScoringOptionsList/ScoringOptionsList.tsx","components/ScoringOptionsList/ScoringOptionsList.module.css","components/PhaseEvaluateRound/PhaseEvaluateRound.module.css","components/JoinGameLink/JoinGameLink.module.css","models/pub-nub-data.model.ts","components/AdminPanel/AdminPanel.tsx","components/LetterAnimation/LetterAnimation.tsx","components/GameRoundChip/GameRoundChip.tsx","components/PhaseEvaluateRound/PhaseEvaluateRound.tsx","components/RoundCountdown/RoundCountdown.tsx","components/PhaseFillOutTextfields/PhaseFillOutTextfields.tsx","components/JoinGameLink/JoinGameLink.tsx","components/PlayerList/PlayerList.tsx","components/PhaseWaitingToStart/PhaseWaitingToStart.tsx","components/PubNubEventHandler/PubNubEventHandler.tsx","config/pubnub.config.ts","constants/sr-message.constant.ts","utils/data-restoration.utils.ts","containers/PlayGame/PlayGame.tsx"],"names":["getRandomLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToSelectFrom","i","randomnLetter","randomnItem","push","filter","letter","getRandomCategories","numberOfCategories","categoryPool","preselectedCategories","randomCategories","numberOfRandomSelections","categoriesToSelectFrom","category","includes","randomCategory","c","getPlayersInAlphabeticalOrder","players","Array","from","map","data","sort","a","b","name","toLowerCase","getEmptyRoundInputs","numberOfInputs","createAndFillArray","points","STANDARD_POINTS","star","text","valid","markEmptyPlayerInputsAsInvalid","playerInputs","input","trim","createGameRoundEvaluation","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","evaluationForOneCategory","evaluatingPlayer","set","id","calculatePointsForRound","scoringOptions","round","checkForDuplicates","onlyPlayerWithValidAnswer","playerId","keys","next","value","playerInputsOfPlayer1","get","categoryIndex","calculatePointsForCategory","isOnlyPlayerWithValidAnswer","ONLY_ANSWER_POINTS","isDuplicateOfOtherPlayersInput","SAME_WORD_POINTS","otherPlayersIds","isOnlyPlayer","playerInputText","replace","some","otherPlayersInput","getMinNumberOfInvalids","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","getRejectingPlayers","rejectingPlayers","playerInfo","applyValidFlagAndStarFlagToPoints","creativeAnswersExtraPoints","EXTRA_POINTS","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","playerName","reduce","total","Object","createHallOfFameData","gameConfig","hallOfFameData","playerInput","GameOption","EndRoundMode","ScoringOptionsList","props","rules","Fragment","isForGameResultsPage","className","styles","heading","list","GAME_OPTION_LABEL","module","exports","PubNubMessageType","useStyles","makeStyles","adminPanel","position","top","right","menuButton","background","dialogContent","maxWidth","dialogContentText","color","KickUserDialog","classes","onClose","open","Dialog","DialogContent","root","playerToBeKicked","DialogContentText","DialogActions","Button","type","onClick","AdminPanel","useState","anchorEl","setAnchorEl","openDialog","setOpenDialog","setPlayerToBeKicked","otherPlayers","isAdmin","sortedPlayers","IconButton","title","aria-label","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","Boolean","playerIndex","MenuItem","selectedPlayer","ListItemIcon","ListItemText","primary","kickPlayer","Particle","x","y","radius","ctx","save","translate","this","fillStyle","fillRect","restore","ParticleAlphabet","letters","callbackWhenAnimationDone","canvas","currentPos","width","height","particlePositions","particles","tmpCanvas","tmpCtx","time","counter","myInterval","activeTheme","animate","requestAnimationFrame","animationBackgroundColor","animateParticles","document","querySelector","getContext","mainElement","AppThemes","find","theme","classList","contains","offsetWidth","offsetHeight","createElement","setInterval","changeLetter","getPixels","clearInterval","LETTER_ANIMATION_REDRAW_SPEED","makeParticles","num","Math","random","keyword","window","innerWidth","innerHeight","font","fillText","measureText","idata","getImageData","buffer32","Uint32Array","buffer","p","pPos","indexOf","draw","LetterAnimation","lettersToUse","STANDARD_ALPHABET","letterToUnveil","lettersForAnimation","LETTER_ANIMATION_LETTER_COUNT","useEffect","init","centerContent","display","justifyContent","chip","marginBottom","marginTop","borderRadius","fontWeight","fontSize","boxShadow","GameRoundChip","currentLetter","currentRound","isEvaluationPhase","numberOfRounds","label","Chip","component","icon","StyledBadge","withStyles","createStyles","badge","border","palette","paper","padding","Badge","PhaseEvaluateRound","playersThatFinishedEvaluation","has","hasFinishedEvaluation","setHasFinishedEvaluation","currentRoundEvaluation","finishedRound","notFinishedPlayers","player","createEvaluationButton","indexInSortedPlayers","evaluationForCategory","isInputAcceptedByUser","tooltipText","join","hasPlayerTypedText","evaluationButtonForTypedText","Tooltip","arrow","size","disabled","evaluatedPlayerId","currentEvaluation","updateEvaluationOfPlayerInput","handleEvaluationButtonClick","badgeContent","autoRejectIconForMissingText","auto_reject_icon","createSearchLink","searchLink","encodeURIComponent","search_link","href","target","rel","placement","createMarkAsCreativeAnswerToggle","isMarkedAsCreative","updateIsPlayerInputVeryCreativeStatus","markedAsCreative","handleMarkAsCreativeAnswerToggleClick","createPointsChip","evaluatedPlayerInput","calculatePoints","points_wrapper","role","_","isInputValid","isCreativeAnswer","emptyAnswerHint","answerRejectedHint","markedCreativeHint","answer_box_wrapper","Box","tabIndex","answer_box_creative","answer_box","player_name","Divider","light","aria-hidden","answer","invalid_answer","button_wrapper","playerEvaluationElements","sendEvaluationFinishedMessage","countdown","bottom","backgroundColor","main","contrastText","RoundCountdown","date","Date","now","duration","renderer","zeroPad","minutes","seconds","onComplete","React","memo","PhaseFillOutTextfields","gameRoundInputs","endRoundButton","finishRoundOnUserAction","countdownElement","durationOfCountdown","finishRoundOnCountdownComplete","noValidate","autoComplete","index","uniqueId","htmlFor","TextField","variant","fullWidth","InputProps","startAdornment","InputAdornment","spellCheck","onChange","newGameRoundInputs","updateCurrentRoundInputs","handleInputChange","endRoundMode","countdownEnds","PubNubCurrentRoundInputsMessage","payload","currentRoundInputs","PubNubEvaluationOfPlayerInputMessage","evaluationOfPlayerInput","PubNubIsPlayerInputVeryCreativeMessage","isPlayerInputVeryCreative","PubNubKickPlayerMessage","PubNubDataForCurrentGameMessage","dataForCurrentGame","JoinGameLink","url","location","joinGameLink","slice","gameId","link_label","OutlinedInput","readOnly","endAdornment","copyToClipboard","onLinkCopiedToClipboard","inputProps","flexWrap","spacing","margin","PlayerList","PhaseWaitingToStart","useSnackbar","enqueueSnackbar","closeSnackbar","message","informScreenReaderUser","waitForGameStartElement","getEndRoundDescription","allPlayersSubmit","firstPlayerSubmits","SectionHeader","startIcon","MIN_NUMBER_OF_PLAYERS","sendPubNubMessage","startGame","PubNubEventHandler","hereNowDataTimeout","pubNubClient","usePubNub","setUserState","newUserState","setState","channels","gameChannel","state","getHereNowData","hereNow","includeUUIDs","includeState","response","console","log","userStatesOfOtherPlayers","pubNubUserStates","occupants","occupant","userState","getUserStatesOfOtherPlayers","isRejoiningGame","addPlayers","navigateToJoinGamePage","pubNubListeners","messageEvent","processPubNubMessage","presence","presenceEvent","action","status","statusEvent","history","channel","messages","setTimeout","addListener","subscribe","withPresence","clearTimeout","removeListener","unsubscribeAll","PUBNUB_CONFIG","publishKey","PUBNUB_KEYS","subscribeKey","uuid","undefined","ssl","JOINED_GAME_MESSAGE","shouldUserRespondToRequestGameDataMessage","user","requestingPlayerId","requestingPlayerInfo","playersWithoutRequestingPlayer","cloneDeep","delete","compressGameRoundEvaluation","evaluationsAsArrays","item","booleanArray","compressedGameRoundEvaluation","decompressGameRoundEvaluation","compressedData","evaluatedPlayerIndex","playerData","playerInputEvaluation","evaluatingPlayerIndex","compressMarkedAsCreativeFlags","markedAsCreativeArrays","restoreGameRoundsOfRunningGameFromLocalStorage","numberOfRoundsToRestore","getRunningGameRoundFromLocalStorage","setPointsAndValidity","minNumberOfInvalids","applyMarkedAsCreativeFlags","markedAsCreativeAnswer","PlayGame","a11yMessagePolite","currentPhase","GamePhase","waitingToStart","playersThatFinishedRound","showLetterAnimation","showLoadingScreen","publish","storeInHistory","ttl","createCurrentPhaseElement","fillOutTextfields","evaluateRound","errorMessage","removeAllDataOfRunningGameFromLocalStorage","onResetAppState","joinGameErrorMessage","newPlayers","newPlayer","setRunningGameConfigInLocalStorage","roundFinished","onRoundFinishedMessage","publisher","addPlayerInputForFinishedRound","processEvaluationOfPlayerInput","processIsPlayerInputVeryCreativeStatus","evaluationFinished","countPlayerAsEvaluationFinished","removePlayerFromGame","requestGameData","sendDataForCurrentGame","sendKickPlayerMessage","restoreDataForCurrentGame","newCurrentRoundInputs","endRoundPlayer","stopRoundAndSendInputs","toPubNubMessage","playerInputsForFinishedRound","roundIndex","setRunningGameRoundInLocalStorage","getWaitingForPlayers","waitingForPlayers","newEvaluation","evaluatorId","playerInputEvaluations","evaluatorName","evaluatedName","newStatus","evaluatedPlayerName","processEvaluationsAndStartNextRoundOrFinishGame","onSetDataOfFinishedGame","nextRound","compressedMarkedAsCreativeFlags","convertMapToCollection","getRunningGameConfigFromLocalStorage","convertCollectionToMap","Pubnub","letterAnimationElement","loadingScreenElement","LoadingScreen","client","aria-live","clearOnUnmount","Component","connect","dispatch","setDataOfFinishedGame","resetAppState"],"mappings":"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","file":"static/js/9.8a6060f5.chunk.js","sourcesContent":["import { some } from 'lodash';\r\nimport randomnItem from 'random-item';\r\nimport { ONLY_ANSWER_POINTS, SAME_WORD_POINTS, STANDARD_POINTS } from '../constants/game.constant';\r\nimport { Collection } from '../models/collection.interface';\r\nimport { GameConfigScoringOptions, PlayerInput, HallOfFameEntry } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { EXTRA_POINTS } from './../constants/game.constant';\r\nimport { GameResultForPlayer, GameRound, GameRoundEvaluation, PlayerInputEvaluation, GameConfig } from './../models/game.interface';\r\nimport { createAndFillArray } from './general.utils';\r\n\r\n/**\r\n* Returns an array of randomly selected, unique letters.\r\n*/\r\nexport const getRandomLetters = (numberOfLetters: number, possibleLetters: string[]): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToSelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToSelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToSelectFrom = lettersToSelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\n/**\r\n* Returns an array of randomly selected categories.\r\n*/\r\nexport const getRandomCategories = (\r\n    numberOfCategories: number, categoryPool: string[], preselectedCategories: string[]\r\n): string[] => {\r\n    const randomCategories: string[] = [...preselectedCategories];\r\n    const numberOfRandomSelections = numberOfCategories - preselectedCategories.length;\r\n    let categoriesToSelectFrom = categoryPool.filter(category => !preselectedCategories.includes(category));\r\n    for (let i = 0; i < numberOfRandomSelections; i++) {\r\n        const randomCategory = randomnItem(categoriesToSelectFrom);\r\n        randomCategories.push(randomCategory);\r\n        categoriesToSelectFrom = categoriesToSelectFrom.filter(c => c !== randomCategory);\r\n    }\r\n    return randomCategories;\r\n};\r\n\r\nexport const getPlayersInAlphabeticalOrder = (players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const playerInfoArray = Array.from(players).map(data => data[1]);\r\n    return playerInfoArray.sort((a, b) => {\r\n        if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\r\n        if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\r\n        return 0;\r\n    });\r\n};\r\n\r\n/**\r\n * Returns an array of PlayerInput objects with empty strings and default settings (isMarkedCreative=false, valid=true, standard points).\r\n */\r\nexport const getEmptyRoundInputs = (numberOfInputs: number): PlayerInput[] => {\r\n    return createAndFillArray<PlayerInput>(numberOfInputs, { points: STANDARD_POINTS, star: false, text: '', valid: true });\r\n};\r\n\r\n/**\r\n* Checks each PlayerInput object whether it contains text.\r\n* If text string is empty, valid is set to false, otherwise to true.\r\n* The text is also trimmed in order to support correct scoring (finding duplicates).\r\n*/\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, text: input.text.trim(), valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(() => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs according to the active scoring options.\r\n */\r\nexport const calculatePointsForRound = (scoringOptions: GameConfigScoringOptions, round: GameRound): void => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    const playerId = round.keys().next().value;\r\n    const playerInputsOfPlayer1 = round.get(playerId) as PlayerInput[];\r\n    // Loop through all categories.\r\n    for (let categoryIndex = 0; categoryIndex < playerInputsOfPlayer1.length; categoryIndex++) {\r\n        calculatePointsForCategory(scoringOptions, round, categoryIndex);\r\n    }\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs for one category according to the active scoring options.\r\n */\r\nexport const calculatePointsForCategory = (scoringOptions: GameConfigScoringOptions, round: GameRound, categoryIndex: number): void => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    Array.from(round.keys()).forEach(playerId => {\r\n        const playerInputs = round.get(playerId) as PlayerInput[];\r\n        // Only check valid inputs.\r\n        if (playerInputs[categoryIndex].valid) {\r\n            if (scoringOptions.onlyPlayerWithValidAnswer && isOnlyPlayerWithValidAnswer(playerId, round, categoryIndex)) {\r\n                playerInputs[categoryIndex].points = ONLY_ANSWER_POINTS;\r\n            } else {\r\n                if (scoringOptions.checkForDuplicates && isDuplicateOfOtherPlayersInput(playerId, round, categoryIndex)) {\r\n                    playerInputs[categoryIndex].points = SAME_WORD_POINTS;\r\n                } else {\r\n                    playerInputs[categoryIndex].points = STANDARD_POINTS;\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport const isOnlyPlayerWithValidAnswer = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    let isOnlyPlayer = true;\r\n    otherPlayersIds.forEach(id => isOnlyPlayer = isOnlyPlayer && !(round.get(id) as PlayerInput[])[categoryIndex].valid);\r\n    return isOnlyPlayer;\r\n};\r\n\r\n/**\r\n * Returns true if a duplicate (removes all non-alphanumeric characters for comparison) for playerId's input was found.\r\n */\r\nexport const isDuplicateOfOtherPlayersInput = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    const playerInputText = (round.get(playerId) as PlayerInput[])[categoryIndex].text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    return some(otherPlayersIds, id => {\r\n        const otherPlayersInput = (round.get(id) as PlayerInput[])[categoryIndex];\r\n        return otherPlayersInput.valid && playerInputText === otherPlayersInput.text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    });\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfInvalids = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\n/**\r\n * Returns the players that marked the input as invalid in alphabetical order. Parameters:\r\n * - evaluations: Evaluations of all players for one player's input for one category.\r\n * - players: All players taking part in the running game of \"Stadt-Land-Fluss\".\r\n */\r\nexport const getRejectingPlayers = (evaluations: PlayerInputEvaluation, players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const rejectingPlayers = new Map<string, PlayerInfo>();\r\n    evaluations.forEach((markedAsValid, playerId) => {\r\n        if (!markedAsValid) {\r\n            const playerInfo = players.get(playerId);\r\n            if (playerInfo) {\r\n                rejectingPlayers.set(playerId, playerInfo);\r\n            }\r\n        }\r\n    });\r\n    return getPlayersInAlphabeticalOrder(rejectingPlayers);\r\n};\r\n\r\n/**\r\n * Adds extra points for \"very creative answers\" if scoring option is active\r\n * and sets invalid answer's points to zero.\r\n */\r\nexport const applyValidFlagAndStarFlagToPoints = (scoringOptions: GameConfigScoringOptions, round: GameRound): void => {\r\n    round.forEach(playerInputs => {\r\n        playerInputs.forEach(input => {\r\n            if (!input.valid) {\r\n                input.points = 0;\r\n            } else if (scoringOptions.creativeAnswersExtraPoints && input.star) {\r\n                input.points = input.points + EXTRA_POINTS;\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: Collection<GameResultForPlayer> = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => total + input.points, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n};\r\n\r\n/**\r\n * Creates a list of entries for the \"Hall of Fame\", the list of answers marked as \"very creative\".\r\n */\r\nexport const createHallOfFameData = (allPlayers: Map<string, PlayerInfo>, gameConfig: GameConfig, gameRounds: GameRound[]): HallOfFameEntry[] => {\r\n    const hallOfFameData: HallOfFameEntry[] = [];\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const playerInfo = allPlayers.get(playerId) as PlayerInfo;\r\n            playerInputs.forEach((playerInput, categoryIndex) => {\r\n                if (playerInput.valid && playerInput.star) {\r\n                    hallOfFameData.push({\r\n                        category: gameConfig.categories[categoryIndex],\r\n                        playerName: playerInfo.name,\r\n                        text: playerInput.text\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n    return hallOfFameData;\r\n};\r\n","export enum GameOption {\r\n    checkForDuplicates = 'checkForDuplicates',\r\n    creativeAnswersExtraPoints = 'creativeAnswersExtraPoints',\r\n    onlyPlayerWithValidAnswer = 'onlyPlayerWithValidAnswer',\r\n}\r\n\r\nexport interface GameConfigScoringOptions {\r\n    [GameOption.checkForDuplicates]: boolean;\r\n    [GameOption.creativeAnswersExtraPoints]: boolean;\r\n    [GameOption.onlyPlayerWithValidAnswer]: boolean;\r\n}\r\n\r\nexport enum EndRoundMode {\r\n    /**\r\n     * All players have to click \"Finish round\" to end the round.\r\n     */\r\n    allPlayersSubmit = 'allPlayers',\r\n    /**\r\n     * Use a countdown that determines how much time each player has\r\n     * to fill out the text fields in one round of the game.\r\n     */\r\n    countdownEnds = 'countdownEnds',\r\n    /**\r\n     * The first player to click \"Finish round\" ends the round.\r\n     */\r\n    firstPlayerSubmits = 'firstPlayer',\r\n}\r\n\r\nexport interface GameConfig {\r\n    categories: string[];\r\n    durationOfCountdown: number;\r\n    endRoundMode: EndRoundMode;\r\n    letters: string[];\r\n    numberOfRounds: number;\r\n    scoringOptions: GameConfigScoringOptions;\r\n}\r\n\r\nexport interface StoredRunningGameInfo {\r\n    /** Version 4 UUID */\r\n    gameId: string;\r\n    /** UNIX timestamp */\r\n    idCreationTimestamp: number;\r\n    isPlayerAdmin: boolean;\r\n}\r\n\r\n/**\r\n * Represents a player's input for one category in one round of the game.\r\n */\r\nexport interface PlayerInput {\r\n    /** The points the player gains with this input if it is valid */\r\n    points: number;\r\n    /** Whether input is marked as very creative, funny etc answer */\r\n    star: boolean;\r\n    /** The text input by the player */\r\n    text: string;\r\n    /** Is the input valid or was it rejected by the other players */\r\n    valid: boolean;\r\n}\r\n\r\n/**\r\n * Holds the inputs for all players (key = player's id) for one round of the game.\r\n */\r\nexport type GameRound = Map<string, PlayerInput[]>;\r\n\r\n/**\r\n * Represents the evaluation of all players for one player's input for one category in one round of the game.\r\n * The players' ids are used as keys for the map. The value represents whether the input is valid.\r\n */\r\nexport type PlayerInputEvaluation = Map<string, boolean>;\r\n\r\n/**\r\n * Represents the evaluation of all players' inputs in one round of the game. The players' ids\r\n * are used as keys for the map. The array holds one PlayerInputEvaluation object for each category.\r\n */\r\nexport type GameRoundEvaluation = Map<string, PlayerInputEvaluation[]>;\r\n\r\n/**\r\n * Represents the user's evaluation of a player's input for a category.\r\n */\r\nexport interface EvaluationOfPlayerInput {\r\n    categoryIndex: number;\r\n    evaluatedPlayerId: string;\r\n    markedAsValid: boolean;\r\n}\r\n\r\n/**\r\n * Represents whether a player's input for a category is deemed a very creative answer.\r\n */\r\nexport interface IsPlayerInputVeryCreativeStatus {\r\n    categoryIndex: number;\r\n    evaluatedPlayerId: string;\r\n    markedAsCreative: boolean;\r\n}\r\n\r\nexport interface GameResultForPlayer {\r\n    playerName: string;\r\n    points: number;\r\n}\r\n\r\n/**\r\n * Player inputs that are marked as \"very creative\" by other players are\r\n * displayed in a \"Hall of Fame\" at the end of the game.\r\n */\r\nexport interface HallOfFameEntry {\r\n    category: string;\r\n    playerName: string;\r\n    text: string;\r\n}\r\n","import React from 'react';\r\n\r\nimport { GAME_OPTION_LABEL } from '../../constants/game.constant';\r\nimport { GameConfigScoringOptions } from '../../models/game.interface';\r\nimport styles from './ScoringOptionsList.module.css';\r\n\r\ninterface ScoringOptionsListProps {\r\n    isForGameResultsPage: boolean;\r\n    rules: GameConfigScoringOptions;\r\n}\r\n\r\nconst ScoringOptionsList: React.FunctionComponent<ScoringOptionsListProps> = props => {\r\n    const { rules } = props;\r\n    const createFurtherOptionsElement = (): JSX.Element => (\r\n        <React.Fragment>\r\n            {props.isForGameResultsPage ? <h3 className={styles.heading}>Regeln für die Punktevergabe</h3> : null}\r\n            {!props.isForGameResultsPage ? <h4 className={styles.heading}>Regeln für die Punktevergabe</h4> : null}\r\n            <ul className={styles.list}>\r\n                {rules.checkForDuplicates ? <li>{GAME_OPTION_LABEL.checkForDuplicates}</li> : null}\r\n                {rules.onlyPlayerWithValidAnswer ? <li>{GAME_OPTION_LABEL.onlyPlayerWithValidAnswer}</li> : null}\r\n                {rules.creativeAnswersExtraPoints ? <li>{GAME_OPTION_LABEL.creativeAnswersExtraPoints}</li> : null}\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n    if (rules.checkForDuplicates || rules.onlyPlayerWithValidAnswer || rules.creativeAnswersExtraPoints) {\r\n        return createFurtherOptionsElement();\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default ScoringOptionsList;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ScoringOptionsList_heading__24MfE\",\"list\":\"ScoringOptionsList_list__2_T80\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answer_box_wrapper\":\"PhaseEvaluateRound_answer_box_wrapper__2bEV4\",\"answer_box\":\"PhaseEvaluateRound_answer_box__3FEJ-\",\"answer_box_creative\":\"PhaseEvaluateRound_answer_box_creative__QcFuI\",\"player_name\":\"PhaseEvaluateRound_player_name__3vIEv\",\"answer\":\"PhaseEvaluateRound_answer__26B5S\",\"invalid_answer\":\"PhaseEvaluateRound_invalid_answer__24pkd\",\"button_wrapper\":\"PhaseEvaluateRound_button_wrapper__2ww_I\",\"points_wrapper\":\"PhaseEvaluateRound_points_wrapper__d9qw8\",\"points\":\"PhaseEvaluateRound_points__38f4X\",\"search_link\":\"PhaseEvaluateRound_search_link__1u1C7\",\"auto_reject_icon\":\"PhaseEvaluateRound_auto_reject_icon__aG-MH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link_label\":\"JoinGameLink_link_label__1tx1j\"};","import { GamePhase } from '../constants/game.constant';\r\nimport { Collection } from './collection.interface';\r\nimport { EvaluationOfPlayerInput, GameConfig, IsPlayerInputVeryCreativeStatus, PlayerInput } from './game.interface';\r\nimport { PlayerInfo } from './player.interface';\r\n\r\nexport interface PubNubUserState {\r\n    gameConfig?: GameConfig;\r\n    playerInfo: PlayerInfo;\r\n}\r\n\r\nexport enum PubNubMessageType {\r\n    currentRoundInputs = 'currentRoundInputs',\r\n    dataForCurrentGame = 'dataForCurrentGame',\r\n    evaluationFinished = 'evaluationFinished',\r\n    evaluationOfPlayerInput = 'evaluationOfPlayerInput',\r\n    isPlayerInputVeryCreative = 'isPlayerInputVeryCreative',\r\n    kickPlayer = 'kickPlayer',\r\n    requestGameData = 'requestGameData',\r\n    roundFinished = 'roundFinished',\r\n    startGame = 'startGame'\r\n}\r\n\r\nexport interface PubNubMessage {\r\n    type: PubNubMessageType;\r\n    payload?: any;\r\n}\r\n\r\nexport class PubNubCurrentRoundInputsMessage {\r\n    constructor(private payload: PlayerInput[]) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.currentRoundInputs,\r\n            payload: this.payload\r\n        };\r\n    }\r\n}\r\n\r\nexport class PubNubEvaluationOfPlayerInputMessage {\r\n    constructor(private payload: EvaluationOfPlayerInput) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.evaluationOfPlayerInput,\r\n            payload: this.payload\r\n        };\r\n    }\r\n}\r\n\r\nexport class PubNubIsPlayerInputVeryCreativeMessage {\r\n    constructor(private payload: IsPlayerInputVeryCreativeStatus) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.isPlayerInputVeryCreative,\r\n            payload: this.payload\r\n        };\r\n    }\r\n}\r\n\r\nexport class PubNubKickPlayerMessage {\r\n    constructor(private payload: string) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.kickPlayer,\r\n            payload: this.payload\r\n        };\r\n    }\r\n}\r\n\r\nexport interface PubNubDataForCurrentGameMessagePayload {\r\n    compressedGameRoundEvaluation: boolean[][][];\r\n    compressedMarkedAsCreativeFlags: boolean[][];\r\n    currentPhase: GamePhase;\r\n    currentRound: number;\r\n    playersThatFinishedEvaluation: Collection<boolean>;\r\n    requestingPlayerId: string;\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\nexport class PubNubDataForCurrentGameMessage {\r\n    constructor(private payload: PubNubDataForCurrentGameMessagePayload) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.dataForCurrentGame,\r\n            payload: this.payload\r\n        };\r\n    }\r\n}\r\n","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    IconButton,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Menu,\r\n    MenuItem,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport React, { useState } from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\n\r\nconst useStyles = makeStyles({\r\n    adminPanel: {\r\n        position: 'absolute',\r\n        top: '1rem',\r\n        right: '1rem'\r\n    },\r\n    menuButton: {\r\n        background: 'radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,0.5) 35%, rgba(255,255,255,0) 60%);'\r\n    },\r\n    dialogContent: {\r\n        maxWidth: '23rem'\r\n    },\r\n    dialogContentText: {\r\n        color: 'black'\r\n    }\r\n});\r\n\r\nexport interface KickUserDialogProps {\r\n    open: boolean;\r\n    playerToBeKicked: PlayerInfo | null;\r\n    onClose: (kickPlayer: boolean) => void;\r\n}\r\nconst KickUserDialog: React.FunctionComponent<KickUserDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { onClose, open } = props;\r\n\r\n    return (\r\n        <Dialog onClose={() => onClose(false)} open={open}>\r\n            <DialogContent classes={{ root: classes.dialogContent }}>\r\n                {props.playerToBeKicked ? (\r\n                    <DialogContentText classes={{ root: classes.dialogContentText }}>\r\n                        &quot;With great power comes great responsibility&quot; – Willst du {props.playerToBeKicked.name} wirklich aus dem Spiel werfen?\r\n                    </DialogContentText>\r\n                ) : null}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    type=\"button\"\r\n                    onClick={() => onClose(false)}\r\n                >Abbrechen</Button>\r\n                <Button\r\n                    type=\"button\"\r\n                    color=\"primary\"\r\n                    onClick={() => onClose(true)}\r\n                >Rauswerfen</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\ninterface AdminPanelProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    kickPlayer: (playerId: string) => void;\r\n}\r\nconst AdminPanel: React.FunctionComponent<AdminPanelProps> = props => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [playerToBeKicked, setPlayerToBeKicked] = useState<PlayerInfo | null>(null);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleMenuItemClick = (selectedPlayer: PlayerInfo) => {\r\n        setAnchorEl(null);\r\n        setPlayerToBeKicked(selectedPlayer);\r\n        setOpenDialog(true);\r\n    };\r\n    const handleAdminPanelClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleKickUserDialogClose = (kickPlayer: boolean) => {\r\n        setOpenDialog(false);\r\n        if (kickPlayer && playerToBeKicked) {\r\n            props.kickPlayer(playerToBeKicked.id);\r\n        }\r\n    };\r\n\r\n    const otherPlayers = new Map<string, PlayerInfo>();\r\n    props.allPlayers.forEach((playerInfo, playerId) => {\r\n        if (!playerInfo.isAdmin) { otherPlayers.set(playerId, playerInfo); }\r\n    });\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(otherPlayers);\r\n    return (\r\n        <div className={classes.adminPanel}>\r\n            <IconButton\r\n                className={classes.menuButton}\r\n                title=\"Admin-Panel\"\r\n                aria-label=\"Admin-Panel\"\r\n                aria-controls=\"admin-panel\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n            >\r\n                <SettingsIcon color=\"primary\" />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"admin-panel\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleAdminPanelClose}\r\n            >\r\n                {sortedPlayers.map((playerInfo, playerIndex) => (\r\n                    <MenuItem\r\n                        key={`menu-item-delete-player-${playerIndex}`}\r\n                        title={`${playerInfo.name} aus dem Spiel werfen`}\r\n                        onClick={() => handleMenuItemClick(playerInfo)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <CancelIcon color=\"secondary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={playerInfo.name} />\r\n                    </MenuItem>\r\n                ))}\r\n            </Menu>\r\n            <KickUserDialog\r\n                open={openDialog}\r\n                playerToBeKicked={playerToBeKicked}\r\n                onClose={handleKickUserDialogClose}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminPanel;\r\n","import './LetterAnimation.css';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n    LETTER_ANIMATION_LETTER_COUNT,\r\n    LETTER_ANIMATION_REDRAW_SPEED,\r\n    STANDARD_ALPHABET,\r\n} from '../../constants/game.constant';\r\nimport { AppTheme, AppThemes } from '../../constants/themes.constant';\r\nimport { getRandomLetters } from '../../utils/game.utils';\r\n\r\n// Thanks to Georgi Nikoloff for the great animation source code: https://codepen.io/gbnikolov/pen/jEqQdG\r\n// I rewrote the code in Typescript, refactored it a bit and adapted it to the needs of this application.\r\n\r\nclass Particle {\r\n    private radius = 3.5;\r\n\r\n    constructor(\r\n        public x: number,\r\n        public y: number\r\n    ) { }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.translate(this.x, this.y);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, this.radius, this.radius);\r\n        ctx.restore();\r\n    }\r\n}\r\n\r\nclass ParticleAlphabet {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private currentPos: number;\r\n    private width: number;\r\n    private height: number;\r\n    private particlePositions: any[];\r\n    private particles: Particle[];\r\n    private tmpCanvas: HTMLCanvasElement;\r\n    private tmpCtx: CanvasRenderingContext2D;\r\n    private time: string;\r\n    private counter = 0;\r\n    private myInterval: any;\r\n    private activeTheme: AppTheme;\r\n\r\n    constructor(\r\n        public letters: string[],\r\n        public callbackWhenAnimationDone: () => void\r\n    ) {\r\n        this.canvas = document.querySelector('#letter-animation-canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        const mainElement = document.querySelector('main') as HTMLElement;\r\n        this.activeTheme = AppThemes.find(theme => mainElement.classList.contains(theme.className)) as AppTheme;\r\n        this.width = mainElement.offsetWidth;\r\n        this.height = mainElement.offsetHeight;\r\n        this.particlePositions = [];\r\n        this.particles = [];\r\n        this.tmpCanvas = document.createElement('canvas');\r\n        this.tmpCtx = this.tmpCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.particlePositions = [];\r\n        this.currentPos = 0;\r\n        this.time = '';\r\n    }\r\n\r\n    public init() {\r\n        this.myInterval = setInterval(() => {\r\n            if (this.counter < this.letters.length) {\r\n                this.changeLetter();\r\n                this.getPixels(this.tmpCanvas, this.tmpCtx);\r\n            }\r\n            this.counter++;\r\n            if (this.counter > this.letters.length + 1) {\r\n                clearInterval(this.myInterval);\r\n                this.callbackWhenAnimationDone();\r\n            }\r\n        }, LETTER_ANIMATION_REDRAW_SPEED);\r\n\r\n        this.makeParticles(1000);\r\n        this.animate();\r\n    }\r\n\r\n    private changeLetter() {\r\n        this.time = this.letters[this.currentPos];\r\n        this.currentPos++;\r\n        if (this.currentPos >= this.letters.length) {\r\n            this.currentPos = 0;\r\n        }\r\n    }\r\n\r\n    private makeParticles(num: number) {\r\n        for (let i = 0; i <= num; i++) {\r\n            const x = this.width / 2 + Math.random() * 400 - 200;\r\n            const y = this.height / 2 + Math.random() * 400 - 200;\r\n            this.particles.push(new Particle(x, y));\r\n        }\r\n    }\r\n\r\n    private getPixels(canvas: any, ctx: any) {\r\n        const keyword = this.time,\r\n            gridX = 6,\r\n            gridY = 6;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        ctx.fillStyle = 'red';\r\n        ctx.font = 'italic bold 330px Noto Serif';\r\n        ctx.fillText(keyword, canvas.width / 2 - ctx.measureText(keyword).width / 2, canvas.height / 2 + 100);\r\n        const idata = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const buffer32 = new Uint32Array(idata.data.buffer);\r\n        if (this.particlePositions.length > 0) this.particlePositions = [];\r\n        for (let y = 0; y < canvas.height; y += gridY) {\r\n            for (let x = 0; x < canvas.width; x += gridX) {\r\n                if (buffer32[y * canvas.width + x]) {\r\n                    this.particlePositions.push({ x: x, y: y });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private animateParticles() {\r\n        let p, pPos;\r\n        for (let i = 0, num = this.particles.length; i < num; i++) {\r\n            p = this.particles[i];\r\n            pPos = this.particlePositions[i];\r\n            if (this.particles.indexOf(p) === this.particlePositions.indexOf(pPos)) {\r\n                p.x += (pPos.x - p.x) * .3;\r\n                p.y += (pPos.y - p.y) * .3;\r\n                p.draw(this.ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private animate = () => {\r\n        requestAnimationFrame(this.animate);\r\n        this.ctx.fillStyle = this.activeTheme.animationBackgroundColor;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        this.animateParticles();\r\n    }\r\n}\r\n\r\ninterface LetterAnimationProps {\r\n    letterToUnveil: string;\r\n    callbackWhenAnimationDone: () => void;\r\n}\r\nexport const LetterAnimation: React.FunctionComponent<LetterAnimationProps> = props => {\r\n    const lettersToUse = [...STANDARD_ALPHABET].filter(letter => letter !== props.letterToUnveil);\r\n    const lettersForAnimation = [...getRandomLetters(LETTER_ANIMATION_LETTER_COUNT - 1, lettersToUse), props.letterToUnveil];\r\n    useEffect(() => {\r\n        const particleAlphabet = new ParticleAlphabet(lettersForAnimation, props.callbackWhenAnimationDone);\r\n        particleAlphabet.init();\r\n    });\r\n    return (\r\n        <canvas id=\"letter-animation-canvas\"></canvas>\r\n    );\r\n};\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n    centerContent: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    chip: {\r\n        height: '3rem',\r\n        marginBottom: '0',\r\n        marginTop: '1rem',\r\n        borderRadius: '5px',\r\n        fontWeight: 'normal',\r\n        fontSize: '1.2rem',\r\n        boxShadow: '0 2px 4px rgba(0,0,0,.501961)'\r\n    }\r\n});\r\n\r\ninterface GameRoundChipProps {\r\n    currentLetter: string;\r\n    currentRound: number;\r\n    isEvaluationPhase: boolean;\r\n    numberOfRounds: number;\r\n}\r\n\r\nconst GameRoundChip: React.FunctionComponent<GameRoundChipProps> = props => {\r\n    const classes = useStyles();\r\n    const { currentLetter, currentRound, isEvaluationPhase, numberOfRounds } = props;\r\n    const label = isEvaluationPhase\r\n        ? `Auswertung von Runde ${currentRound}: „${currentLetter}“`\r\n        : `Runde ${currentRound} von ${numberOfRounds}: „${currentLetter}“`;\r\n    return (\r\n        <div className={classes.centerContent}>\r\n            <Chip\r\n                color=\"primary\"\r\n                component=\"h2\"\r\n                icon={<EmojiObjectsIcon />}\r\n                label={label}\r\n                className={classes.chip}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameRoundChip;\r\n","import { Badge, Box, Chip, createStyles, Divider, IconButton, Theme, Tooltip, withStyles } from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport ThumbDownRoundedIcon from '@material-ui/icons/ThumbDownRounded';\r\nimport React, { useState } from 'react';\r\n\r\nimport { EXTRA_POINTS } from '../../constants/game.constant';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    IsPlayerInputVeryCreativeStatus,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder, getRejectingPlayers } from '../../utils/game.utils';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport styles from './PhaseEvaluateRound.module.css';\r\n\r\nconst StyledBadge = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        badge: {\r\n            right: -3,\r\n            top: '100%',\r\n            border: `2px solid ${theme.palette.background.paper}`,\r\n            padding: '0 4px',\r\n        },\r\n    }),\r\n)(Badge);\r\n\r\ninterface PhaseEvaluateRoundProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    sendEvaluationFinishedMessage: () => void;\r\n    updateEvaluationOfPlayerInput: (newEvaluation: EvaluationOfPlayerInput) => void;\r\n    updateIsPlayerInputVeryCreativeStatus: (newStatus: IsPlayerInputVeryCreativeStatus) => void;\r\n}\r\nconst PhaseEvaluateRound: React.FunctionComponent<PhaseEvaluateRoundProps> = props => {\r\n    const [hasFinishedEvaluation, setHasFinishedEvaluation] = useState(props.playersThatFinishedEvaluation.has(props.playerInfo.id));\r\n    const { allPlayers, currentRound, currentRoundEvaluation, gameConfig, playerInfo, playersThatFinishedEvaluation } = props;\r\n    // Retrieve data for finished round; e.g. if current round is 1, then data is at index 0.\r\n    const finishedRound = props.gameRounds[currentRound - 1];\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(allPlayers);\r\n    const notFinishedPlayers: string[] = [];\r\n    sortedPlayers.forEach(player => {\r\n        if (!playersThatFinishedEvaluation.has(player.id)) {\r\n            notFinishedPlayers.push(player.name);\r\n        }\r\n    });\r\n\r\n    /**\r\n      * Toggles the user's evaluation of a player's input for a category,\r\n      * but only if the user hasn't accepted the round evaluation yet.\r\n      */\r\n    const handleEvaluationButtonClick = (\r\n        categoryIndex: number, evaluatedPlayerId: string, currentEvaluation: boolean\r\n    ) => {\r\n        props.updateEvaluationOfPlayerInput({ categoryIndex, evaluatedPlayerId, markedAsValid: !currentEvaluation });\r\n    };\r\n    /**\r\n     * Displays a button that allows the user to reject a player's input for a category.\r\n     * A badge attached to the button shows the total number of rejections. If the player\r\n     * didn't type any text, then a not clickable thumb down icon is shown instead,\r\n     * which indicates that the input was automatically rejected by the application.\r\n     */\r\n    const createEvaluationButton = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const allEvaluationsForPlayer = currentRoundEvaluation.get(evaluatedPlayer.id) as PlayerInputEvaluation[];\r\n        const evaluationForCategory = allEvaluationsForPlayer[categoryIndex];\r\n        const isInputAcceptedByUser = evaluationForCategory.get(playerInfo.id) as boolean;\r\n        const rejectingPlayers = getRejectingPlayers(evaluationForCategory, allPlayers);\r\n        const tooltipText = rejectingPlayers.length === 0 ? 'Keine Ablehnungen' :\r\n            'Abgelehnt von ' + rejectingPlayers.map(p => p.name).join(', ');\r\n        const hasPlayerTypedText = !!(finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n\r\n        const evaluationButtonForTypedText = (\r\n            <Tooltip\r\n                key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}`}\r\n                title={tooltipText}\r\n                arrow\r\n            >\r\n                <IconButton\r\n                    className=\"slf-evaluation-button\"\r\n                    color={isInputAcceptedByUser ? 'default' : 'secondary'}\r\n                    size=\"small\"\r\n                    aria-label={isInputAcceptedByUser ? 'Antwort ablehnen' : 'Antwort akzeptieren'}\r\n                    disabled={hasFinishedEvaluation}\r\n                    onClick={() => handleEvaluationButtonClick(categoryIndex, evaluatedPlayer.id, isInputAcceptedByUser)}\r\n                >\r\n                    <StyledBadge badgeContent={rejectingPlayers.length} color=\"secondary\">\r\n                        <ThumbDownRoundedIcon />\r\n                    </StyledBadge>\r\n                </IconButton>\r\n            </Tooltip>\r\n        );\r\n        const autoRejectIconForMissingText = (\r\n            <Tooltip\r\n                key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}`}\r\n                title=\"Automatisch abgelehnt\"\r\n            >\r\n                <ThumbDownRoundedIcon color=\"secondary\" className={styles.auto_reject_icon} />\r\n            </Tooltip>\r\n        );\r\n        return hasPlayerTypedText ? evaluationButtonForTypedText : autoRejectIconForMissingText;\r\n    };\r\n    /**\r\n     * Creates a search link for a specific category and player input.\r\n     */\r\n    const createSearchLink = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const category = gameConfig.categories[categoryIndex];\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const playerInput = (finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n        const searchLink = `https://www.ecosia.org/search?q=${encodeURIComponent(category)}+${encodeURIComponent(playerInput)}`;\r\n        return (\r\n            <a\r\n                className={styles.search_link}\r\n                href={searchLink}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                aria-label=\"Begriff nachschlagen\"\r\n            >\r\n                <Tooltip\r\n                    title=\"Begriff nachschlagen\"\r\n                    placement=\"bottom\"\r\n                >\r\n                    <SearchIcon color=\"primary\" />\r\n                </Tooltip>\r\n            </a>\r\n        );\r\n    };\r\n    /**\r\n      * Toggles the \"marked as very creative\" status of a player's input for a category,\r\n      * but only if the user hasn't accepted the round evaluation yet and isn't trying to mark their own answer as \"very creative\".\r\n      */\r\n    const handleMarkAsCreativeAnswerToggleClick = (\r\n        categoryIndex: number, evaluatedPlayerId: string, isMarkedAsCreative: boolean\r\n    ) => {\r\n        props.updateIsPlayerInputVeryCreativeStatus({ categoryIndex, evaluatedPlayerId, markedAsCreative: !isMarkedAsCreative });\r\n    };\r\n    /**\r\n     * Creates a \"mark as creative answer\" toggle button for a specific category and player input.\r\n     */\r\n    const createMarkAsCreativeAnswerToggle = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const playerInput = (finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex];\r\n        return (\r\n            <Tooltip\r\n                title={playerInput.star ? 'Kreativ-Markierung aufheben' : 'Als besonders kreativ markieren'}\r\n                placement=\"bottom\"\r\n            >\r\n                <IconButton\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    disabled={hasFinishedEvaluation || evaluatedPlayer.id === props.playerInfo.id}\r\n                    onClick={() => handleMarkAsCreativeAnswerToggleClick(categoryIndex, evaluatedPlayer.id, playerInput.star)}\r\n                >\r\n                    {playerInput.star ? <StarIcon /> : <StarBorderIcon />}\r\n                </IconButton>\r\n            </Tooltip>\r\n        );\r\n    };\r\n    const calculatePoints = (evaluatedPlayerInput: PlayerInput): number => {\r\n        return gameConfig.scoringOptions.creativeAnswersExtraPoints && evaluatedPlayerInput.star\r\n            ? evaluatedPlayerInput.points + EXTRA_POINTS : evaluatedPlayerInput.points;\r\n    };\r\n    const createPointsChip = (evaluatedPlayerInput: PlayerInput): JSX.Element => {\r\n        const label = '+' + (evaluatedPlayerInput.valid ? calculatePoints(evaluatedPlayerInput) : 0);\r\n        const color = evaluatedPlayerInput.valid ? 'primary' : 'default';\r\n        return (\r\n            <div className={styles.points_wrapper}>\r\n                <Chip label={label} color={color} classes={{ root: styles.points }} />\r\n                <span className=\"sr-only\">Punkte</span>\r\n            </div>\r\n        );\r\n    };\r\n    /**\r\n     * Shows the player's input for a category. If the player input isn't an empty string, then on the right upper\r\n     * side of the textfield a search link, \"mark as creative\" button and evaluation button are displayed.\r\n     */\r\n    const playerEvaluationElements = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const evaluatedPlayerInput = (finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex];\r\n        const hasPlayerTypedText = !!evaluatedPlayerInput.text;\r\n        const isInputValid = evaluatedPlayerInput.valid;\r\n        const isCreativeAnswer = isInputValid && evaluatedPlayerInput.star;\r\n        const emptyAnswerHint = <span className=\"sr-only\">Leere Antwort wurde automatisch abgelehnt.</span>;\r\n        const answerRejectedHint = <span className=\"sr-only\">Antwort wurde abgelehnt.</span>;\r\n        const markedCreativeHint = <span className=\"sr-only\">Antwort wurde als besonders kreativ markiert.</span>;\r\n        return (\r\n            <div\r\n                key={`slf-answer-box-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                role=\"listitem\"\r\n                className={styles.answer_box_wrapper}\r\n            >\r\n                <Box\r\n                    boxShadow={1}\r\n                    tabIndex={0}\r\n                    className={isCreativeAnswer ? styles.answer_box_creative : styles.answer_box}\r\n                >\r\n\r\n                    <p className={styles.player_name}>\r\n                        <span className=\"sr-only\">Antwort von</span>\r\n                        {evaluatedPlayer.name}\r\n                        <span className=\"sr-only\">:</span>\r\n                    </p>\r\n                    <Divider light aria-hidden=\"true\" />\r\n                    <p\r\n                        className={isInputValid ? styles.answer : styles.invalid_answer}\r\n                        aria-hidden={!hasPlayerTypedText}\r\n                    >\r\n                        {hasPlayerTypedText ? evaluatedPlayerInput.text : '(leer)'}\r\n                        <span className=\"sr-only\">.</span>\r\n                    </p>\r\n                    {!hasPlayerTypedText ? emptyAnswerHint : null}\r\n                    {hasPlayerTypedText && !isInputValid ? answerRejectedHint : null}\r\n                    {isCreativeAnswer ? markedCreativeHint : null}\r\n                    {createPointsChip(evaluatedPlayerInput)}\r\n                </Box>\r\n                <div className={styles.button_wrapper}>\r\n                    {hasPlayerTypedText ? createSearchLink(categoryIndex, indexInSortedPlayers) : null}\r\n                    {isInputValid ? createMarkAsCreativeAnswerToggle(categoryIndex, indexInSortedPlayers) : null}\r\n                    {createEvaluationButton(categoryIndex, indexInSortedPlayers)}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n    /**\r\n     * Creates a section for each category of the current game. It displays the category in the header,\r\n     * followed by one textfield for each player showing their input for the finished round.\r\n     * If the input isn't empty, a search link and clickable evaluation button are displayed.\r\n     */\r\n    const createCategorySection = (category: string, categoryIndex: number): JSX.Element => (\r\n        <div\r\n            key={'slf-evaluation-for-category-no-' + categoryIndex}\r\n            className=\"material-card-style\"\r\n        >\r\n            <h3 className=\"section-header\">{category}</h3>\r\n            <div\r\n                key={'slf-answers-for-category-no-' + categoryIndex}\r\n                role=\"list\"\r\n            >\r\n                {sortedPlayers.map((_, indexInSortedPlayers) => playerEvaluationElements(categoryIndex, indexInSortedPlayers))}\r\n            </div>\r\n        </div>\r\n    );\r\n    const onAcceptEvaluationButtonClick = () => {\r\n        if (!hasFinishedEvaluation) {\r\n            setHasFinishedEvaluation(true);\r\n            props.sendEvaluationFinishedMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip\r\n                currentLetter={currentLetter}\r\n                currentRound={currentRound}\r\n                isEvaluationPhase={true}\r\n                numberOfRounds={gameConfig.numberOfRounds}\r\n            />\r\n            {gameConfig.categories.map(createCategorySection)}\r\n            <div className=\"material-card-style\">\r\n                Bestätigung ausstehend: <span className=\"bold-text\">{notFinishedPlayers.join(', ')}</span>\r\n            </div>\r\n            <IconButton\r\n                type=\"button\"\r\n                className=\"fixed-bottom-right-button\"\r\n                color=\"secondary\"\r\n                title=\"Bestätigen\"\r\n                aria-label=\"Bestätigen\"\r\n                onClick={onAcceptEvaluationButtonClick}\r\n            >\r\n                {hasFinishedEvaluation ? <CheckCircleIcon /> : <RadioButtonUncheckedIcon />}\r\n            </IconButton>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default PhaseEvaluateRound;\r\n","import React from 'react';\r\nimport Countdown, { zeroPad } from 'react-countdown';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        countdown: {\r\n            position: 'fixed',\r\n            right: '1.5rem',\r\n            bottom: '1rem',\r\n            backgroundColor: theme.palette.primary.main,\r\n            color: theme.palette.primary.contrastText,\r\n            padding: '0.5rem 1rem',\r\n            fontSize: '1.5rem',\r\n            boxShadow: '0 2px 4px rgba(0, 0, 0, .401961)',\r\n            borderRadius: '5px',\r\n        },\r\n    }),\r\n);\r\n\r\ninterface RoundCountdownProps {\r\n    /** Duration of countdown in seconds */\r\n    duration: number;\r\n    /** The method to be called when countdown reaches zero */\r\n    onComplete: () => void;\r\n}\r\n\r\nconst RoundCountdown: React.FunctionComponent<RoundCountdownProps> = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Countdown\r\n            date={Date.now() + (props.duration * 1000)}\r\n            renderer={props => (\r\n                <div className={classes.countdown}>\r\n                    {zeroPad(props.minutes)}:{zeroPad(props.seconds)}\r\n                </div>\r\n            )}\r\n            onComplete={props.onComplete}\r\n        />\r\n    );\r\n};\r\n\r\nexport default React.memo(RoundCountdown);\r\n","import { IconButton, InputAdornment, TextField } from '@material-ui/core';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport React, { ChangeEvent } from 'react';\r\n\r\nimport { EndRoundMode, GameConfig, PlayerInput } from '../../models/game.interface';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport RoundCountdown from '../RoundCountdown/RoundCountdown';\r\n\r\ninterface PhaseFillOutTextfieldsProps {\r\n    currentRound: number;\r\n    gameConfig: GameConfig;\r\n    gameRoundInputs: PlayerInput[];\r\n    updateCurrentRoundInputs: (newCurrentRoundInputs: PlayerInput[]) => void;\r\n    finishRoundOnCountdownComplete: () => void;\r\n    finishRoundOnUserAction: () => void;\r\n}\r\n\r\nconst PhaseFillOutTextfields: React.FunctionComponent<PhaseFillOutTextfieldsProps> = props => {\r\n    const { currentRound, gameConfig, gameRoundInputs } = props;\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number) => {\r\n        const newGameRoundInputs = [...gameRoundInputs];\r\n        newGameRoundInputs[index] = { ...newGameRoundInputs[index], text: event.target.value };\r\n        props.updateCurrentRoundInputs(newGameRoundInputs);\r\n    };\r\n    const createTextfieldElement = (category: string, index: number): JSX.Element => {\r\n        const uniqueId = 'slf-input-for-category-no-' + index;\r\n        return (\r\n            <div\r\n                key={uniqueId}\r\n                className=\"material-card-style\"\r\n            >\r\n                <label htmlFor={uniqueId} className=\"section-header\">\r\n                    {category}<span className=\"sr-only\"> mit Buchstabe ({currentLetter})</span>\r\n                </label>\r\n                <TextField\r\n                    value={gameRoundInputs[index].text}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    InputProps={{\r\n                        id: uniqueId,\r\n                        startAdornment: <InputAdornment position=\"start\">{currentLetter}:</InputAdornment>,\r\n                        spellCheck: false\r\n                    }}\r\n                    onChange={event => handleInputChange(event, index)}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n    const endRoundButton = (\r\n        <IconButton\r\n            type=\"button\"\r\n            className=\"fixed-bottom-right-button\"\r\n            color=\"secondary\"\r\n            title=\"Abschicken\"\r\n            aria-label=\"Abschicken\"\r\n            onClick={props.finishRoundOnUserAction}\r\n        >\r\n            <EmailIcon />\r\n        </IconButton>\r\n    );\r\n    const countdownElement = (\r\n        <RoundCountdown\r\n            duration={props.gameConfig.durationOfCountdown}\r\n            onComplete={props.finishRoundOnCountdownComplete}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip\r\n                currentLetter={currentLetter}\r\n                currentRound={currentRound}\r\n                isEvaluationPhase={false}\r\n                numberOfRounds={gameConfig.numberOfRounds}\r\n            />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createTextfieldElement)}\r\n                {gameConfig.endRoundMode === EndRoundMode.countdownEnds ? countdownElement : endRoundButton}\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default PhaseFillOutTextfields;\r\n","import { IconButton, InputAdornment, OutlinedInput } from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport React, { useState } from 'react';\r\n\r\nimport { copyToClipboard } from '../../utils/general.utils';\r\nimport styles from './JoinGameLink.module.css';\r\n\r\ninterface JoinGameLinkProps {\r\n    gameId: string;\r\n    onLinkCopiedToClipboard: () => void;\r\n}\r\n\r\nexport const JoinGameLink: React.FunctionComponent<JoinGameLinkProps> = props => {\r\n    const handleClick = () => {\r\n        copyToClipboard(joinGameLink);\r\n        props.onLinkCopiedToClipboard();\r\n    };\r\n\r\n    const url = window.location.href;\r\n    // Cut off \"/play\" from the end of the url and add route plus game id.\r\n    const joinGameLink = url.slice(0, url.length - 5) + '/joingame?id=' + props.gameId;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p className={styles.link_label}>Teile diesen Link mit Freunden:</p>\r\n            <OutlinedInput\r\n                name=\"idInput\"\r\n                value={joinGameLink}\r\n                className=\"app-form-input\"\r\n                readOnly\r\n                fullWidth\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            title=\"Link zum Spiel kopieren\"\r\n                            aria-label=\"Link zum Spiel kopieren\"\r\n                            onClick={handleClick}\r\n                        >\r\n                            <FileCopyIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n                inputProps={{ tabIndex: -1 }}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport React from 'react';\r\n\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface PlayerListProps {\r\n    players: Map<string, PlayerInfo>;\r\n}\r\nconst PlayerList: React.FunctionComponent<PlayerListProps> = props => {\r\n    const classes = useStyles();\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(props.players);\r\n    return (\r\n        <div className={classes.root} role=\"list\">\r\n            {sortedPlayers.map((playerInfo, index) => (\r\n                <Chip\r\n                    key={`player-name-${index}`}\r\n                    role=\"listitem\"\r\n                    className={classes.chip}\r\n                    icon={<FaceIcon />}\r\n                    color={playerInfo.isAdmin ? 'secondary' : 'primary'}\r\n                    label={playerInfo.isAdmin ? `${playerInfo.name} (Admin)` : playerInfo.name}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerList;\r\n","import './PhaseWaitingToStart.css';\r\n\r\nimport { Button, Divider } from '@material-ui/core';\r\nimport PlayCircleFilled from '@material-ui/icons/PlayCircleFilled';\r\nimport { useSnackbar } from 'notistack';\r\nimport React from 'react';\r\n\r\nimport { MIN_NUMBER_OF_PLAYERS } from '../../constants/game.constant';\r\nimport { EndRoundMode, GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport { JoinGameLink } from '../JoinGameLink/JoinGameLink';\r\nimport PlayerList from '../PlayerList/PlayerList';\r\nimport ScoringOptionsList from '../ScoringOptionsList/ScoringOptionsList';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseWaitingToStartProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig | null;\r\n    gameId: string;\r\n    playerInfo: PlayerInfo;\r\n    informScreenReaderUser: (message: string) => void;\r\n    sendPubNubMessage: (message: PubNubMessage) => void;\r\n}\r\n\r\nconst PhaseWaitingToStart: React.FunctionComponent<PhaseWaitingToStartProps> = props => {\r\n    const { allPlayers, gameId, playerInfo } = props;\r\n    const gameConfig = props.gameConfig as GameConfig;\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const onLinkCopiedToClipboard = () => {\r\n        const message = 'Link zum Spiel wurde in die Zwischenablage kopiert';\r\n        enqueueSnackbar(message, { 'aria-live': 'off' });\r\n        props.informScreenReaderUser(message);\r\n    };\r\n    const waitForGameStartElement = (\r\n        <p className=\"wait-for-start-animation\">Warte auf Spielbeginn <span>.</span><span>.</span><span>.</span></p>\r\n    );\r\n    const getEndRoundDescription = (gameConfig: GameConfig): string => {\r\n        switch (gameConfig.endRoundMode) {\r\n            case EndRoundMode.allPlayersSubmit:\r\n                return 'Wenn alle Spielenden ihre Antworten abgeschickt haben';\r\n            case EndRoundMode.countdownEnds:\r\n                return `Countdown (${gameConfig.durationOfCountdown} Sekunden)`;\r\n            case EndRoundMode.firstPlayerSubmits:\r\n                return 'Schnellster Spieler';\r\n            default:\r\n                return '';\r\n        }\r\n    };\r\n    const createGameSettingsElement = (): JSX.Element => (\r\n        <React.Fragment>\r\n            <Divider />\r\n            <h3>Spieleinstellungen</h3>\r\n            <div className=\"game-settings\">\r\n                <h4>Spiel-ID</h4>\r\n                <p>{props.gameId}</p>\r\n                <h4>Runden</h4>\r\n                <p>{gameConfig.numberOfRounds}</p>\r\n                <h4>Kategorien</h4>\r\n                <p>{gameConfig.categories.join(', ')}</p>\r\n                <h4>Beenden der Runde durch</h4>\r\n                <p>{getEndRoundDescription(gameConfig)}</p>\r\n            </div>\r\n            <ScoringOptionsList isForGameResultsPage={false} rules={gameConfig.scoringOptions} />\r\n        </React.Fragment>\r\n    );\r\n    const createStartGameButton = (): JSX.Element => (\r\n        <div className=\"button-wrapper add-margin-top\">\r\n            <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<PlayCircleFilled />}\r\n                disabled={allPlayers.size < MIN_NUMBER_OF_PLAYERS}\r\n                onClick={() => props.sendPubNubMessage({ type: PubNubMessageType.startGame })}\r\n            >Starten</Button>\r\n        </div>\r\n    );\r\n    const createInvitePlayersElement = (): JSX.Element => (\r\n        <div className=\"material-card-style\">\r\n            <JoinGameLink\r\n                gameId={gameId as string}\r\n                onLinkCopiedToClipboard={onLinkCopiedToClipboard}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"material-card-style\">\r\n                <SectionHeader text=\"Warteraum\"></SectionHeader>\r\n                <div className=\"players-wrapper\">\r\n                    <h3>Mitspieler ({props.allPlayers.size}):</h3>\r\n                    <PlayerList players={props.allPlayers} />\r\n                </div>\r\n                {props.gameConfig ? createGameSettingsElement() : null}\r\n                <Divider />\r\n                {playerInfo.isAdmin ? createStartGameButton() : waitForGameStartElement}\r\n            </div>\r\n            {playerInfo.isAdmin ? createInvitePlayersElement() : null}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default PhaseWaitingToStart;\r\n","import Pubnub from 'pubnub';\r\nimport { usePubNub } from 'pubnub-react';\r\nimport React, { useEffect } from 'react';\r\n\r\nimport { GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubUserState } from '../../models/pub-nub-data.model';\r\n\r\ninterface PubNubEventHandlerProps {\r\n    gameChannel: string; // = Game ID\r\n    gameConfig: GameConfig | null;\r\n    isRejoiningGame: boolean;\r\n    playerInfo: PlayerInfo;\r\n    navigateToJoinGamePage: (errorMessage: string) => void;\r\n    addPlayers: (...newPlayers: PubNubUserState[]) => void;\r\n    processPubNubMessage: (event: Pubnub.MessageEvent) => void;\r\n}\r\n\r\nconst PubNubEventHandler: React.FunctionComponent<PubNubEventHandlerProps> = props => {\r\n    const pubNubClient = usePubNub();\r\n    let hereNowDataTimeout: NodeJS.Timeout;\r\n\r\n    const setUserStateAndGetHereNowIfGameIsOpen = () => {\r\n        pubNubClient.history(\r\n            { channel: props.gameChannel, count: 10 },\r\n            (_, response) => {\r\n                // If a new user wants to join the game but the channel's history already includes messages, then the game\r\n                // has already started and user can't join. They get rerouted to the dashboard page by PlayGame component.\r\n                if (!props.isRejoiningGame && response.messages.length > 0) {\r\n                    props.navigateToJoinGamePage(\r\n                        `Das Spiel mit der ID ${props.gameChannel} wurde bereits gestartet. Du kannst einem laufenden Spiel nicht beitreten!`\r\n                    );\r\n                    return;\r\n                }\r\n                // The hereNow call is used to check total occupancy and retrieve data of already joined players.\r\n                getHereNowData();\r\n                // Only if player is joining game for the first time, set user state and use hereNow safeguard.\r\n                if (!props.isRejoiningGame) {\r\n                    setUserState();\r\n                    // Safeguard against the possibility of two players joining exactly at the same time:\r\n                    // We call hereNowData again after 3 seconds, to make sure we get all player info.\r\n                    hereNowDataTimeout = setTimeout(getHereNowData, 3000);\r\n                }\r\n            }\r\n        );\r\n    };\r\n    const setUserState = () => {\r\n        let newUserState: PubNubUserState;\r\n        if (props.playerInfo.isAdmin) {\r\n            newUserState = { gameConfig: props.gameConfig as GameConfig, playerInfo: props.playerInfo };\r\n        } else {\r\n            newUserState = { playerInfo: props.playerInfo };\r\n        }\r\n        // Set this user's state in game channel.\r\n        pubNubClient.setState({\r\n            channels: [props.gameChannel],\r\n            state: newUserState\r\n        });\r\n    };\r\n    const getUserStatesOfOtherPlayers = (response: Pubnub.HereNowResponse): PubNubUserState[] => {\r\n        const pubNubUserStates: PubNubUserState[] = [];\r\n        const dataForGameChannel = response.channels[props.gameChannel] || [];\r\n        dataForGameChannel.occupants.forEach(occupant => {\r\n            const userState = occupant.state as PubNubUserState;\r\n            // Safeguard in case that a user's state should be missing or corrupted.\r\n            // Only include states of the other players, not of the user themselves.\r\n            if (!!userState && !!userState.playerInfo && userState.playerInfo.id !== props.playerInfo.id) {\r\n                pubNubUserStates.push(userState);\r\n            }\r\n        });\r\n        return pubNubUserStates;\r\n    };\r\n    const getHereNowData = () => {\r\n        pubNubClient.hereNow(\r\n            { channels: [props.gameChannel], includeUUIDs: true, includeState: true },\r\n            (_, response) => {\r\n                console.log('PubNub hereNow', response);\r\n                const userStatesOfOtherPlayers = getUserStatesOfOtherPlayers(response);\r\n                // If the player isn't the game's admin, then there should be at least one other player (= admin) in the channel.\r\n                // Otherwise there is no open game with the game id entered by the user in the JoinGame form.\r\n                // Also, if the player (including the admin) tries to rejoin but they are the only player left in the channel,\r\n                // then the game is already over. In both cases, the user gets rerouted to the dashboard page by PlayGame component.\r\n                if (userStatesOfOtherPlayers.length === 0 && (!props.playerInfo.isAdmin || props.isRejoiningGame)) {\r\n                    props.navigateToJoinGamePage(\r\n                        `Es wurde kein offenes Spiel mit der ID ${props.gameChannel} gefunden!`\r\n                    );\r\n                    return;\r\n                }\r\n                // Only process the information of players that joined before if user isn't rejoining the game.\r\n                // If user is rejoining game, then this information is received via the PubNubDataForCurrentGameMessage.\r\n                if (!props.isRejoiningGame && userStatesOfOtherPlayers.length > 0) {\r\n                    props.addPlayers(...userStatesOfOtherPlayers);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const pubNubListeners: Pubnub.ListenerParameters = {\r\n            message: messageEvent => {\r\n                console.log('PubNub message event', messageEvent);\r\n                // Make sure that message is controlled game message with 'type' attribute.\r\n                if (messageEvent.message.type) {\r\n                    props.processPubNubMessage(messageEvent);\r\n                }\r\n            },\r\n            presence: presenceEvent => {\r\n                console.log('PubNub presence event', presenceEvent);\r\n                // Check for 'state-change' events and process state from new player.\r\n                if (presenceEvent.action === 'state-change') {\r\n                    const userState = presenceEvent.state as PubNubUserState;\r\n                    if (userState.playerInfo.id !== props.playerInfo.id) {\r\n                        props.addPlayers(userState);\r\n                    }\r\n                }\r\n            },\r\n            status: statusEvent => {\r\n                console.log('PubNub status event', statusEvent);\r\n                if (statusEvent.category === 'PNConnectedCategory') {\r\n                    console.log('Player is connected to PubNub game channel');\r\n                    setUserStateAndGetHereNowIfGameIsOpen();\r\n                }\r\n            }\r\n        };\r\n        pubNubClient.addListener(pubNubListeners);\r\n        pubNubClient.subscribe({\r\n            channels: [props.gameChannel],\r\n            withPresence: true\r\n        });\r\n        // When this component is destroyed, we unsubscribe from game channel.\r\n        return () => {\r\n            if (hereNowDataTimeout) {\r\n                clearTimeout(hereNowDataTimeout);\r\n            }\r\n            pubNubClient.removeListener(pubNubListeners);\r\n            pubNubClient.unsubscribeAll();\r\n        };\r\n    });\r\n    return null;\r\n};\r\n\r\nexport default React.memo(PubNubEventHandler);\r\n","import PubNub from 'pubnub';\r\n\r\nimport PUBNUB_KEYS from './pubnub.config.json';\r\n\r\nexport const PUBNUB_CONFIG: PubNub.PubnubConfig = {\r\n    publishKey: PUBNUB_KEYS.publishKey,\r\n    subscribeKey: PUBNUB_KEYS.subscribeKey,\r\n    uuid: undefined, // ⇨ is set by PlayGame component,\r\n    ssl: true\r\n};\r\n","export const CREATED_GAME_ADMIN_MESSAGE = 'Du hast das Spiel erfolgreich erstellt. Teile die Spiel-ID beziehungsweise den Link zum Spiel, damit Mitspieler beitreten können.';\r\nexport const JOINED_GAME_MESSAGE = 'Du bist dem Spiel erfolgreich beigetreten. Sobald der Administrator des Spiels auf Starten klickt, beginnt die erste Runde.';\r\n","import { cloneDeep } from 'lodash';\r\nimport {\r\n    GameConfigScoringOptions,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { calculatePointsForRound, getNumberOfInvalids } from './game.utils';\r\nimport { getRunningGameRoundFromLocalStorage } from './local-storage.utils';\r\n\r\nexport const shouldUserRespondToRequestGameDataMessage = (user: PlayerInfo, allPlayers: Map<string, PlayerInfo>, requestingPlayerId: string): boolean => {\r\n    // User should not respond to their own message.\r\n    if (user.id === requestingPlayerId) { return false; }\r\n    // If user is admin, then they should respond to the message.\r\n    if (user.isAdmin) { return true; }\r\n    // If the requesting user is the admin, then an algorithm determines who of\r\n    // the remaining players is the one to respond to the admin's message.\r\n    const requestingPlayerInfo = allPlayers.get(requestingPlayerId);\r\n    if (requestingPlayerInfo && requestingPlayerInfo.isAdmin) {\r\n        const playersWithoutRequestingPlayer = cloneDeep(allPlayers);\r\n        playersWithoutRequestingPlayer.delete(requestingPlayerId);\r\n        const playersSortedById = Array.from(playersWithoutRequestingPlayer).map(data => data[1]).sort((a, b) => {\r\n            if (a.id < b.id) { return -1; }\r\n            if (a.id > b.id) { return 1; }\r\n            return 0;\r\n        });\r\n        return playersSortedById[0].id === user.id;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n * Transforms the GameRoundEvaluation object from a nested Map into a nested array.\r\n * The order of the players in sortedPlayers defines the order of the information in the arrays.\r\n */\r\nexport const compressGameRoundEvaluation = (gameRoundEvaluation: GameRoundEvaluation, sortedPlayers: PlayerInfo[]): boolean[][][] => {\r\n    const evaluationsAsArrays = new Map<string, boolean[][]>();\r\n    gameRoundEvaluation.forEach((data, playerId) => {\r\n        evaluationsAsArrays.set(playerId, data.map(item => {\r\n            const booleanArray: boolean[] = [];\r\n            sortedPlayers.forEach(player => booleanArray.push(item.get(player.id) as boolean));\r\n            return booleanArray;\r\n        }));\r\n    });\r\n    const compressedGameRoundEvaluation: boolean[][][] = [];\r\n    sortedPlayers.forEach(player => compressedGameRoundEvaluation.push(evaluationsAsArrays.get(player.id) as boolean[][]));\r\n    return compressedGameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Transforms the GameRoundEvaluation object from a nested array into a nested Map.\r\n * The order of the players in sortedPlayers defines the order of the information in the arrays.\r\n */\r\nexport const decompressGameRoundEvaluation = (compressedData: boolean[][][], sortedPlayers: PlayerInfo[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation: GameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    sortedPlayers.forEach((evaluatedPlayer, evaluatedPlayerIndex) => {\r\n        const evaluations: PlayerInputEvaluation[] = compressedData[evaluatedPlayerIndex].map(playerData => {\r\n            const playerInputEvaluation = new Map<string, boolean>();\r\n            sortedPlayers.forEach((evaluatingPlayer, evaluatingPlayerIndex) => playerInputEvaluation.set(evaluatingPlayer.id, playerData[evaluatingPlayerIndex]));\r\n            return playerInputEvaluation;\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluations);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Transforms the GameRoundEvaluation object from a nested Map into a nested array.\r\n * The order of the players in sortedPlayers defines the order of the information in the arrays.\r\n */\r\nexport const compressMarkedAsCreativeFlags = (round: GameRound, sortedPlayers: PlayerInfo[]): boolean[][] => {\r\n    const markedAsCreativeArrays: boolean[][] = [];\r\n    sortedPlayers.forEach(player => {\r\n        const playerInputs = round.get(player.id) as PlayerInput[];\r\n        markedAsCreativeArrays.push(playerInputs.map(input => input.star));\r\n    });\r\n    return markedAsCreativeArrays;\r\n};\r\n\r\nexport const restoreGameRoundsOfRunningGameFromLocalStorage = (numberOfRoundsToRestore: number): GameRound[] => {\r\n    const gameRounds: GameRound[] = [];\r\n    for (let round = 1; round <= numberOfRoundsToRestore; round++) {\r\n        const data = getRunningGameRoundFromLocalStorage(round);\r\n        if (data) {\r\n            gameRounds.push(data);\r\n        }\r\n    }\r\n    return gameRounds;\r\n};\r\n\r\n/**\r\n * Sets points and validity of player inputs for a player who is rejoining the game in evaluation phase.\r\n */\r\nexport const setPointsAndValidity = (\r\n    scoringOptions: GameConfigScoringOptions, gameRoundEvaluation: GameRoundEvaluation, minNumberOfInvalids: number, round: GameRound\r\n): void => {\r\n    // First evaluate validity\r\n    round.forEach((playerInputs, playerId) => {\r\n        const evaluations = gameRoundEvaluation.get(playerId) as PlayerInputEvaluation[];\r\n        playerInputs.forEach((input, categoryIndex) => {\r\n            // Only evaluate validity for originally valid inputs (not empty text inputs).\r\n            if (input.valid) {\r\n                input.valid = getNumberOfInvalids(evaluations[categoryIndex]) < minNumberOfInvalids;\r\n            }\r\n        });\r\n    });\r\n    // Second calculate points\r\n    calculatePointsForRound(scoringOptions, round);\r\n};\r\n\r\n/**\r\n * Applies the \"marked as very creative\" flags to the player inputs for a player who is rejoining the game in evaluation phase.\r\n */\r\nexport const applyMarkedAsCreativeFlags = (compressedData: boolean[][], sortedPlayers: PlayerInfo[], round: GameRound): void => {\r\n    sortedPlayers.forEach((player, playerIndex) => {\r\n        const markedAsCreativeAnswer = compressedData[playerIndex];\r\n        (round.get(player.id) as PlayerInput[]).forEach((input, categoryIndex) => input.star = markedAsCreativeAnswer[categoryIndex]);\r\n    });\r\n};\r\n","import { cloneDeep } from 'lodash';\r\nimport Pubnub from 'pubnub';\r\nimport { PubNubProvider } from 'pubnub-react';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { LiveMessage } from 'react-aria-live';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\n\r\nimport AdminPanel from '../../components/AdminPanel/AdminPanel';\r\nimport { LetterAnimation } from '../../components/LetterAnimation/LetterAnimation';\r\nimport LoadingScreen from '../../components/LoadingScreen/LoadingScreen';\r\nimport PhaseEvaluateRound from '../../components/PhaseEvaluateRound/PhaseEvaluateRound';\r\nimport PhaseFillOutTextfields from '../../components/PhaseFillOutTextfields/PhaseFillOutTextfields';\r\nimport PhaseWaitingToStart from '../../components/PhaseWaitingToStart/PhaseWaitingToStart';\r\nimport PubNubEventHandler from '../../components/PubNubEventHandler/PubNubEventHandler';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { GamePhase } from '../../constants/game.constant';\r\nimport { CREATED_GAME_ADMIN_MESSAGE, JOINED_GAME_MESSAGE } from '../../constants/sr-message.constant';\r\nimport {\r\n    EndRoundMode,\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    IsPlayerInputVeryCreativeStatus,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    PubNubCurrentRoundInputsMessage,\r\n    PubNubDataForCurrentGameMessage,\r\n    PubNubDataForCurrentGameMessagePayload,\r\n    PubNubEvaluationOfPlayerInputMessage,\r\n    PubNubIsPlayerInputVeryCreativeMessage,\r\n    PubNubKickPlayerMessage,\r\n    PubNubMessage,\r\n    PubNubMessageType,\r\n    PubNubUserState,\r\n} from '../../models/pub-nub-data.model';\r\nimport {\r\n    AppAction,\r\n    resetAppState,\r\n    ResetAppStatePayload,\r\n    setDataOfFinishedGame,\r\n    SetDataOfFinishedGamePayload,\r\n} from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport {\r\n    applyMarkedAsCreativeFlags,\r\n    compressGameRoundEvaluation,\r\n    compressMarkedAsCreativeFlags,\r\n    decompressGameRoundEvaluation,\r\n    restoreGameRoundsOfRunningGameFromLocalStorage,\r\n    setPointsAndValidity,\r\n    shouldUserRespondToRequestGameDataMessage,\r\n} from '../../utils/data-restoration.utils';\r\nimport {\r\n    applyValidFlagAndStarFlagToPoints,\r\n    calculatePointsForCategory,\r\n    calculatePointsForRound,\r\n    createGameRoundEvaluation,\r\n    getEmptyRoundInputs,\r\n    getMinNumberOfInvalids,\r\n    getNumberOfInvalids,\r\n    getPlayersInAlphabeticalOrder,\r\n    markEmptyPlayerInputsAsInvalid,\r\n} from '../../utils/game.utils';\r\nimport { convertCollectionToMap, convertMapToCollection } from '../../utils/general.utils';\r\nimport {\r\n    getRunningGameConfigFromLocalStorage,\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setRunningGameConfigInLocalStorage,\r\n    setRunningGameRoundInLocalStorage,\r\n} from '../../utils/local-storage.utils';\r\n\r\ninterface PlayGamePropsFromStore {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string | null;\r\n    isRejoiningGame: boolean;\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n}\r\ninterface PlayGameDispatchProps {\r\n    onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => void;\r\n    onResetAppState: (payload?: ResetAppStatePayload) => void;\r\n}\r\ninterface PlayGameProps extends PlayGamePropsFromStore, PlayGameDispatchProps, RouterProps { }\r\nexport interface PlayGameState {\r\n    a11yMessagePolite: string;\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentPhase: GamePhase;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    currentRoundInputs: PlayerInput[];\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[];\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    playersThatFinishedRound: Map<string, boolean>;\r\n    showLetterAnimation: boolean;\r\n    showLoadingScreen: boolean;\r\n}\r\n\r\nclass PlayGame extends Component<PlayGameProps, PlayGameState> {\r\n    public state: PlayGameState = {\r\n        a11yMessagePolite: '',\r\n        allPlayers: new Map<string, PlayerInfo>(),\r\n        currentPhase: GamePhase.waitingToStart,\r\n        currentRound: 1,\r\n        currentRoundEvaluation: new Map<string, PlayerInputEvaluation[]>(),\r\n        currentRoundInputs: [],\r\n        gameConfig: null,\r\n        gameRounds: [new Map<string, PlayerInput[]>()],\r\n        playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n        playersThatFinishedRound: new Map<string, boolean>(),\r\n        showLetterAnimation: false,\r\n        showLoadingScreen: true\r\n    };\r\n    private pubNubClient: any;\r\n\r\n    public render() {\r\n        // This check serves as a route guard. If gameId and playerInfo aren't present in application state,\r\n        // then the user wasn't redirected here from the NewGame or JoinGame component.\r\n        if (this.props.gameId === null || this.props.playerInfo === null) { return null; }\r\n\r\n        if (!this.pubNubClient) {\r\n            this.pubNubClient = new Pubnub({ ...PUBNUB_CONFIG, uuid: this.props.playerInfo.id });\r\n        }\r\n        const letterAnimationElement = (\r\n            <LetterAnimation\r\n                letterToUnveil={this.state.gameConfig ? this.state.gameConfig.letters[this.state.currentRound - 1] : ''}\r\n                callbackWhenAnimationDone={this.callbackWhenAnimationDone}\r\n            />\r\n        );\r\n        const { allPlayers, currentPhase, gameConfig, showLetterAnimation, showLoadingScreen } = this.state;\r\n        const adminPanel = <AdminPanel allPlayers={allPlayers} kickPlayer={this.sendKickPlayerMessage} />;\r\n        const showWaitingForPlayers = currentPhase === GamePhase.fillOutTextfields\r\n            && (gameConfig && gameConfig.endRoundMode === EndRoundMode.allPlayersSubmit)\r\n            && this.state.playersThatFinishedRound.size !== allPlayers.size;\r\n        const loadingScreenElement = !showWaitingForPlayers ? <LoadingScreen />\r\n            : <LoadingScreen waitingForPlayers={this.getWaitingForPlayers()} />;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PubNubProvider client={this.pubNubClient}>\r\n                    {/* The props passed to PubNubEventHandler must never be changed,\r\n                    in order to ensure that the component is not rerendered!\r\n                    (PubNubEventHandler is wrapped in React.memo) */}\r\n                    <PubNubEventHandler\r\n                        gameChannel={this.props.gameId}\r\n                        gameConfig={this.props.gameConfig}\r\n                        isRejoiningGame={this.props.isRejoiningGame}\r\n                        playerInfo={this.props.playerInfo}\r\n                        navigateToJoinGamePage={this.navigateToJoinGamePage}\r\n                        addPlayers={this.addPlayers}\r\n                        processPubNubMessage={this.processPubNubMessage}\r\n                    />\r\n                    {showLetterAnimation ? letterAnimationElement : null}\r\n                    {showLoadingScreen ? loadingScreenElement : null}\r\n                    {!showLoadingScreen && !showLetterAnimation ? (\r\n                        <div className=\"main-content-wrapper\">\r\n                            {this.createCurrentPhaseElement()}\r\n                        </div>\r\n                    ) : null}\r\n                    {this.props.playerInfo.isAdmin && this.state.allPlayers.size > 1 ? adminPanel : null}\r\n                </PubNubProvider>\r\n                <LiveMessage\r\n                    message={this.state.a11yMessagePolite}\r\n                    aria-live=\"polite\"\r\n                    clearOnUnmount=\"true\"\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { gameConfig, gameId, isRejoiningGame, playerInfo } = this.props;\r\n        // If gameId and playerInfo aren't present in application state, then reroute user to dashboard.\r\n        if (gameId === null || playerInfo === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        // If player is rejoining the game, we need to request the game data from the other players.\r\n        if (isRejoiningGame) {\r\n            this.sendPubNubMessage({ type: PubNubMessageType.requestGameData });\r\n        } else {\r\n            const allPlayers = new Map<string, PlayerInfo>();\r\n            allPlayers.set(playerInfo.id, playerInfo);\r\n            // If user is the game admin, the gameConfig can be taken from application state\r\n            // and we can hide the loading screen and show PhaseWaitingToStart component right away.\r\n            if (playerInfo.isAdmin) {\r\n                setRunningGameConfigInLocalStorage(gameConfig as GameConfig);\r\n                this.setState({ a11yMessagePolite: CREATED_GAME_ADMIN_MESSAGE, allPlayers, gameConfig, showLoadingScreen: false });\r\n            } else {\r\n                this.setState({ allPlayers });\r\n            }\r\n        }\r\n    }\r\n\r\n    private informScreenReaderUser = (message: string) => this.setState({ a11yMessagePolite: message });\r\n\r\n    private sendPubNubMessage = (message: PubNubMessage) => {\r\n        this.pubNubClient.publish(\r\n            {\r\n                channel: this.props.gameId as string,\r\n                message,\r\n                storeInHistory: true,\r\n                ttl: 1 // time to live (in hours)\r\n            },\r\n            (status: any, response: any) => console.log('PubNub Publish:', status, response)\r\n        );\r\n    };\r\n\r\n    private createCurrentPhaseElement = (): JSX.Element | null => {\r\n        switch (this.state.currentPhase) {\r\n            case GamePhase.waitingToStart:\r\n                return (\r\n                    <PhaseWaitingToStart\r\n                        allPlayers={this.state.allPlayers}\r\n                        gameConfig={this.state.gameConfig}\r\n                        gameId={this.props.gameId as string}\r\n                        playerInfo={this.props.playerInfo}\r\n                        informScreenReaderUser={this.informScreenReaderUser}\r\n                        sendPubNubMessage={this.sendPubNubMessage}\r\n                    />\r\n                );\r\n            case GamePhase.fillOutTextfields:\r\n                return (\r\n                    <PhaseFillOutTextfields\r\n                        currentRound={this.state.currentRound}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRoundInputs={this.state.currentRoundInputs}\r\n                        updateCurrentRoundInputs={this.updateCurrentRoundInputs}\r\n                        finishRoundOnCountdownComplete={this.finishRoundOnCountdownComplete}\r\n                        finishRoundOnUserAction={this.finishRoundOnUserAction}\r\n                    />\r\n                );\r\n            case GamePhase.evaluateRound:\r\n                return (\r\n                    <PhaseEvaluateRound\r\n                        allPlayers={this.state.allPlayers}\r\n                        currentRound={this.state.currentRound}\r\n                        currentRoundEvaluation={this.state.currentRoundEvaluation}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRounds={this.state.gameRounds}\r\n                        playerInfo={this.props.playerInfo}\r\n                        playersThatFinishedEvaluation={this.state.playersThatFinishedEvaluation}\r\n                        sendEvaluationFinishedMessage={this.sendEvaluationFinishedMessage}\r\n                        updateEvaluationOfPlayerInput={this.updateEvaluationOfPlayerInput}\r\n                        updateIsPlayerInputVeryCreativeStatus={this.updateIsPlayerInputVeryCreativeStatus}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private callbackWhenAnimationDone = () => {\r\n        const currentLetter = this.state.gameConfig?.letters[this.state.currentRound - 1];\r\n        const a11yMessagePolite = `Runde ${this.state.currentRound}: Buchstabe (${currentLetter})`;\r\n        this.setState({ a11yMessagePolite, showLetterAnimation: false });\r\n    }\r\n\r\n    private navigateToJoinGamePage = (errorMessage: string) => {\r\n        removeAllDataOfRunningGameFromLocalStorage();\r\n        this.props.onResetAppState({ joinGameErrorMessage: errorMessage });\r\n        this.props.history.push('/joingame');\r\n    }\r\n\r\n    /**\r\n     * Called by PubNubEventHandler when it receives a PubNub presence event with action 'state-change'.\r\n     * It processes information about players that had already joined the game before this user joined\r\n     * (hereNow result) or about a player that joins the game after this user joined.\r\n     */\r\n    private addPlayers = (...newPlayers: PubNubUserState[]) => {\r\n        // Ignore information about players that try to join after the game has already started.\r\n        if (this.state.currentPhase !== GamePhase.waitingToStart) { return; }\r\n        let gameConfig: GameConfig | null = null;\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        newPlayers.forEach(newPlayer => {\r\n            allPlayers.set(newPlayer.playerInfo.id, newPlayer.playerInfo);\r\n            // If we are not the game admin, we obtain the game config from the admin's PubNubUserState.\r\n            if (newPlayer.gameConfig && !this.state.gameConfig) {\r\n                gameConfig = newPlayer.gameConfig;\r\n            }\r\n        });\r\n        // Only after we received the gameConfig from the admin, we hide the loading screen\r\n        // and render the PhaseWaitingToStart component instead.\r\n        if (gameConfig) {\r\n            setRunningGameConfigInLocalStorage(gameConfig);\r\n            this.setState({ a11yMessagePolite: JOINED_GAME_MESSAGE, allPlayers, gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with attribute 'type'.\r\n     */\r\n    private processPubNubMessage = (event: Pubnub.MessageEvent) => {\r\n        const message = event.message as PubNubMessage;\r\n        switch (message.type) {\r\n            case PubNubMessageType.startGame:\r\n                this.startGame();\r\n                break;\r\n            case PubNubMessageType.roundFinished:\r\n                this.onRoundFinishedMessage(event.publisher);\r\n                break;\r\n            case PubNubMessageType.currentRoundInputs:\r\n                this.addPlayerInputForFinishedRound(event.publisher, message.payload);\r\n                break;\r\n            case PubNubMessageType.evaluationOfPlayerInput:\r\n                this.processEvaluationOfPlayerInput(event.publisher, message.payload);\r\n                break;\r\n            case PubNubMessageType.isPlayerInputVeryCreative:\r\n                this.processIsPlayerInputVeryCreativeStatus(message.payload);\r\n                break;\r\n            case PubNubMessageType.evaluationFinished:\r\n                this.countPlayerAsEvaluationFinished(event.publisher);\r\n                break;\r\n            case PubNubMessageType.kickPlayer:\r\n                this.removePlayerFromGame(message.payload);\r\n                break;\r\n            case PubNubMessageType.requestGameData:\r\n                if (shouldUserRespondToRequestGameDataMessage(this.props.playerInfo, this.state.allPlayers, event.publisher)) {\r\n                    if (this.state.allPlayers.has(event.publisher)) {\r\n                        // Only send data to a rejoining player who hasn't been kicked out by the admin.\r\n                        this.sendDataForCurrentGame(event.publisher);\r\n                    } else {\r\n                        // Send kickPlayer message again for kicked out player that tried to rejoin game.\r\n                        this.sendKickPlayerMessage(event.publisher);\r\n                    }\r\n                }\r\n                break;\r\n            case PubNubMessageType.dataForCurrentGame:\r\n                this.restoreDataForCurrentGame(message.payload);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    /**\r\n    * This method is called when the PubNub message 'startGame' is received.\r\n    */\r\n    private startGame = () => {\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const currentRoundEvaluation = createGameRoundEvaluation(this.state.allPlayers, gameConfig.categories);\r\n        this.setState({\r\n            a11yMessagePolite: `Spiel beginnt. ${this.state.currentRound}. Buchstabe wird ermittelt.`,\r\n            currentPhase: GamePhase.fillOutTextfields,\r\n            currentRoundEvaluation,\r\n            currentRoundInputs: getEmptyRoundInputs(gameConfig.categories.length),\r\n            showLetterAnimation: true\r\n        });\r\n    }\r\n\r\n    private updateCurrentRoundInputs = (newCurrentRoundInputs: PlayerInput[]) => {\r\n        this.setState({ currentRoundInputs: newCurrentRoundInputs });\r\n    }\r\n\r\n    /**\r\n     * Gets called when the countdown reaches zero (isUserAction = false).\r\n     */\r\n    private finishRoundOnCountdownComplete = () => {\r\n        this.setState({ showLoadingScreen: true });\r\n        // We only want the game admin to send the \"roundFinished\" message once.\r\n        if (this.props.playerInfo.isAdmin) {\r\n            this.sendPubNubMessage({ type: PubNubMessageType.roundFinished });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets called when the user ends the current round.\r\n     */\r\n    private finishRoundOnUserAction = () => {\r\n        const playersThatFinishedRound = cloneDeep(this.state.playersThatFinishedRound);\r\n        playersThatFinishedRound.set(this.props.playerInfo.id, true);\r\n        this.setState({ playersThatFinishedRound, showLoadingScreen: true });\r\n        this.sendPubNubMessage({ type: PubNubMessageType.roundFinished });\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'roundFinished' is received.\r\n     */\r\n    private onRoundFinishedMessage = (playerId: string) => {\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const endRoundPlayer = this.state.allPlayers.get(playerId);\r\n        if (gameConfig.endRoundMode === EndRoundMode.allPlayersSubmit) {\r\n            const playersThatFinishedRound = cloneDeep(this.state.playersThatFinishedRound);\r\n            playersThatFinishedRound.set(playerId, true);\r\n            if (playerId === this.props.playerInfo.id) {\r\n                this.setState({ playersThatFinishedRound });\r\n                this.stopRoundAndSendInputs();\r\n            } else {\r\n                const a11yMessagePolite = `${endRoundPlayer?.name} hat Antworten abgeschickt.`;\r\n                this.setState({ a11yMessagePolite, playersThatFinishedRound });\r\n            }\r\n        } else {\r\n            // In game modes \"countdown\" and \"fastet player\", the round ends for all players right away.\r\n            const message = gameConfig.endRoundMode === EndRoundMode.countdownEnds\r\n                ? `Der Countdown ist abgelaufen. Die Auswertung von Runde ${this.state.currentRound} beginnt.`\r\n                : `${endRoundPlayer?.name} hat Runde ${this.state.currentRound} beendet. Die Auswertung beginnt.`;\r\n            this.informScreenReaderUser(message);\r\n            this.stopRoundAndSendInputs();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send this player's text inputs of current round to other players (and themselves).\r\n     */\r\n    private stopRoundAndSendInputs = () => {\r\n        const message = new PubNubCurrentRoundInputsMessage(markEmptyPlayerInputsAsInvalid(this.state.currentRoundInputs));\r\n        this.sendPubNubMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'currentRoundInputs' is received.\r\n     */\r\n    private addPlayerInputForFinishedRound = (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => {\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        const roundIndex = this.state.currentRound - 1;\r\n        gameRounds[roundIndex].set(playerId, playerInputsForFinishedRound);\r\n        // Did we collect the inputs from all players?\r\n        if (gameRounds[roundIndex].size === this.state.allPlayers.size) {\r\n            // If yes, then calculate points and start the evaluation of the finished round.\r\n            const a11yMessagePolite = `Die ${this.state.currentRound}. Runde ist zu Ende. Wertet nun die Antworten aus.`;\r\n            calculatePointsForRound((this.state.gameConfig as GameConfig).scoringOptions, gameRounds[roundIndex]);\r\n            setRunningGameRoundInLocalStorage(this.state.currentRound, gameRounds[roundIndex]);\r\n            this.setState({ a11yMessagePolite, currentPhase: GamePhase.evaluateRound, gameRounds, showLoadingScreen: false });\r\n        } else {\r\n            // If no, then only store the updated gameRounds object in state.\r\n            this.setState({ gameRounds });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the names of the players that haven't submitted their answers yet.\r\n     */\r\n    private getWaitingForPlayers = (): string[] => {\r\n        const waitingForPlayers: string[] = [];\r\n        getPlayersInAlphabeticalOrder(this.state.allPlayers).forEach(player => {\r\n            if (!this.state.playersThatFinishedRound.has(player.id)) {\r\n                waitingForPlayers.push(player.name);\r\n            }\r\n        });\r\n        return waitingForPlayers;\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate a player input evaluation via a\r\n     * PubNub message. This message is then processed by all players in the game (including the user who sent it).\r\n     */\r\n    private updateEvaluationOfPlayerInput = (newEvaluation: EvaluationOfPlayerInput) => {\r\n        const message = new PubNubEvaluationOfPlayerInputMessage(newEvaluation);\r\n        this.sendPubNubMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'evaluationOfPlayerInput' is received.\r\n     * It processes the new evaluation and changes data in currentRoundEvaluation and gameRounds accordingly.\r\n     */\r\n    private processEvaluationOfPlayerInput = (evaluatorId: string, newEvaluation: EvaluationOfPlayerInput) => {\r\n        if (!this.state.allPlayers.has(evaluatorId)) { return; }\r\n        const { categoryIndex, evaluatedPlayerId, markedAsValid } = newEvaluation;\r\n\r\n        // Update data with evaluation\r\n        const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n        const playerInputEvaluations = currentRoundEvaluation.get(evaluatedPlayerId) as PlayerInputEvaluation[];\r\n        playerInputEvaluations[categoryIndex].set(evaluatorId, markedAsValid);\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        const isInputValid = getNumberOfInvalids(playerInputEvaluations[categoryIndex]) < getMinNumberOfInvalids(this.state.allPlayers.size);\r\n        const finishedRound = gameRounds[this.state.currentRound - 1];\r\n        const playerInput = (finishedRound.get(evaluatedPlayerId) as PlayerInput[])[categoryIndex];\r\n        playerInput.valid = isInputValid;\r\n        calculatePointsForCategory((this.state.gameConfig as GameConfig).scoringOptions, finishedRound, categoryIndex);\r\n\r\n        // Inform screen reader users\r\n        const evaluatorName = this.state.allPlayers.get(evaluatorId)?.name;\r\n        const evaluatedName = this.state.allPlayers.get(evaluatedPlayerId)?.name;\r\n        const action = markedAsValid ? 'akzeptiert' : 'abgelehnt';\r\n        const category = this.state.gameConfig?.categories[categoryIndex];\r\n        const a11yMessagePolite = `${evaluatorName} hat Antwort ${playerInput.text} von ${evaluatedName} in Kategorie ${category} ${action}.`;\r\n\r\n        this.setState({ a11yMessagePolite, currentRoundEvaluation, gameRounds });\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate the \"marked as very creative\" status of a player input\r\n     * via a PubNub message. This message is then processed by all players in the game (including the user who sent it).\r\n     */\r\n    private updateIsPlayerInputVeryCreativeStatus = (newStatus: IsPlayerInputVeryCreativeStatus) => {\r\n        const message = new PubNubIsPlayerInputVeryCreativeMessage(newStatus);\r\n        this.sendPubNubMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'isPlayerInputVeryCreative' is received.\r\n     * It processes the new status and changes data in gameRounds accordingly.\r\n     */\r\n    private processIsPlayerInputVeryCreativeStatus = (newStatus: IsPlayerInputVeryCreativeStatus) => {\r\n        const { categoryIndex, evaluatedPlayerId, markedAsCreative } = newStatus;\r\n\r\n        // Update data with new status\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        const finishedRound = gameRounds[this.state.currentRound - 1];\r\n        const playerInput = (finishedRound.get(evaluatedPlayerId) as PlayerInput[])[categoryIndex];\r\n        playerInput.star = markedAsCreative;\r\n        \r\n        // Inform screen reader users\r\n        const evaluatedPlayerName = this.state.allPlayers.get(evaluatedPlayerId)?.name;\r\n        const action = markedAsCreative ? 'bewertet' : 'abgelehnt';\r\n        const category = this.state.gameConfig?.categories[categoryIndex];\r\n        const a11yMessagePolite = `Antwort ${playerInput.text} von ${evaluatedPlayerName} in Kategorie ${category} wurde als besonders kreativ ${action}.`;\r\n\r\n        this.setState({ a11yMessagePolite, gameRounds });\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate to all players\r\n     * that the user of this instance of the game has finished evaluating the current round.\r\n     */\r\n    private sendEvaluationFinishedMessage = () => this.sendPubNubMessage({ type: PubNubMessageType.evaluationFinished });\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'evaluationFinished' is received.\r\n     */\r\n    private countPlayerAsEvaluationFinished = (playerId: string) => {\r\n        const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n        playersThatFinishedEvaluation.set(playerId, true);\r\n        if (playersThatFinishedEvaluation.size === this.state.allPlayers.size) {\r\n            this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n        } else {\r\n            const a11yMessagePolite = `${this.state.allPlayers.get(playerId)?.name} hat die Auswertung der Antworten bestätigt.`;\r\n            this.setState({ a11yMessagePolite, playersThatFinishedEvaluation });\r\n        }\r\n    }\r\n\r\n    private processEvaluationsAndStartNextRoundOrFinishGame = () => {\r\n        const { allPlayers, currentRound } = this.state;\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        applyValidFlagAndStarFlagToPoints(gameConfig.scoringOptions, gameRounds[currentRound - 1]);\r\n        if (currentRound === gameConfig.numberOfRounds) {\r\n            // Finish game and show results.\r\n            removeAllDataOfRunningGameFromLocalStorage();\r\n            this.props.onSetDataOfFinishedGame({ allPlayers, gameConfig, gameRounds });\r\n            this.props.history.push('/results');\r\n        } else {\r\n            // Save finished game round in local storage and start next round of the game.\r\n            setRunningGameRoundInLocalStorage(this.state.currentRound, gameRounds[currentRound - 1]);\r\n            const nextRound = currentRound + 1;\r\n            this.setState({\r\n                a11yMessagePolite: `Auswertung beendet. Buchstabe für ${nextRound}. Runde wird ermittelt.`,\r\n                currentPhase: GamePhase.fillOutTextfields,\r\n                currentRoundEvaluation: createGameRoundEvaluation(allPlayers, gameConfig.categories),\r\n                currentRoundInputs: getEmptyRoundInputs(gameConfig.categories.length),\r\n                currentRound: nextRound,\r\n                gameRounds: [...gameRounds, new Map<string, PlayerInput[]>()],\r\n                playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n                playersThatFinishedRound: new Map<string, boolean>(),\r\n                showLetterAnimation: true\r\n            });\r\n        }\r\n    }\r\n\r\n    private sendKickPlayerMessage = (playerId: string) => {\r\n        const message = new PubNubKickPlayerMessage(playerId);\r\n        this.sendPubNubMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'kickPlayer' is received.\r\n     */\r\n    private removePlayerFromGame = (playerId: string) => {\r\n        // If the player to be removed is the user of this game instance, then navigate to dashboard.\r\n        if (this.props.playerInfo.id === playerId) {\r\n            removeAllDataOfRunningGameFromLocalStorage();\r\n            this.props.onResetAppState();\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        if (this.state.allPlayers.has(playerId)) {\r\n            // Remove player's data from component's state.\r\n            const allPlayers = cloneDeep(this.state.allPlayers);\r\n            allPlayers.delete(playerId);\r\n            const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n            currentRoundEvaluation.delete(playerId);\r\n            const gameRounds = cloneDeep(this.state.gameRounds);\r\n            gameRounds.forEach(round => round.delete(playerId));\r\n            const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n            playersThatFinishedEvaluation.delete(playerId);\r\n            this.setState({ allPlayers, currentRoundEvaluation, gameRounds, playersThatFinishedEvaluation });\r\n            // If we're currently in evaluation phase, check if remaining players have finished evaluation.\r\n            if (this.state.currentPhase === GamePhase.evaluateRound && playersThatFinishedEvaluation.size === allPlayers.size) {\r\n                this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n            }\r\n        }\r\n    }\r\n\r\n    private sendDataForCurrentGame = (requestingPlayerId: string) => {\r\n        const { allPlayers, currentPhase, currentRound, currentRoundEvaluation, gameRounds } = this.state;\r\n        const sortedPlayers = getPlayersInAlphabeticalOrder(allPlayers);\r\n        const compressedGameRoundEvaluation = currentPhase === GamePhase.evaluateRound\r\n            ? compressGameRoundEvaluation(currentRoundEvaluation, sortedPlayers) : [];\r\n        const compressedMarkedAsCreativeFlags = currentPhase === GamePhase.evaluateRound\r\n            ? compressMarkedAsCreativeFlags(gameRounds[currentRound - 1], sortedPlayers) : [];\r\n        const message = new PubNubDataForCurrentGameMessage({\r\n            compressedGameRoundEvaluation,\r\n            compressedMarkedAsCreativeFlags,\r\n            currentPhase,\r\n            currentRound,\r\n            playersThatFinishedEvaluation: convertMapToCollection<boolean>(this.state.playersThatFinishedEvaluation),\r\n            requestingPlayerId,\r\n            sortedPlayers\r\n        });\r\n        this.sendPubNubMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'dataForCurrentGame' is received.\r\n     */\r\n    private restoreDataForCurrentGame = (payload: PubNubDataForCurrentGameMessagePayload) => {\r\n        // Only process the information and update state if the message was meant for this user.\r\n        if (this.props.playerInfo.id !== payload.requestingPlayerId) { return; }\r\n\r\n        const gameConfig = getRunningGameConfigFromLocalStorage();\r\n        // If we're in the evaluation phase, then we also need to restore the data for the current round.\r\n        // Otherwise we only need to restore the data of the finished rounds.\r\n        const numberOfRoundsToRestore = payload.currentPhase === GamePhase.evaluateRound ? payload.currentRound : payload.currentRound - 1;\r\n        const gameRounds = restoreGameRoundsOfRunningGameFromLocalStorage(numberOfRoundsToRestore);\r\n        if (gameConfig && gameRounds.length === numberOfRoundsToRestore) {\r\n            const allPlayers = new Map<string, PlayerInfo>();\r\n            payload.sortedPlayers.forEach(player => allPlayers.set(player.id, player));\r\n            let currentRoundEvaluation: GameRoundEvaluation;\r\n            // If we are in evaluation phase, then we received the current evaluations and the\r\n            // \"marked as very creative\" data, which we need to apply to the player inputs.\r\n            if (payload.currentPhase === GamePhase.evaluateRound) {\r\n                const round = gameRounds[payload.currentRound - 1];\r\n                currentRoundEvaluation = decompressGameRoundEvaluation(payload.compressedGameRoundEvaluation, payload.sortedPlayers);\r\n                setPointsAndValidity(gameConfig.scoringOptions, currentRoundEvaluation, getMinNumberOfInvalids(allPlayers.size), round);\r\n                applyMarkedAsCreativeFlags(payload.compressedMarkedAsCreativeFlags, payload.sortedPlayers, round);\r\n            } else {\r\n                // If not in evaluation phase, we need to prepare a GameRound and GameRoundEvaluation object for the current round.\r\n                gameRounds.push(new Map<string, PlayerInput[]>());\r\n                currentRoundEvaluation = createGameRoundEvaluation(allPlayers, gameConfig.categories);\r\n            }\r\n            this.setState({\r\n                allPlayers,\r\n                currentPhase: payload.currentPhase,\r\n                currentRound: payload.currentRound,\r\n                currentRoundEvaluation,\r\n                currentRoundInputs: getEmptyRoundInputs(gameConfig.categories.length),\r\n                gameConfig,\r\n                gameRounds,\r\n                playersThatFinishedEvaluation: convertCollectionToMap<boolean>(payload.playersThatFinishedEvaluation),\r\n                showLoadingScreen: false\r\n            });\r\n        } else {\r\n            console.log('Error: Can\\'t restore game session because data is missing in local storage!');\r\n            this.navigateToJoinGamePage('Die Rückkehr in das laufende Spiel ist nicht möglich, da die Daten nicht wiederhergestellt werden konnten!');\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): PlayGamePropsFromStore => {\r\n    return {\r\n        gameConfig: state.gameConfig,\r\n        gameId: state.gameId,\r\n        isRejoiningGame: state.isRejoiningGame,\r\n        playerInfo: state.playerInfo as PlayerInfo\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): PlayGameDispatchProps => {\r\n    return {\r\n        onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => dispatch(setDataOfFinishedGame(payload)),\r\n        onResetAppState: (payload?: ResetAppStatePayload) => dispatch(resetAppState(payload))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);\r\n"],"sourceRoot":""}