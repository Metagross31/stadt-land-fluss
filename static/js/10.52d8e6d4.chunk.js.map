{"version":3,"sources":["utils/game.utils.ts","models/game.interface.ts","components/ScoringOptionsList/ScoringOptionsList.tsx","components/PhaseEvaluateRound/PhaseEvaluateRound.module.css","components/JoinGameLink/JoinGameLink.module.css","models/pub-nub-data.model.ts","components/AdminPanel/AdminPanel.tsx","components/LetterAnimation/LetterAnimation.tsx","components/GameRoundChip/GameRoundChip.tsx","components/PhaseEvaluateRound/PhaseEvaluateRound.tsx","components/RoundCountdown/RoundCountdown.tsx","components/PhaseFillOutTextfields/PhaseFillOutTextfields.tsx","components/JoinGameLink/JoinGameLink.tsx","components/PlayerList/PlayerList.tsx","components/PhaseWaitingToStart/PhaseWaitingToStart.tsx","components/PubNubEventHandler/PubNubEventHandler.tsx","config/pubnub.config.ts","utils/data-restoration.utils.ts","containers/PlayGame/PlayGame.tsx"],"names":["getRandomLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToSelectFrom","i","randomnLetter","randomnItem","push","filter","letter","getRandomCategories","numberOfCategories","categoryPool","preselectedCategories","randomCategories","numberOfRandomSelections","categoriesToSelectFrom","category","includes","randomCategory","c","getPlayersInAlphabeticalOrder","players","Array","from","map","data","sort","a","b","name","toLowerCase","getEmptyRoundInputs","numberOfInputs","createAndFillArray","points","STANDARD_POINTS","star","text","valid","markEmptyPlayerInputsAsInvalid","playerInputs","input","trim","createGameRoundEvaluation","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","evaluationForOneCategory","evaluatingPlayer","set","id","calculatePointsForRound","scoringOptions","round","checkForDuplicates","onlyPlayerWithValidAnswer","playerId","keys","next","value","playerInputsOfPlayer1","get","categoryIndex","calculatePointsForCategory","isOnlyPlayerWithValidAnswer","ONLY_ANSWER_POINTS","isDuplicateOfOtherPlayersInput","SAME_WORD_POINTS","otherPlayersIds","isOnlyPlayer","playerInputText","replace","some","otherPlayersInput","getMinNumberOfInvalids","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","getRejectingPlayers","rejectingPlayers","playerInfo","applyValidFlagAndStarFlagToPoints","creativeAnswersExtraPoints","EXTRA_POINTS","calculateGameResults","allPlayers","gameRounds","gameResults","pointsPerPlayer","playerName","reduce","total","Object","createHallOfFameData","gameConfig","hallOfFameData","playerInput","GameOption","EndRoundMode","ScoringOptionsList","props","rules","Fragment","className","GAME_OPTION_LABEL","module","exports","PubNubMessageType","useStyles","makeStyles","adminPanel","position","top","right","menuButton","background","dialogContent","maxWidth","dialogContentText","color","KickUserDialog","classes","onClose","open","Dialog","DialogContent","root","playerToBeKicked","DialogContentText","DialogActions","Button","type","onClick","AdminPanel","useState","anchorEl","setAnchorEl","openDialog","setOpenDialog","setPlayerToBeKicked","otherPlayers","isAdmin","sortedPlayers","IconButton","title","aria-label","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","Boolean","playerIndex","MenuItem","selectedPlayer","ListItemIcon","ListItemText","primary","kickPlayer","Particle","x","y","radius","ctx","save","translate","this","fillStyle","fillRect","restore","ParticleAlphabet","letters","callbackWhenAnimationDone","canvas","currentPos","width","height","particlePositions","particles","tmpCanvas","tmpCtx","time","counter","myInterval","activeTheme","animate","requestAnimationFrame","animationBackgroundColor","animateParticles","document","querySelector","getContext","mainElement","AppThemes","find","theme","classList","contains","offsetWidth","offsetHeight","createElement","setInterval","changeLetter","getPixels","clearInterval","LETTER_ANIMATION_REDRAW_SPEED","makeParticles","num","Math","random","keyword","window","innerWidth","innerHeight","font","fillText","measureText","idata","getImageData","buffer32","Uint32Array","buffer","p","pPos","indexOf","draw","LetterAnimation","lettersToUse","STANDARD_ALPHABET","letterToUnveil","lettersForAnimation","LETTER_ANIMATION_LETTER_COUNT","useEffect","init","centerContent","display","justifyContent","chip","marginBottom","marginTop","borderRadius","fontWeight","fontSize","boxShadow","GameRoundChip","currentLetter","currentRound","numberOfRounds","Chip","component","icon","label","StyledBadge","withStyles","createStyles","badge","border","palette","paper","padding","Badge","PhaseEvaluateRound","playersThatFinishedEvaluation","has","hasFinishedEvaluation","setHasFinishedEvaluation","isSnackbarOpen","setIsSnackbarOpen","snackBarMessage","setSnackBarMessage","currentRoundEvaluation","finishedRound","notFinishedPlayers","player","showSnackBar","message","createEvaluationButton","indexInSortedPlayers","evaluationForCategory","isInputAcceptedByUser","tooltipText","join","hasPlayerTypedText","evaluationButtonForTypedText","Tooltip","size","evaluatedPlayerId","currentEvaluation","updateEvaluationOfPlayerInput","handleEvaluationButtonClick","badgeContent","autoRejectIconForMissingText","styles","auto_reject_icon","createSearchLink","searchLink","encodeURIComponent","search_link","href","target","rel","placement","createMarkAsCreativeAnswerToggle","isMarkedAsCreative","updateIsPlayerInputVeryCreativeStatus","markedAsCreative","handleMarkAsCreativeAnswerToggleClick","createPointsChip","evaluatedPlayerInput","calculatePoints","points_wrapper","SectionHeader","isH3","showDivider","_","isInputValid","isCreativeAnswer","Box","textfield_wrapper_creative","textfield_wrapper","player_name","Divider","light","answer","invalid_answer","button_wrapper","playerEvaluationElements","sendEvaluationFinishedMessage","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","countdown","bottom","backgroundColor","main","contrastText","RoundCountdown","date","Date","now","duration","renderer","zeroPad","minutes","seconds","onComplete","React","memo","PhaseFillOutTextfields","gameRoundInputs","endRoundButton","finishRoundOnUserAction","countdownElement","durationOfCountdown","finishRoundOnCountdownComplete","noValidate","autoComplete","index","TextField","onChange","newGameRoundInputs","updateCurrentRoundInputs","handleInputChange","variant","fullWidth","InputProps","startAdornment","InputAdornment","spellCheck","endRoundMode","countdownEnds","PubNubCurrentRoundInputsMessage","payload","currentRoundInputs","PubNubEvaluationOfPlayerInputMessage","evaluationOfPlayerInput","PubNubIsPlayerInputVeryCreativeMessage","isPlayerInputVeryCreative","PubNubKickPlayerMessage","PubNubDataForCurrentGameMessage","dataForCurrentGame","JoinGameLink","setOpen","url","location","joinGameLink","slice","gameId","link_label","OutlinedInput","disabled","endAdornment","copyToClipboard","flexWrap","spacing","margin","PlayerList","PhaseWaitingToStart","waitForGameStartElement","getEndRoundDescription","allPlayersSubmit","firstPlayerSubmits","startIcon","MIN_NUMBER_OF_PLAYERS","sendMessage","startGame","PubNubEventHandler","pubNubClient","usePubNub","setUserState","newUserState","setState","channels","gameChannel","state","getHereNowData","hereNow","includeUUIDs","includeState","response","console","log","isRejoiningGame","totalOccupancy","navigateToDashboard","dataForGameChannel","pubNubUserStates","occupants","occupant","userState","addPlayers","pubNubListeners","messageEvent","processPubNubMessage","presence","presenceEvent","action","status","statusEvent","history","channel","messages","setTimeout","addListener","subscribe","withPresence","removeListener","unsubscribeAll","PUBNUB_CONFIG","publishKey","PUBNUB_KEYS","subscribeKey","uuid","undefined","ssl","shouldUserRespondToRequestGameDataMessage","user","requestingPlayerId","requestingPlayerInfo","playersWithoutRequestingPlayer","cloneDeep","delete","compressGameRoundEvaluation","evaluationsAsArrays","item","booleanArray","compressedGameRoundEvaluation","decompressGameRoundEvaluation","compressedData","evaluatedPlayerIndex","playerData","playerInputEvaluation","evaluatingPlayerIndex","compressMarkedAsCreativeFlags","markedAsCreativeArrays","restoreGameRoundsOfRunningGameFromLocalStorage","numberOfRoundsToRestore","getRunningGameRoundFromLocalStorage","setPointsAndValidity","minNumberOfInvalids","applyMarkedAsCreativeFlags","markedAsCreativeAnswer","PlayGame","currentPhase","GamePhase","waitingToStart","playersThatFinishedRound","showLetterAnimation","showLoadingScreen","publish","storeInHistory","ttl","createCurrentPhaseElement","fillOutTextfields","evaluateRound","removeAllDataOfRunningGameFromLocalStorage","onResetAppState","getWaitingForPlayers","waitingForPlayers","newPlayers","newPlayer","setRunningGameConfigInLocalStorage","roundFinished","publisher","stopRoundAndSendInputs","addPlayerInputForFinishedRound","processEvaluationOfPlayerInput","processIsPlayerInputVeryCreativeStatus","evaluationFinished","countPlayerAsEvaluationFinished","removePlayerFromGame","requestGameData","sendDataForCurrentGame","sendKickPlayerMessage","restoreDataForCurrentGame","newCurrentRoundInputs","toPubNubMessage","playerInputsForFinishedRound","roundIndex","setRunningGameRoundInLocalStorage","newEvaluation","evaluatingPlayerId","playerInputEvaluations","newStatus","processEvaluationsAndStartNextRoundOrFinishGame","onSetDataOfFinishedGame","compressedMarkedAsCreativeFlags","convertMapToCollection","getRunningGameConfigFromLocalStorage","convertCollectionToMap","Pubnub","letterAnimationElement","loadingScreenElement","LoadingScreen","client","Component","connect","dispatch","setDataOfFinishedGame","resetAppState"],"mappings":"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","file":"static/js/10.52d8e6d4.chunk.js","sourcesContent":["import { some } from 'lodash';\r\nimport randomnItem from 'random-item';\r\nimport { ONLY_ANSWER_POINTS, SAME_WORD_POINTS, STANDARD_POINTS } from '../constants/game.constant';\r\nimport { Collection } from '../models/collection.interface';\r\nimport { GameConfigScoringOptions, PlayerInput, HallOfFameEntry } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { EXTRA_POINTS } from './../constants/game.constant';\r\nimport { GameResultForPlayer, GameRound, GameRoundEvaluation, PlayerInputEvaluation, GameConfig } from './../models/game.interface';\r\nimport { createAndFillArray } from './general.utils';\r\n\r\n/**\r\n* Returns an array of randomly selected, unique letters.\r\n*/\r\nexport const getRandomLetters = (numberOfLetters: number, possibleLetters: string[]): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToSelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToSelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToSelectFrom = lettersToSelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\n/**\r\n* Returns an array of randomly selected categories.\r\n*/\r\nexport const getRandomCategories = (\r\n    numberOfCategories: number, categoryPool: string[], preselectedCategories: string[]\r\n): string[] => {\r\n    const randomCategories: string[] = [...preselectedCategories];\r\n    const numberOfRandomSelections = numberOfCategories - preselectedCategories.length;\r\n    let categoriesToSelectFrom = categoryPool.filter(category => !preselectedCategories.includes(category));\r\n    for (let i = 0; i < numberOfRandomSelections; i++) {\r\n        const randomCategory = randomnItem(categoriesToSelectFrom);\r\n        randomCategories.push(randomCategory);\r\n        categoriesToSelectFrom = categoriesToSelectFrom.filter(c => c !== randomCategory);\r\n    }\r\n    return randomCategories;\r\n};\r\n\r\nexport const getPlayersInAlphabeticalOrder = (players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const playerInfoArray = Array.from(players).map(data => data[1]);\r\n    return playerInfoArray.sort((a, b) => {\r\n        if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\r\n        if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\r\n        return 0;\r\n    });\r\n};\r\n\r\n/**\r\n * Returns an array of PlayerInput objects with empty strings and default settings (isMarkedCreative=false, valid=true, standard points).\r\n */\r\nexport const getEmptyRoundInputs = (numberOfInputs: number): PlayerInput[] => {\r\n    return createAndFillArray<PlayerInput>(numberOfInputs, { points: STANDARD_POINTS, star: false, text: '', valid: true });\r\n};\r\n\r\n/**\r\n* Checks each PlayerInput object whether it contains text.\r\n* If text string is empty, valid is set to false, otherwise to true.\r\n* The text is also trimmed in order to support correct scoring (finding duplicates).\r\n*/\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => ({ ...input, text: input.text.trim(), valid: !!input.text }));\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(() => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs according to the active scoring options.\r\n */\r\nexport const calculatePointsForRound = (scoringOptions: GameConfigScoringOptions, round: GameRound): void => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    const playerId = round.keys().next().value;\r\n    const playerInputsOfPlayer1 = round.get(playerId) as PlayerInput[];\r\n    // Loop through all categories.\r\n    for (let categoryIndex = 0; categoryIndex < playerInputsOfPlayer1.length; categoryIndex++) {\r\n        calculatePointsForCategory(scoringOptions, round, categoryIndex);\r\n    }\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs for one category according to the active scoring options.\r\n */\r\nexport const calculatePointsForCategory = (scoringOptions: GameConfigScoringOptions, round: GameRound, categoryIndex: number): void => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    Array.from(round.keys()).forEach(playerId => {\r\n        const playerInputs = round.get(playerId) as PlayerInput[];\r\n        // Only check valid inputs.\r\n        if (playerInputs[categoryIndex].valid) {\r\n            if (scoringOptions.onlyPlayerWithValidAnswer && isOnlyPlayerWithValidAnswer(playerId, round, categoryIndex)) {\r\n                playerInputs[categoryIndex].points = ONLY_ANSWER_POINTS;\r\n            } else {\r\n                if (scoringOptions.checkForDuplicates && isDuplicateOfOtherPlayersInput(playerId, round, categoryIndex)) {\r\n                    playerInputs[categoryIndex].points = SAME_WORD_POINTS;\r\n                } else {\r\n                    playerInputs[categoryIndex].points = STANDARD_POINTS;\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport const isOnlyPlayerWithValidAnswer = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    let isOnlyPlayer = true;\r\n    otherPlayersIds.forEach(id => isOnlyPlayer = isOnlyPlayer && !(round.get(id) as PlayerInput[])[categoryIndex].valid);\r\n    return isOnlyPlayer;\r\n};\r\n\r\n/**\r\n * Returns true if a duplicate (removes all non-alphanumeric characters for comparison) for playerId's input was found.\r\n */\r\nexport const isDuplicateOfOtherPlayersInput = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    const playerInputText = (round.get(playerId) as PlayerInput[])[categoryIndex].text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    return some(otherPlayersIds, id => {\r\n        const otherPlayersInput = (round.get(id) as PlayerInput[])[categoryIndex];\r\n        return otherPlayersInput.valid && playerInputText === otherPlayersInput.text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n    });\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfInvalids = (numberOfPlayers: number): number => {\r\n    return numberOfPlayers <= 3 ? 1 : 2;\r\n};\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\n/**\r\n * Returns the players that marked the input as invalid in alphabetical order. Parameters:\r\n * - evaluations: Evaluations of all players for one player's input for one category.\r\n * - players: All players taking part in the running game of \"Stadt-Land-Fluss\".\r\n */\r\nexport const getRejectingPlayers = (evaluations: PlayerInputEvaluation, players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const rejectingPlayers = new Map<string, PlayerInfo>();\r\n    evaluations.forEach((markedAsValid, playerId) => {\r\n        if (!markedAsValid) {\r\n            const playerInfo = players.get(playerId);\r\n            if (playerInfo) {\r\n                rejectingPlayers.set(playerId, playerInfo);\r\n            }\r\n        }\r\n    });\r\n    return getPlayersInAlphabeticalOrder(rejectingPlayers);\r\n};\r\n\r\n/**\r\n * Adds extra points for \"very creative answers\" if scoring option is active\r\n * and sets invalid answer's points to zero.\r\n */\r\nexport const applyValidFlagAndStarFlagToPoints = (scoringOptions: GameConfigScoringOptions, round: GameRound): void => {\r\n    round.forEach(playerInputs => {\r\n        playerInputs.forEach(input => {\r\n            if (!input.valid) {\r\n                input.points = 0;\r\n            } else if (scoringOptions.creativeAnswersExtraPoints && input.star) {\r\n                input.points = input.points + EXTRA_POINTS;\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Calculates game results and sorts them by points in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultForPlayer[] => {\r\n    const gameResults: GameResultForPlayer[] = [];\r\n    const pointsPerPlayer: Collection<GameResultForPlayer> = {};\r\n    allPlayers.forEach((playerInfo, playerId) => pointsPerPlayer[playerId] = { playerName: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const points = playerInputs.reduce((total, input) => total + input.points, 0);\r\n            pointsPerPlayer[playerId].points += points;\r\n        });\r\n    });\r\n    Object.keys(pointsPerPlayer).forEach(playerId => gameResults.push(pointsPerPlayer[playerId]));\r\n    return gameResults.sort((a, b) => b.points - a.points);\r\n};\r\n\r\n/**\r\n * Creates a list of entries for the \"Hall of Fame\", the list of answers marked as \"very creative\".\r\n */\r\nexport const createHallOfFameData = (allPlayers: Map<string, PlayerInfo>, gameConfig: GameConfig, gameRounds: GameRound[]): HallOfFameEntry[] => {\r\n    const hallOfFameData: HallOfFameEntry[] = [];\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const playerInfo = allPlayers.get(playerId) as PlayerInfo;\r\n            playerInputs.forEach((playerInput, categoryIndex) => {\r\n                if (playerInput.valid && playerInput.star) {\r\n                    hallOfFameData.push({\r\n                        category: gameConfig.categories[categoryIndex],\r\n                        playerName: playerInfo.name,\r\n                        text: playerInput.text\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n    return hallOfFameData;\r\n};\r\n","export enum GameOption {\r\n    checkForDuplicates = 'checkForDuplicates',\r\n    creativeAnswersExtraPoints = 'creativeAnswersExtraPoints',\r\n    onlyPlayerWithValidAnswer = 'onlyPlayerWithValidAnswer',\r\n}\r\n\r\nexport interface GameConfigScoringOptions {\r\n    [GameOption.checkForDuplicates]: boolean;\r\n    [GameOption.creativeAnswersExtraPoints]: boolean;\r\n    [GameOption.onlyPlayerWithValidAnswer]: boolean;\r\n}\r\n\r\nexport enum EndRoundMode {\r\n    /**\r\n     * All players have to click \"Finish round\" to end the round.\r\n     */\r\n    allPlayersSubmit = 'allPlayers',\r\n    /**\r\n     * Use a countdown that determines how much time each player has\r\n     * to fill out the text fields in one round of the game.\r\n     */\r\n    countdownEnds = 'countdownEnds',\r\n    /**\r\n     * The first player to click \"Finish round\" ends the round.\r\n     */\r\n    firstPlayerSubmits = 'firstPlayer',\r\n}\r\n\r\nexport interface GameConfig {\r\n    categories: string[];\r\n    durationOfCountdown: number;\r\n    endRoundMode: EndRoundMode;\r\n    letters: string[];\r\n    numberOfRounds: number;\r\n    scoringOptions: GameConfigScoringOptions;\r\n}\r\n\r\nexport interface StoredRunningGameInfo {\r\n    /** Version 4 UUID */\r\n    gameId: string;\r\n    /** UNIX timestamp */\r\n    idCreationTimestamp: number;\r\n    isPlayerAdmin: boolean;\r\n}\r\n\r\n/**\r\n * Represents a player's input for one category in one round of the game.\r\n */\r\nexport interface PlayerInput {\r\n    /** The points the player gains with this input if it is valid */\r\n    points: number;\r\n    /** Whether input is marked as very creative, funny etc answer */\r\n    star: boolean;\r\n    /** The text input by the player */\r\n    text: string;\r\n    /** Is the input valid or was it rejected by the other players */\r\n    valid: boolean;\r\n}\r\n\r\n/**\r\n * Holds the inputs for all players (key = player's id) for one round of the game.\r\n */\r\nexport type GameRound = Map<string, PlayerInput[]>;\r\n\r\n/**\r\n * Represents the evaluation of all players for one player's input for one category in one round of the game.\r\n * The players' ids are used as keys for the map. The value represents whether the input is valid.\r\n */\r\nexport type PlayerInputEvaluation = Map<string, boolean>;\r\n\r\n/**\r\n * Represents the evaluation of all players' inputs in one round of the game. The players' ids\r\n * are used as keys for the map. The array holds one PlayerInputEvaluation object for each category.\r\n */\r\nexport type GameRoundEvaluation = Map<string, PlayerInputEvaluation[]>;\r\n\r\n/**\r\n * Represents the user's evaluation of a player's input for a category.\r\n */\r\nexport interface EvaluationOfPlayerInput {\r\n    categoryIndex: number;\r\n    evaluatedPlayerId: string;\r\n    markedAsValid: boolean;\r\n}\r\n\r\n/**\r\n * Represents whether a player's input for a category is deemed a very creative answer.\r\n */\r\nexport interface IsPlayerInputVeryCreativeStatus {\r\n    categoryIndex: number;\r\n    evaluatedPlayerId: string;\r\n    markedAsCreative: boolean;\r\n}\r\n\r\nexport interface GameResultForPlayer {\r\n    playerName: string;\r\n    points: number;\r\n}\r\n\r\n/**\r\n * Player inputs that are marked as \"very creative\" by other players are\r\n * displayed in a \"Hall of Fame\" at the end of the game.\r\n */\r\nexport interface HallOfFameEntry {\r\n    category: string;\r\n    playerName: string;\r\n    text: string;\r\n}\r\n","import React from 'react';\r\nimport { GAME_OPTION_LABEL } from '../../constants/game.constant';\r\nimport { GameConfigScoringOptions } from '../../models/game.interface';\r\n\r\ninterface ScoringOptionsListProps {\r\n    rules: GameConfigScoringOptions;\r\n}\r\n\r\nconst ScoringOptionsList: React.FunctionComponent<ScoringOptionsListProps> = props => {\r\n    const { rules } = props;\r\n    const createFurtherOptionsElement = (): JSX.Element => (\r\n        <React.Fragment>\r\n            <p className=\"bold-text\">Regeln für die Punktevergabe:</p>\r\n            <ul>\r\n                {rules.checkForDuplicates ? <li>{GAME_OPTION_LABEL.checkForDuplicates}</li> : null}\r\n                {rules.onlyPlayerWithValidAnswer ? <li>{GAME_OPTION_LABEL.onlyPlayerWithValidAnswer}</li> : null}\r\n                {rules.creativeAnswersExtraPoints ? <li>{GAME_OPTION_LABEL.creativeAnswersExtraPoints}</li> : null}\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n    if (rules.checkForDuplicates || rules.onlyPlayerWithValidAnswer || rules.creativeAnswersExtraPoints) {\r\n        return createFurtherOptionsElement();\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default ScoringOptionsList;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textfield_wrapper\":\"PhaseEvaluateRound_textfield_wrapper__1vvD2\",\"textfield_wrapper_creative\":\"PhaseEvaluateRound_textfield_wrapper_creative__ZkHJB\",\"player_name\":\"PhaseEvaluateRound_player_name__3vIEv\",\"answer\":\"PhaseEvaluateRound_answer__26B5S\",\"invalid_answer\":\"PhaseEvaluateRound_invalid_answer__24pkd\",\"button_wrapper\":\"PhaseEvaluateRound_button_wrapper__2ww_I\",\"points_wrapper\":\"PhaseEvaluateRound_points_wrapper__d9qw8\",\"points\":\"PhaseEvaluateRound_points__38f4X\",\"search_link\":\"PhaseEvaluateRound_search_link__1u1C7\",\"auto_reject_icon\":\"PhaseEvaluateRound_auto_reject_icon__aG-MH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link_label\":\"JoinGameLink_link_label__1tx1j\"};","import { GamePhase } from '../constants/game.constant';\r\nimport { Collection } from './collection.interface';\r\nimport { EvaluationOfPlayerInput, GameConfig, IsPlayerInputVeryCreativeStatus, PlayerInput } from './game.interface';\r\nimport { PlayerInfo } from './player.interface';\r\n\r\nexport interface PubNubUserState {\r\n    gameConfig?: GameConfig;\r\n    playerInfo: PlayerInfo;\r\n}\r\n\r\nexport enum PubNubMessageType {\r\n    currentRoundInputs = 'currentRoundInputs',\r\n    dataForCurrentGame = 'dataForCurrentGame',\r\n    evaluationFinished = 'evaluationFinished',\r\n    evaluationOfPlayerInput = 'evaluationOfPlayerInput',\r\n    isPlayerInputVeryCreative = 'isPlayerInputVeryCreative',\r\n    kickPlayer = 'kickPlayer',\r\n    requestGameData = 'requestGameData',\r\n    roundFinished = 'roundFinished',\r\n    startGame = 'startGame'\r\n}\r\n\r\nexport interface PubNubMessage {\r\n    type: PubNubMessageType;\r\n    payload?: any;\r\n}\r\n\r\nexport class PubNubCurrentRoundInputsMessage {\r\n    constructor(private payload: PlayerInput[]) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.currentRoundInputs,\r\n            payload: this.payload\r\n        };\r\n    }\r\n}\r\n\r\nexport class PubNubEvaluationOfPlayerInputMessage {\r\n    constructor(private payload: EvaluationOfPlayerInput) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.evaluationOfPlayerInput,\r\n            payload: this.payload\r\n        };\r\n    }\r\n}\r\n\r\nexport class PubNubIsPlayerInputVeryCreativeMessage {\r\n    constructor(private payload: IsPlayerInputVeryCreativeStatus) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.isPlayerInputVeryCreative,\r\n            payload: this.payload\r\n        };\r\n    }\r\n}\r\n\r\nexport class PubNubKickPlayerMessage {\r\n    constructor(private payload: string) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.kickPlayer,\r\n            payload: this.payload\r\n        };\r\n    }\r\n}\r\n\r\nexport interface PubNubDataForCurrentGameMessagePayload {\r\n    compressedGameRoundEvaluation: boolean[][][];\r\n    compressedMarkedAsCreativeFlags: boolean[][];\r\n    currentPhase: GamePhase;\r\n    currentRound: number;\r\n    playersThatFinishedEvaluation: Collection<boolean>;\r\n    requestingPlayerId: string;\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\nexport class PubNubDataForCurrentGameMessage {\r\n    constructor(private payload: PubNubDataForCurrentGameMessagePayload) {}\r\n\r\n    public toPubNubMessage(): PubNubMessage {\r\n        return {\r\n            type: PubNubMessageType.dataForCurrentGame,\r\n            payload: this.payload\r\n        };\r\n    }\r\n}\r\n","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    IconButton,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Menu,\r\n    MenuItem,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport React, { useState } from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\n\r\nconst useStyles = makeStyles({\r\n    adminPanel: {\r\n        position: 'absolute',\r\n        top: '1rem',\r\n        right: '1rem'\r\n    },\r\n    menuButton: {\r\n        background: 'radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,0.5) 35%, rgba(255,255,255,0) 60%);'\r\n    },\r\n    dialogContent: {\r\n        maxWidth: '23rem'\r\n    },\r\n    dialogContentText: {\r\n        color: 'black'\r\n    }\r\n});\r\n\r\nexport interface KickUserDialogProps {\r\n    open: boolean;\r\n    playerToBeKicked: PlayerInfo | null;\r\n    onClose: (kickPlayer: boolean) => void;\r\n}\r\nconst KickUserDialog: React.FunctionComponent<KickUserDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { onClose, open } = props;\r\n\r\n    return (\r\n        <Dialog onClose={() => onClose(false)} open={open}>\r\n            <DialogContent classes={{ root: classes.dialogContent }}>\r\n                {props.playerToBeKicked ? (\r\n                    <DialogContentText classes={{ root: classes.dialogContentText }}>\r\n                        &quot;With great power comes great responsibility&quot; – Willst du {props.playerToBeKicked.name} wirklich aus dem Spiel werfen?\r\n                    </DialogContentText>\r\n                ) : null}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    type=\"button\"\r\n                    onClick={() => onClose(false)}\r\n                >Abbrechen</Button>\r\n                <Button\r\n                    type=\"button\"\r\n                    color=\"primary\"\r\n                    onClick={() => onClose(true)}\r\n                >Rauswerfen</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\ninterface AdminPanelProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    kickPlayer: (playerId: string) => void;\r\n}\r\nconst AdminPanel: React.FunctionComponent<AdminPanelProps> = props => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [playerToBeKicked, setPlayerToBeKicked] = useState<PlayerInfo | null>(null);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleMenuItemClick = (selectedPlayer: PlayerInfo) => {\r\n        setAnchorEl(null);\r\n        setPlayerToBeKicked(selectedPlayer);\r\n        setOpenDialog(true);\r\n    };\r\n    const handleAdminPanelClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleKickUserDialogClose = (kickPlayer: boolean) => {\r\n        setOpenDialog(false);\r\n        if (kickPlayer && playerToBeKicked) {\r\n            props.kickPlayer(playerToBeKicked.id);\r\n        }\r\n    };\r\n\r\n    const otherPlayers = new Map<string, PlayerInfo>();\r\n    props.allPlayers.forEach((playerInfo, playerId) => {\r\n        if (!playerInfo.isAdmin) { otherPlayers.set(playerId, playerInfo); }\r\n    });\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(otherPlayers);\r\n    return (\r\n        <div className={classes.adminPanel}>\r\n            <IconButton\r\n                className={classes.menuButton}\r\n                title=\"Admin-Panel\"\r\n                aria-label=\"Admin-Panel\"\r\n                aria-controls=\"admin-panel\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n            >\r\n                <SettingsIcon color=\"primary\" />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"admin-panel\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleAdminPanelClose}\r\n            >\r\n                {sortedPlayers.map((playerInfo, playerIndex) => (\r\n                    <MenuItem\r\n                        key={`menu-item-delete-player-${playerIndex}`}\r\n                        title={`${playerInfo.name} aus dem Spiel werfen`}\r\n                        onClick={() => handleMenuItemClick(playerInfo)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <CancelIcon color=\"secondary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={playerInfo.name} />\r\n                    </MenuItem>\r\n                ))}\r\n            </Menu>\r\n            <KickUserDialog\r\n                open={openDialog}\r\n                playerToBeKicked={playerToBeKicked}\r\n                onClose={handleKickUserDialogClose}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminPanel;\r\n","import './LetterAnimation.css';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n    LETTER_ANIMATION_LETTER_COUNT,\r\n    LETTER_ANIMATION_REDRAW_SPEED,\r\n    STANDARD_ALPHABET,\r\n} from '../../constants/game.constant';\r\nimport { AppTheme, AppThemes } from '../../constants/themes.constant';\r\nimport { getRandomLetters } from '../../utils/game.utils';\r\n\r\n// Thanks to Georgi Nikoloff for the great animation source code: https://codepen.io/gbnikolov/pen/jEqQdG\r\n// I rewrote the code in Typescript, refactored it a bit and adapted it to the needs of this application.\r\n\r\nclass Particle {\r\n    private radius = 3.5;\r\n\r\n    constructor(\r\n        public x: number,\r\n        public y: number\r\n    ) { }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.translate(this.x, this.y);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, this.radius, this.radius);\r\n        ctx.restore();\r\n    }\r\n}\r\n\r\nclass ParticleAlphabet {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private currentPos: number;\r\n    private width: number;\r\n    private height: number;\r\n    private particlePositions: any[];\r\n    private particles: Particle[];\r\n    private tmpCanvas: HTMLCanvasElement;\r\n    private tmpCtx: CanvasRenderingContext2D;\r\n    private time: string;\r\n    private counter = 0;\r\n    private myInterval: any;\r\n    private activeTheme: AppTheme;\r\n\r\n    constructor(\r\n        public letters: string[],\r\n        public callbackWhenAnimationDone: () => void\r\n    ) {\r\n        this.canvas = document.querySelector('#letter-animation-canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        const mainElement = document.querySelector('main') as HTMLElement;\r\n        this.activeTheme = AppThemes.find(theme => mainElement.classList.contains(theme.className)) as AppTheme;\r\n        this.width = mainElement.offsetWidth;\r\n        this.height = mainElement.offsetHeight;\r\n        this.particlePositions = [];\r\n        this.particles = [];\r\n        this.tmpCanvas = document.createElement('canvas');\r\n        this.tmpCtx = this.tmpCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.particlePositions = [];\r\n        this.currentPos = 0;\r\n        this.time = '';\r\n    }\r\n\r\n    public init() {\r\n        this.myInterval = setInterval(() => {\r\n            if (this.counter < this.letters.length) {\r\n                this.changeLetter();\r\n                this.getPixels(this.tmpCanvas, this.tmpCtx);\r\n            }\r\n            this.counter++;\r\n            if (this.counter > this.letters.length + 1) {\r\n                clearInterval(this.myInterval);\r\n                this.callbackWhenAnimationDone();\r\n            }\r\n        }, LETTER_ANIMATION_REDRAW_SPEED);\r\n\r\n        this.makeParticles(1000);\r\n        this.animate();\r\n    }\r\n\r\n    private changeLetter() {\r\n        this.time = this.letters[this.currentPos];\r\n        this.currentPos++;\r\n        if (this.currentPos >= this.letters.length) {\r\n            this.currentPos = 0;\r\n        }\r\n    }\r\n\r\n    private makeParticles(num: number) {\r\n        for (let i = 0; i <= num; i++) {\r\n            const x = this.width / 2 + Math.random() * 400 - 200;\r\n            const y = this.height / 2 + Math.random() * 400 - 200;\r\n            this.particles.push(new Particle(x, y));\r\n        }\r\n    }\r\n\r\n    private getPixels(canvas: any, ctx: any) {\r\n        const keyword = this.time,\r\n            gridX = 6,\r\n            gridY = 6;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        ctx.fillStyle = 'red';\r\n        ctx.font = 'italic bold 330px Noto Serif';\r\n        ctx.fillText(keyword, canvas.width / 2 - ctx.measureText(keyword).width / 2, canvas.height / 2 + 100);\r\n        const idata = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const buffer32 = new Uint32Array(idata.data.buffer);\r\n        if (this.particlePositions.length > 0) this.particlePositions = [];\r\n        for (let y = 0; y < canvas.height; y += gridY) {\r\n            for (let x = 0; x < canvas.width; x += gridX) {\r\n                if (buffer32[y * canvas.width + x]) {\r\n                    this.particlePositions.push({ x: x, y: y });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private animateParticles() {\r\n        let p, pPos;\r\n        for (let i = 0, num = this.particles.length; i < num; i++) {\r\n            p = this.particles[i];\r\n            pPos = this.particlePositions[i];\r\n            if (this.particles.indexOf(p) === this.particlePositions.indexOf(pPos)) {\r\n                p.x += (pPos.x - p.x) * .3;\r\n                p.y += (pPos.y - p.y) * .3;\r\n                p.draw(this.ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private animate = () => {\r\n        requestAnimationFrame(this.animate);\r\n        this.ctx.fillStyle = this.activeTheme.animationBackgroundColor;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        this.animateParticles();\r\n    }\r\n}\r\n\r\ninterface LetterAnimationProps {\r\n    letterToUnveil: string;\r\n    callbackWhenAnimationDone: () => void;\r\n}\r\nexport const LetterAnimation: React.FunctionComponent<LetterAnimationProps> = props => {\r\n    const lettersToUse = [...STANDARD_ALPHABET].filter(letter => letter !== props.letterToUnveil);\r\n    const lettersForAnimation = [...getRandomLetters(LETTER_ANIMATION_LETTER_COUNT - 1, lettersToUse), props.letterToUnveil];\r\n    useEffect(() => {\r\n        const particleAlphabet = new ParticleAlphabet(lettersForAnimation, props.callbackWhenAnimationDone);\r\n        particleAlphabet.init();\r\n    });\r\n    return (\r\n        <canvas id=\"letter-animation-canvas\"></canvas>\r\n    );\r\n};\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n    centerContent: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    chip: {\r\n        height: '3rem',\r\n        marginBottom: '0',\r\n        marginTop: '1rem',\r\n        borderRadius: '5px',\r\n        fontWeight: 'normal',\r\n        fontSize: '1.2rem',\r\n        boxShadow: '0 2px 4px rgba(0,0,0,.501961)'\r\n    }\r\n});\r\n\r\ninterface GameRoundChipProps {\r\n    currentLetter: string;\r\n    currentRound: number;\r\n    numberOfRounds: number;\r\n}\r\n\r\nconst GameRoundChip: React.FunctionComponent<GameRoundChipProps> = props => {\r\n    const classes = useStyles();\r\n    const { currentLetter, currentRound, numberOfRounds } = props;\r\n    return (\r\n        <div className={classes.centerContent}>\r\n            <Chip\r\n                color=\"primary\"\r\n                component=\"h2\"\r\n                icon={<EmojiObjectsIcon />}\r\n                label={`Runde ${currentRound} von ${numberOfRounds}: „${currentLetter}“`}\r\n                className={classes.chip}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameRoundChip;\r\n","import {\r\n    Badge,\r\n    Box,\r\n    Chip,\r\n    createStyles,\r\n    Divider,\r\n    IconButton,\r\n    Snackbar,\r\n    Theme,\r\n    Tooltip,\r\n    withStyles,\r\n} from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport ThumbDownRoundedIcon from '@material-ui/icons/ThumbDownRounded';\r\nimport React, { useState } from 'react';\r\n\r\nimport { EXTRA_POINTS } from '../../constants/game.constant';\r\nimport {\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    IsPlayerInputVeryCreativeStatus,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder, getRejectingPlayers } from '../../utils/game.utils';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\nimport styles from './PhaseEvaluateRound.module.css';\r\n\r\nconst StyledBadge = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        badge: {\r\n            right: -3,\r\n            top: '100%',\r\n            border: `2px solid ${theme.palette.background.paper}`,\r\n            padding: '0 4px',\r\n        },\r\n    }),\r\n)(Badge);\r\n\r\ninterface PhaseEvaluateRoundProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    sendEvaluationFinishedMessage: () => void;\r\n    updateEvaluationOfPlayerInput: (newEvaluation: EvaluationOfPlayerInput) => void;\r\n    updateIsPlayerInputVeryCreativeStatus: (newStatus: IsPlayerInputVeryCreativeStatus) => void;\r\n}\r\nconst PhaseEvaluateRound: React.FunctionComponent<PhaseEvaluateRoundProps> = props => {\r\n    const [hasFinishedEvaluation, setHasFinishedEvaluation] = useState(props.playersThatFinishedEvaluation.has(props.playerInfo.id));\r\n    const [isSnackbarOpen, setIsSnackbarOpen] = useState(false);\r\n    const [snackBarMessage, setSnackBarMessage] = useState('');\r\n    const { allPlayers, currentRound, currentRoundEvaluation, gameConfig, playerInfo, playersThatFinishedEvaluation } = props;\r\n    // Retrieve data for finished round; e.g. if current round is 1, then data is at index 0.\r\n    const finishedRound = props.gameRounds[currentRound - 1];\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(allPlayers);\r\n    const notFinishedPlayers: string[] = [];\r\n    sortedPlayers.forEach(player => {\r\n        if (!playersThatFinishedEvaluation.has(player.id)) {\r\n            notFinishedPlayers.push(player.name);\r\n        }\r\n    });\r\n\r\n    const showSnackBar = (message: string) => {\r\n        setSnackBarMessage(message);\r\n        setIsSnackbarOpen(true);\r\n    };\r\n    const handleSnackBarClose = () => setIsSnackbarOpen(false);\r\n    /**\r\n      * Toggles the user's evaluation of a player's input for a category,\r\n      * but only if the user hasn't accepted the round evaluation yet.\r\n      */\r\n    const handleEvaluationButtonClick = (\r\n        categoryIndex: number, evaluatedPlayerId: string, currentEvaluation: boolean\r\n    ) => {\r\n        if (hasFinishedEvaluation) {\r\n            showSnackBar('Du hast bereits die Bewertung der Runde bestätigt!');\r\n        } else {\r\n            props.updateEvaluationOfPlayerInput({ categoryIndex, evaluatedPlayerId, markedAsValid: !currentEvaluation });\r\n        }\r\n    };\r\n    /**\r\n     * Displays a button that allows the user to reject a player's input for a category.\r\n     * A badge attached to the button shows the total number of rejections. If the player\r\n     * didn't type any text, then a not clickable thumb down icon is shown instead,\r\n     * which indicates that the input was automatically rejected by the application.\r\n     */\r\n    const createEvaluationButton = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const allEvaluationsForPlayer = currentRoundEvaluation.get(evaluatedPlayer.id) as PlayerInputEvaluation[];\r\n        const evaluationForCategory = allEvaluationsForPlayer[categoryIndex];\r\n        const isInputAcceptedByUser = evaluationForCategory.get(playerInfo.id) as boolean;\r\n        const rejectingPlayers = getRejectingPlayers(evaluationForCategory, allPlayers);\r\n        const tooltipText = rejectingPlayers.length === 0 ? 'Keine Ablehnungen' :\r\n            'Abgelehnt von ' + rejectingPlayers.map(p => p.name).join(', ');\r\n        const hasPlayerTypedText = !!(finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n\r\n        const evaluationButtonForTypedText = (\r\n            <Tooltip\r\n                key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}`}\r\n                title={tooltipText}\r\n            >\r\n                <IconButton\r\n                    className=\"slf-evaluation-button\"\r\n                    color={isInputAcceptedByUser ? 'default' : 'secondary'}\r\n                    size=\"small\"\r\n                    onClick={() => handleEvaluationButtonClick(categoryIndex, evaluatedPlayer.id, isInputAcceptedByUser)}\r\n                >\r\n                    <StyledBadge badgeContent={rejectingPlayers.length} color=\"secondary\">\r\n                        <ThumbDownRoundedIcon fontSize=\"small\" />\r\n                    </StyledBadge>\r\n                </IconButton>\r\n            </Tooltip>\r\n        );\r\n        const autoRejectIconForMissingText = (\r\n            <Tooltip\r\n                key={`slf-evaluation-tooltip-${categoryIndex}-${indexInSortedPlayers}`}\r\n                title=\"Automatisch abgelehnt\"\r\n            >\r\n                <ThumbDownRoundedIcon color=\"secondary\" className={styles.auto_reject_icon} fontSize=\"small\" />\r\n            </Tooltip>\r\n        );\r\n        return hasPlayerTypedText ? evaluationButtonForTypedText : autoRejectIconForMissingText;\r\n    };\r\n    /**\r\n     * Creates a search link for a specific category and player input.\r\n     */\r\n    const createSearchLink = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const category = gameConfig.categories[categoryIndex];\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const playerInput = (finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex].text;\r\n        const searchLink = `https://www.ecosia.org/search?q=${encodeURIComponent(category)}+${encodeURIComponent(playerInput)}`;\r\n        return (\r\n            <a\r\n                className={styles.search_link}\r\n                href={searchLink}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                aria-label=\"Begriff nachschlagen\"\r\n            >\r\n                <Tooltip\r\n                    title=\"Begriff nachschlagen\"\r\n                    placement=\"bottom\"\r\n                >\r\n                    <SearchIcon color=\"primary\" fontSize=\"small\" />\r\n                </Tooltip>\r\n            </a>\r\n        );\r\n    };\r\n    /**\r\n      * Toggles the \"marked as very creative\" status of a player's input for a category,\r\n      * but only if the user hasn't accepted the round evaluation yet and isn't trying to mark their own answer as \"very creative\".\r\n      */\r\n    const handleMarkAsCreativeAnswerToggleClick = (\r\n        categoryIndex: number, evaluatedPlayerId: string, isMarkedAsCreative: boolean\r\n    ) => {\r\n        if (hasFinishedEvaluation) {\r\n            showSnackBar('Du hast bereits die Bewertung der Runde bestätigt!');\r\n        } else {\r\n            if (props.playerInfo.id === evaluatedPlayerId) {\r\n                showSnackBar('Nice try! Ob deine eigene Antwort sehr kreativ oder lustig ist, sollen die anderen beurteilen.');\r\n            } else {\r\n                props.updateIsPlayerInputVeryCreativeStatus({ categoryIndex, evaluatedPlayerId, markedAsCreative: !isMarkedAsCreative });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Creates a \"mark as creative answer\" toggle button for a specific category and player input.\r\n     */\r\n    const createMarkAsCreativeAnswerToggle = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const playerInput = (finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex];\r\n        return (\r\n            <Tooltip\r\n                title={playerInput.star ? 'Besonders kreativ? Nope!' : 'Als besonders kreativ markieren'}\r\n                placement=\"bottom\"\r\n            >\r\n                <IconButton\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    onClick={() => handleMarkAsCreativeAnswerToggleClick(categoryIndex, evaluatedPlayer.id, playerInput.star)}\r\n                >\r\n                    {playerInput.star ? <StarIcon /> : <StarBorderIcon />}\r\n                </IconButton>\r\n            </Tooltip>\r\n        );\r\n    };\r\n    const calculatePoints = (evaluatedPlayerInput: PlayerInput): number => {\r\n        return gameConfig.scoringOptions.creativeAnswersExtraPoints && evaluatedPlayerInput.star\r\n            ? evaluatedPlayerInput.points + EXTRA_POINTS : evaluatedPlayerInput.points;\r\n    };\r\n    const createPointsChip = (evaluatedPlayerInput: PlayerInput): JSX.Element => {\r\n        const label = '+' + (evaluatedPlayerInput.valid ? calculatePoints(evaluatedPlayerInput) : 0);\r\n        const color = evaluatedPlayerInput.valid ? 'primary' : 'default';\r\n        return (\r\n            <div className={styles.points_wrapper}>\r\n                <Chip label={label} color={color} classes={{ root: styles.points }} />\r\n            </div>\r\n        );\r\n    };\r\n    /**\r\n     * Shows the player's input for a category. If the player input isn't an empty string, then on the right upper\r\n     * side of the textfield a search link, \"mark as creative\" button and evaluation button are displayed.\r\n     */\r\n    const playerEvaluationElements = (categoryIndex: number, indexInSortedPlayers: number): JSX.Element => {\r\n        const evaluatedPlayer = sortedPlayers[indexInSortedPlayers];\r\n        const evaluatedPlayerInput = (finishedRound.get(evaluatedPlayer.id) as PlayerInput[])[categoryIndex];\r\n        const hasPlayerTypedText = !!evaluatedPlayerInput.text;\r\n        const isInputValid = evaluatedPlayerInput.valid;\r\n        const isCreativeAnswer = isInputValid && evaluatedPlayerInput.star;\r\n        return (\r\n            <Box\r\n                key={`slf-evaluation-textfield-wrapper-${categoryIndex}-${indexInSortedPlayers}`}\r\n                boxShadow={1}\r\n                className={isCreativeAnswer ? styles.textfield_wrapper_creative : styles.textfield_wrapper}\r\n            >\r\n                <h4 className={styles.player_name}>{evaluatedPlayer.name}</h4>\r\n                <Divider light />\r\n                <p className={isInputValid ? styles.answer : styles.invalid_answer}>\r\n                    {hasPlayerTypedText ? evaluatedPlayerInput.text : '(leer)'}\r\n                </p>\r\n                <div className={styles.button_wrapper}>\r\n                    {hasPlayerTypedText ? createSearchLink(categoryIndex, indexInSortedPlayers) : null}\r\n                    {isInputValid ? createMarkAsCreativeAnswerToggle(categoryIndex, indexInSortedPlayers) : null}\r\n                    {createEvaluationButton(categoryIndex, indexInSortedPlayers)}\r\n                </div>\r\n                {createPointsChip(evaluatedPlayerInput)}\r\n            </Box>\r\n        );\r\n    };\r\n    /**\r\n     * Creates a section for each category of the current game. It displays the category in the header,\r\n     * followed by one textfield for each player showing their input for the finished round.\r\n     * If the input isn't empty, a search link and clickable evaluation button are displayed.\r\n     */\r\n    const createCategorySection = (category: string, categoryIndex: number): JSX.Element => (\r\n        <div\r\n            key={'slf-evaluation-for-category-no-' + categoryIndex}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader isH3={true} showDivider={false} text={category}></SectionHeader>\r\n            {sortedPlayers.map((_, indexInSortedPlayers) => playerEvaluationElements(categoryIndex, indexInSortedPlayers))}\r\n        </div>\r\n    );\r\n    const onAcceptEvaluationButtonClick = () => {\r\n        if (!hasFinishedEvaluation) {\r\n            setHasFinishedEvaluation(true);\r\n            props.sendEvaluationFinishedMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip\r\n                currentLetter={currentLetter}\r\n                currentRound={currentRound}\r\n                numberOfRounds={gameConfig.numberOfRounds}\r\n            />\r\n            {gameConfig.categories.map(createCategorySection)}\r\n            <div className=\"material-card-style\">\r\n                Bestätigung ausstehend: <span className=\"bold-text\">{notFinishedPlayers.join(', ')}</span>\r\n            </div>\r\n            <IconButton\r\n                type=\"button\"\r\n                className=\"fixed-bottom-right-button\"\r\n                color=\"secondary\"\r\n                title=\"Bestätigen\"\r\n                aria-label=\"Bestätigen\"\r\n                onClick={onAcceptEvaluationButtonClick}\r\n            >\r\n                {hasFinishedEvaluation ? <CheckCircleIcon /> : <RadioButtonUncheckedIcon />}\r\n            </IconButton>\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n                open={isSnackbarOpen}\r\n                autoHideDuration={3000}\r\n                onClose={handleSnackBarClose}\r\n                message={snackBarMessage}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default PhaseEvaluateRound;\r\n","import React from 'react';\r\nimport Countdown, { zeroPad } from 'react-countdown';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        countdown: {\r\n            position: 'fixed',\r\n            right: '1.5rem',\r\n            bottom: '1rem',\r\n            backgroundColor: theme.palette.primary.main,\r\n            color: theme.palette.primary.contrastText,\r\n            padding: '0.5rem 1rem',\r\n            fontSize: '1.5rem',\r\n            boxShadow: '0 2px 4px rgba(0, 0, 0, .401961)',\r\n            borderRadius: '5px',\r\n        },\r\n    }),\r\n);\r\n\r\ninterface RoundCountdownProps {\r\n    /** Duration of countdown in seconds */\r\n    duration: number;\r\n    /** The method to be called when countdown reaches zero */\r\n    onComplete: () => void;\r\n}\r\n\r\nconst RoundCountdown: React.FunctionComponent<RoundCountdownProps> = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Countdown\r\n            date={Date.now() + (props.duration * 1000)}\r\n            renderer={props => (\r\n                <div className={classes.countdown}>\r\n                    {zeroPad(props.minutes)}:{zeroPad(props.seconds)}\r\n                </div>\r\n            )}\r\n            onComplete={props.onComplete}\r\n        />\r\n    );\r\n};\r\n\r\nexport default React.memo(RoundCountdown);\r\n","import { IconButton, InputAdornment, TextField } from '@material-ui/core';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport React, { ChangeEvent } from 'react';\r\n\r\nimport { EndRoundMode, GameConfig, PlayerInput } from '../../models/game.interface';\r\nimport GameRoundChip from '../GameRoundChip/GameRoundChip';\r\nimport RoundCountdown from '../RoundCountdown/RoundCountdown';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseFillOutTextfieldsProps {\r\n    currentRound: number;\r\n    gameConfig: GameConfig;\r\n    gameRoundInputs: PlayerInput[];\r\n    updateCurrentRoundInputs: (newCurrentRoundInputs: PlayerInput[]) => void;\r\n    finishRoundOnCountdownComplete: () => void;\r\n    finishRoundOnUserAction: () => void;\r\n}\r\n\r\nconst PhaseFillOutTextfields: React.FunctionComponent<PhaseFillOutTextfieldsProps> = props => {\r\n    const { currentRound, gameConfig, gameRoundInputs } = props;\r\n    const currentLetter = gameConfig.letters[currentRound - 1];\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number) => {\r\n        const newGameRoundInputs = [...gameRoundInputs];\r\n        newGameRoundInputs[index] = { ...newGameRoundInputs[index], text: event.target.value };\r\n        props.updateCurrentRoundInputs(newGameRoundInputs);\r\n    };\r\n    const createTextfieldElement = (category: string, index: number): JSX.Element => (\r\n        <div\r\n            key={'slf-input-for-category-no-' + index}\r\n            className=\"material-card-style\"\r\n        >\r\n            <SectionHeader isH3={true} showDivider={false} text={category}></SectionHeader>\r\n            <TextField\r\n                value={gameRoundInputs[index].text}\r\n                onChange={event => handleInputChange(event, index)}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">{currentLetter}:</InputAdornment>,\r\n                    spellCheck: false\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n    const endRoundButton = (\r\n        <IconButton\r\n            type=\"button\"\r\n            className=\"fixed-bottom-right-button\"\r\n            color=\"secondary\"\r\n            title=\"Abschicken\"\r\n            aria-label=\"Abschicken\"\r\n            onClick={props.finishRoundOnUserAction}\r\n        >\r\n            <EmailIcon />\r\n        </IconButton>\r\n    );\r\n    const countdownElement = (\r\n        <RoundCountdown\r\n            duration={props.gameConfig.durationOfCountdown}\r\n            onComplete={props.finishRoundOnCountdownComplete}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GameRoundChip\r\n                currentLetter={currentLetter}\r\n                currentRound={currentRound}\r\n                numberOfRounds={gameConfig.numberOfRounds}\r\n            />\r\n            <form className=\"app-form\" noValidate autoComplete=\"off\">\r\n                {gameConfig.categories.map(createTextfieldElement)}\r\n                {gameConfig.endRoundMode === EndRoundMode.countdownEnds ? countdownElement : endRoundButton }\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default PhaseFillOutTextfields;\r\n","import { IconButton, InputAdornment, OutlinedInput, Snackbar } from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport React, { useState } from 'react';\r\nimport { copyToClipboard } from '../../utils/general.utils';\r\nimport styles from './JoinGameLink.module.css';\r\n\r\ninterface JoinGameLinkProps {\r\n    gameId: string;\r\n}\r\n\r\nexport const JoinGameLink: React.FunctionComponent<JoinGameLinkProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n    const handleClick = () => {\r\n        copyToClipboard(joinGameLink);\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const url = window.location.href;\r\n    // Cut off \"/play\" from the end of the url and add route plus game id.\r\n    const joinGameLink = url.slice(0, url.length - 5) + '/joingame?id=' + props.gameId;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p className={styles.link_label}>Teile diesen Link mit Freunden:</p>\r\n            <OutlinedInput\r\n                name=\"idInput\"\r\n                value={joinGameLink}\r\n                className=\"app-form-input\"\r\n                disabled\r\n                fullWidth\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            title=\"Link kopieren\"\r\n                            aria-label=\"Link kopieren\"\r\n                            onClick={handleClick}\r\n                        >\r\n                            <FileCopyIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n            />\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={1500}\r\n                onClose={handleClose}\r\n                message=\"Der Link wurde in Zwischenablage kopiert.\"\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import Chip from '@material-ui/core/Chip';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport React from 'react';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            padding: theme.spacing(0.5),\r\n        },\r\n        chip: {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface PlayerListProps {\r\n    players: Map<string, PlayerInfo>;\r\n}\r\nconst PlayerList: React.FunctionComponent<PlayerListProps> = props => {\r\n    const classes = useStyles();\r\n    const sortedPlayers = getPlayersInAlphabeticalOrder(props.players);\r\n    return (\r\n        <div className={classes.root}>\r\n            {sortedPlayers.map((playerInfo, index) => (\r\n                <Chip\r\n                    key={`player-name-${index}`}\r\n                    icon={<FaceIcon />}\r\n                    color={playerInfo.isAdmin ? 'secondary' : 'primary'}\r\n                    label={playerInfo.isAdmin ? `${playerInfo.name} (Admin)` : playerInfo.name}\r\n                    className={classes.chip}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerList;\r\n","import './PhaseWaitingToStart.css';\r\nimport { Button, Divider } from '@material-ui/core';\r\nimport PlayCircleFilled from '@material-ui/icons/PlayCircleFilled';\r\nimport React from 'react';\r\nimport { MIN_NUMBER_OF_PLAYERS } from '../../constants/game.constant';\r\nimport { EndRoundMode, GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubMessage, PubNubMessageType } from '../../models/pub-nub-data.model';\r\nimport { JoinGameLink } from '../JoinGameLink/JoinGameLink';\r\nimport PlayerList from '../PlayerList/PlayerList';\r\nimport ScoringOptionsList from '../ScoringOptionsList/ScoringOptionsList';\r\nimport { SectionHeader } from '../SectionHeader/SectionHeader';\r\n\r\ninterface PhaseWaitingToStartProps {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig | null;\r\n    gameId: string;\r\n    playerInfo: PlayerInfo;\r\n    sendMessage: (message: PubNubMessage) => void;\r\n}\r\n\r\nconst PhaseWaitingToStart: React.FunctionComponent<PhaseWaitingToStartProps> = props => {\r\n    const { allPlayers, gameId, playerInfo } = props;\r\n    const gameConfig = props.gameConfig as GameConfig;\r\n    const waitForGameStartElement = (\r\n        <p className=\"wait-for-start-animation\">Warte auf Spielbeginn <span>.</span><span>.</span><span>.</span></p>\r\n    );\r\n    const getEndRoundDescription = (gameConfig: GameConfig): string => {\r\n        switch (gameConfig.endRoundMode) {\r\n            case EndRoundMode.allPlayersSubmit:\r\n                return 'Wenn alle Spielenden ihre Antworten abgeschickt haben';\r\n            case EndRoundMode.countdownEnds:\r\n                return `Countdown (${gameConfig.durationOfCountdown} Sekunden)`;\r\n            case EndRoundMode.firstPlayerSubmits:\r\n                return 'Schnellster Spieler';\r\n            default:\r\n                return '';\r\n        }\r\n    };\r\n    const createGameSettingsElement = (): JSX.Element => (\r\n        <React.Fragment>\r\n            <Divider />\r\n            <h3>Spieleinstellungen:</h3>\r\n            <p><span className=\"bold-text\">ID:</span> {props.gameId}</p>\r\n            <p><span className=\"bold-text\">Runden:</span> {gameConfig.numberOfRounds}</p>\r\n            <p><span className=\"bold-text\">Kategorien:</span> {gameConfig.categories.join(', ')}</p>\r\n            <p>\r\n                <span className=\"bold-text\">Beenden der Runde durch:</span>\r\n                <span> {getEndRoundDescription(gameConfig)}</span>\r\n            </p>\r\n            <ScoringOptionsList rules={gameConfig.scoringOptions} />\r\n        </React.Fragment>\r\n    );\r\n    const createStartGameButton = (): JSX.Element => (\r\n        <div className=\"button-wrapper add-margin-top\">\r\n            <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<PlayCircleFilled />}\r\n                disabled={allPlayers.size < MIN_NUMBER_OF_PLAYERS}\r\n                onClick={() => props.sendMessage({ type: PubNubMessageType.startGame })}\r\n            >Starten</Button>\r\n        </div>\r\n    );\r\n    const createInvitePlayersElement = (): JSX.Element => (\r\n        <div className=\"material-card-style\">\r\n            <JoinGameLink gameId={gameId as string} />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"material-card-style\">\r\n                <SectionHeader isH3={false} showDivider={true} text=\"Gleich geht's los...\"></SectionHeader>\r\n                <div className=\"players-wrapper\">\r\n                    <h3>Mitspieler ({props.allPlayers.size}):</h3>\r\n                    <PlayerList players={props.allPlayers} />\r\n                </div>\r\n                {props.gameConfig ? createGameSettingsElement() : null}\r\n                <Divider />\r\n                {playerInfo.isAdmin ? createStartGameButton() : waitForGameStartElement}\r\n            </div>\r\n            {playerInfo.isAdmin ? createInvitePlayersElement() : null}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default PhaseWaitingToStart;\r\n","import Pubnub from 'pubnub';\r\nimport { usePubNub } from 'pubnub-react';\r\nimport React, { useEffect } from 'react';\r\nimport { GameConfig } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { PubNubUserState } from '../../models/pub-nub-data.model';\r\n\r\ninterface PubNubEventHandlerProps {\r\n    gameChannel: string;\r\n    gameConfig: GameConfig | null;\r\n    isRejoiningGame: boolean;\r\n    playerInfo: PlayerInfo;\r\n    navigateToDashboard: () => void;\r\n    addPlayers: (...newPlayers: PubNubUserState[]) => void;\r\n    processPubNubMessage: (event: Pubnub.MessageEvent) => void;\r\n}\r\n\r\nconst PubNubEventHandler: React.FunctionComponent<PubNubEventHandlerProps> = props => {\r\n    const pubNubClient = usePubNub();\r\n\r\n    const setUserStateAndGetHereNowIfGameIsOpen = () => {\r\n        pubNubClient.history(\r\n            { channel: props.gameChannel, count: 10 },\r\n            (_, response) => {\r\n                // If a new user wants to join the game but the channel's history already includes messages, then the game\r\n                // has already started and user can't join. They get rerouted to the dashboard page by PlayGame component.\r\n                if (!props.isRejoiningGame && response.messages.length > 0) {\r\n                    props.navigateToDashboard();\r\n                    return;\r\n                }\r\n                // Only if player is joining game for the first time, set user state and retrieve hereNowData.\r\n                if (!props.isRejoiningGame) {\r\n                    setUserState();\r\n                    getHereNowData();\r\n                    // Safeguard against the possibility of two players joining exactly at the same time:\r\n                    // We call hereNowData again after 3 seconds, to make sure we get all player info.\r\n                    setTimeout(getHereNowData, 3000);\r\n                }\r\n            }\r\n        );\r\n    };\r\n    const setUserState = () => {\r\n        let newUserState: PubNubUserState;\r\n        if (props.playerInfo.isAdmin) {\r\n            newUserState = { gameConfig: props.gameConfig as GameConfig, playerInfo: props.playerInfo };\r\n        } else {\r\n            newUserState = { playerInfo: props.playerInfo };\r\n        }\r\n        // Set this user's state in game channel.\r\n        pubNubClient.setState({\r\n            channels: [props.gameChannel],\r\n            state: newUserState\r\n        });\r\n    };\r\n    const getHereNowData = () => {\r\n        pubNubClient.hereNow(\r\n            { channels: [props.gameChannel], includeUUIDs: true, includeState: true },\r\n            (_, response) => {\r\n                console.log('PubNub hereNow', response);\r\n                // If player tries to rejoin but they are the only player left in game channel, then the game \r\n                // is already over and the user gets rerouted to dashboard page by PlayGame component.\r\n                if (props.isRejoiningGame && response.totalOccupancy <= 1) {\r\n                    props.navigateToDashboard();\r\n                    return;\r\n                }\r\n                // Response includes states of players that joined before.\r\n                const dataForGameChannel = response.channels[props.gameChannel];\r\n                if (dataForGameChannel) {\r\n                    const pubNubUserStates: PubNubUserState[] = [];\r\n                    dataForGameChannel.occupants.forEach(occupant => {\r\n                        const userState = occupant.state as PubNubUserState;\r\n                        // Safeguard in case that a user's state should be missing or corrupted.\r\n                        if (!!userState && !!userState.playerInfo) {\r\n                            pubNubUserStates.push(userState);\r\n                        }\r\n                    });\r\n                    props.addPlayers(...pubNubUserStates);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const pubNubListeners: Pubnub.ListenerParameters = {\r\n            message: messageEvent => {\r\n                console.log('PubNub message event', messageEvent);\r\n                // Make sure that message is controlled game message with 'type' attribute.\r\n                if (messageEvent.message.type) {\r\n                    props.processPubNubMessage(messageEvent);\r\n                }\r\n            },\r\n            presence: presenceEvent => {\r\n                console.log('PubNub presence event', presenceEvent);\r\n                // Check for 'state-change' events and process state from new player.\r\n                if (presenceEvent.action === 'state-change') {\r\n                    const userState = presenceEvent.state as PubNubUserState;\r\n                    if (userState.playerInfo.id !== props.playerInfo.id) {\r\n                        props.addPlayers(userState);\r\n                    }\r\n                }\r\n            },\r\n            status: statusEvent => {\r\n                console.log('PubNub status event', statusEvent);\r\n                if (statusEvent.category === 'PNConnectedCategory') {\r\n                    console.log('Player is connected to PubNub game channel');\r\n                    setUserStateAndGetHereNowIfGameIsOpen();\r\n                }\r\n            }\r\n        };\r\n        pubNubClient.addListener(pubNubListeners);\r\n        pubNubClient.subscribe({\r\n            channels: [props.gameChannel],\r\n            withPresence: true\r\n        });\r\n        // When this component is destroyed, we unsubscribe from game channel.\r\n        return () => {\r\n            pubNubClient.removeListener(pubNubListeners);\r\n            pubNubClient.unsubscribeAll();\r\n        };\r\n    });\r\n    return null;\r\n};\r\n\r\nexport default React.memo(PubNubEventHandler);\r\n","import PubNub from 'pubnub';\r\n\r\nimport PUBNUB_KEYS from './pubnub.config.json';\r\n\r\nexport const PUBNUB_CONFIG: PubNub.PubnubConfig = {\r\n    publishKey: PUBNUB_KEYS.publishKey,\r\n    subscribeKey: PUBNUB_KEYS.subscribeKey,\r\n    uuid: undefined, // ⇨ is set by PlayGame component,\r\n    ssl: true\r\n};\r\n","import { cloneDeep } from 'lodash';\r\nimport {\r\n    GameConfigScoringOptions,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { calculatePointsForRound, getNumberOfInvalids } from './game.utils';\r\nimport { getRunningGameRoundFromLocalStorage } from './local-storage.utils';\r\n\r\nexport const shouldUserRespondToRequestGameDataMessage = (user: PlayerInfo, allPlayers: Map<string, PlayerInfo>, requestingPlayerId: string): boolean => {\r\n    // User should not respond to their own message.\r\n    if (user.id === requestingPlayerId) { return false; }\r\n    // If user is admin, then they should respond to the message.\r\n    if (user.isAdmin) { return true; }\r\n    // If the requesting user is the admin, then an algorithm determines who of\r\n    // the remaining players is the one to respond to the admin's message.\r\n    const requestingPlayerInfo = allPlayers.get(requestingPlayerId);\r\n    if (requestingPlayerInfo && requestingPlayerInfo.isAdmin) {\r\n        const playersWithoutRequestingPlayer = cloneDeep(allPlayers);\r\n        playersWithoutRequestingPlayer.delete(requestingPlayerId);\r\n        const playersSortedById = Array.from(playersWithoutRequestingPlayer).map(data => data[1]).sort((a, b) => {\r\n            if (a.id < b.id) { return -1; }\r\n            if (a.id > b.id) { return 1; }\r\n            return 0;\r\n        });\r\n        return playersSortedById[0].id === user.id;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n * Transforms the GameRoundEvaluation object from a nested Map into a nested array.\r\n * The order of the players in sortedPlayers defines the order of the information in the arrays.\r\n */\r\nexport const compressGameRoundEvaluation = (gameRoundEvaluation: GameRoundEvaluation, sortedPlayers: PlayerInfo[]): boolean[][][] => {\r\n    const evaluationsAsArrays = new Map<string, boolean[][]>();\r\n    gameRoundEvaluation.forEach((data, playerId) => {\r\n        evaluationsAsArrays.set(playerId, data.map(item => {\r\n            const booleanArray: boolean[] = [];\r\n            sortedPlayers.forEach(player => booleanArray.push(item.get(player.id) as boolean));\r\n            return booleanArray;\r\n        }));\r\n    });\r\n    const compressedGameRoundEvaluation: boolean[][][] = [];\r\n    sortedPlayers.forEach(player => compressedGameRoundEvaluation.push(evaluationsAsArrays.get(player.id) as boolean[][]));\r\n    return compressedGameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Transforms the GameRoundEvaluation object from a nested array into a nested Map.\r\n * The order of the players in sortedPlayers defines the order of the information in the arrays.\r\n */\r\nexport const decompressGameRoundEvaluation = (compressedData: boolean[][][], sortedPlayers: PlayerInfo[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation: GameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    sortedPlayers.forEach((evaluatedPlayer, evaluatedPlayerIndex) => {\r\n        const evaluations: PlayerInputEvaluation[] = compressedData[evaluatedPlayerIndex].map(playerData => {\r\n            const playerInputEvaluation = new Map<string, boolean>();\r\n            sortedPlayers.forEach((evaluatingPlayer, evaluatingPlayerIndex) => playerInputEvaluation.set(evaluatingPlayer.id, playerData[evaluatingPlayerIndex]));\r\n            return playerInputEvaluation;\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluations);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Transforms the GameRoundEvaluation object from a nested Map into a nested array.\r\n * The order of the players in sortedPlayers defines the order of the information in the arrays.\r\n */\r\nexport const compressMarkedAsCreativeFlags = (round: GameRound, sortedPlayers: PlayerInfo[]): boolean[][] => {\r\n    const markedAsCreativeArrays: boolean[][] = [];\r\n    sortedPlayers.forEach(player => {\r\n        const playerInputs = round.get(player.id) as PlayerInput[];\r\n        markedAsCreativeArrays.push(playerInputs.map(input => input.star));\r\n    });\r\n    return markedAsCreativeArrays;\r\n};\r\n\r\nexport const restoreGameRoundsOfRunningGameFromLocalStorage = (numberOfRoundsToRestore: number): GameRound[] => {\r\n    const gameRounds: GameRound[] = [];\r\n    for (let round = 1; round <= numberOfRoundsToRestore; round++) {\r\n        const data = getRunningGameRoundFromLocalStorage(round);\r\n        if (data) {\r\n            gameRounds.push(data);\r\n        }\r\n    }\r\n    return gameRounds;\r\n};\r\n\r\n/**\r\n * Sets points and validity of player inputs for a player who is rejoining the game in evaluation phase.\r\n */\r\nexport const setPointsAndValidity = (\r\n    scoringOptions: GameConfigScoringOptions, gameRoundEvaluation: GameRoundEvaluation, minNumberOfInvalids: number, round: GameRound\r\n): void => {\r\n    // First evaluate validity\r\n    round.forEach((playerInputs, playerId) => {\r\n        const evaluations = gameRoundEvaluation.get(playerId) as PlayerInputEvaluation[];\r\n        playerInputs.forEach((input, categoryIndex) => {\r\n            // Only evaluate validity for originally valid inputs (not empty text inputs).\r\n            if (input.valid) {\r\n                input.valid = getNumberOfInvalids(evaluations[categoryIndex]) < minNumberOfInvalids;\r\n            }\r\n        });\r\n    });\r\n    // Second calculate points\r\n    calculatePointsForRound(scoringOptions, round);\r\n};\r\n\r\n/**\r\n * Applies the \"marked as very creative\" flags to the player inputs for a player who is rejoining the game in evaluation phase.\r\n */\r\nexport const applyMarkedAsCreativeFlags = (compressedData: boolean[][], sortedPlayers: PlayerInfo[], round: GameRound): void => {\r\n    sortedPlayers.forEach((player, playerIndex) => {\r\n        const markedAsCreativeAnswer = compressedData[playerIndex];\r\n        (round.get(player.id) as PlayerInput[]).forEach((input, categoryIndex) => input.star = markedAsCreativeAnswer[categoryIndex]);\r\n    });\r\n};\r\n","import { cloneDeep } from 'lodash';\r\nimport Pubnub from 'pubnub';\r\nimport { PubNubProvider } from 'pubnub-react';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\nimport AdminPanel from '../../components/AdminPanel/AdminPanel';\r\nimport { LetterAnimation } from '../../components/LetterAnimation/LetterAnimation';\r\nimport LoadingScreen from '../../components/LoadingScreen/LoadingScreen';\r\nimport PhaseEvaluateRound from '../../components/PhaseEvaluateRound/PhaseEvaluateRound';\r\nimport PhaseFillOutTextfields from '../../components/PhaseFillOutTextfields/PhaseFillOutTextfields';\r\nimport PhaseWaitingToStart from '../../components/PhaseWaitingToStart/PhaseWaitingToStart';\r\nimport PubNubEventHandler from '../../components/PubNubEventHandler/PubNubEventHandler';\r\nimport { PUBNUB_CONFIG } from '../../config/pubnub.config';\r\nimport { GamePhase } from '../../constants/game.constant';\r\nimport {\r\n    EndRoundMode,\r\n    EvaluationOfPlayerInput,\r\n    GameConfig,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    IsPlayerInputVeryCreativeStatus,\r\n    PlayerInput,\r\n    PlayerInputEvaluation,\r\n} from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport {\r\n    PubNubCurrentRoundInputsMessage,\r\n    PubNubDataForCurrentGameMessage,\r\n    PubNubDataForCurrentGameMessagePayload,\r\n    PubNubEvaluationOfPlayerInputMessage,\r\n    PubNubIsPlayerInputVeryCreativeMessage,\r\n    PubNubKickPlayerMessage,\r\n    PubNubMessage,\r\n    PubNubMessageType,\r\n    PubNubUserState,\r\n} from '../../models/pub-nub-data.model';\r\nimport { AppAction, resetAppState, setDataOfFinishedGame, SetDataOfFinishedGamePayload } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport {\r\n    applyMarkedAsCreativeFlags,\r\n    compressGameRoundEvaluation,\r\n    compressMarkedAsCreativeFlags,\r\n    decompressGameRoundEvaluation,\r\n    restoreGameRoundsOfRunningGameFromLocalStorage,\r\n    setPointsAndValidity,\r\n    shouldUserRespondToRequestGameDataMessage,\r\n} from '../../utils/data-restoration.utils';\r\nimport {\r\n    applyValidFlagAndStarFlagToPoints,\r\n    calculatePointsForCategory,\r\n    calculatePointsForRound,\r\n    createGameRoundEvaluation,\r\n    getEmptyRoundInputs,\r\n    getMinNumberOfInvalids,\r\n    getNumberOfInvalids,\r\n    getPlayersInAlphabeticalOrder,\r\n    markEmptyPlayerInputsAsInvalid,\r\n} from '../../utils/game.utils';\r\nimport { convertCollectionToMap, convertMapToCollection } from '../../utils/general.utils';\r\nimport {\r\n    getRunningGameConfigFromLocalStorage,\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setRunningGameConfigInLocalStorage,\r\n    setRunningGameRoundInLocalStorage,\r\n} from '../../utils/local-storage.utils';\r\n\r\ninterface PlayGamePropsFromStore {\r\n    gameConfig: GameConfig | null;\r\n    gameId: string | null;\r\n    isRejoiningGame: boolean;\r\n    /** Player info for the user of this instance of the \"Stadt-Land-Fluss\" app. */\r\n    playerInfo: PlayerInfo;\r\n}\r\ninterface PlayGameDispatchProps {\r\n    onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => void;\r\n    onResetAppState: () => void;\r\n}\r\ninterface PlayGameProps extends PlayGamePropsFromStore, PlayGameDispatchProps, RouterProps { }\r\nexport interface PlayGameState {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    currentPhase: GamePhase;\r\n    currentRound: number;\r\n    currentRoundEvaluation: GameRoundEvaluation;\r\n    currentRoundInputs: PlayerInput[];\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[];\r\n    playersThatFinishedEvaluation: Map<string, boolean>;\r\n    playersThatFinishedRound: Map<string, boolean>;\r\n    showLetterAnimation: boolean;\r\n    showLoadingScreen: boolean;\r\n}\r\n\r\nclass PlayGame extends Component<PlayGameProps, PlayGameState> {\r\n    public state: PlayGameState = {\r\n        allPlayers: new Map<string, PlayerInfo>(),\r\n        currentPhase: GamePhase.waitingToStart,\r\n        currentRound: 1,\r\n        currentRoundEvaluation: new Map<string, PlayerInputEvaluation[]>(),\r\n        currentRoundInputs: [],\r\n        gameConfig: null,\r\n        gameRounds: [new Map<string, PlayerInput[]>()],\r\n        playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n        playersThatFinishedRound: new Map<string, boolean>(),\r\n        showLetterAnimation: false,\r\n        showLoadingScreen: true\r\n    };\r\n    private pubNubClient: any;\r\n\r\n    public render() {\r\n        // This check serves as a route guard. If gameId and playerInfo aren't present in application state,\r\n        // then the user wasn't redirected here from the NewGame or JoinGame component.\r\n        if (this.props.gameId === null || this.props.playerInfo === null) { return null; }\r\n\r\n        if (!this.pubNubClient) {\r\n            this.pubNubClient = new Pubnub({ ...PUBNUB_CONFIG, uuid: this.props.playerInfo.id });\r\n        }\r\n        const letterAnimationElement = (\r\n            <LetterAnimation\r\n                letterToUnveil={this.state.gameConfig ? this.state.gameConfig.letters[this.state.currentRound - 1] : ''}\r\n                callbackWhenAnimationDone={this.callbackWhenAnimationDone}\r\n            />\r\n        );\r\n        const { allPlayers, currentPhase, gameConfig, showLetterAnimation, showLoadingScreen } = this.state;\r\n        const adminPanel = <AdminPanel allPlayers={allPlayers} kickPlayer={this.sendKickPlayerMessage} />;\r\n        const showWaitingForPlayers = currentPhase === GamePhase.fillOutTextfields\r\n            && (gameConfig && gameConfig.endRoundMode === EndRoundMode.allPlayersSubmit)\r\n            && this.state.playersThatFinishedRound.size !== allPlayers.size;\r\n        const loadingScreenElement = !showWaitingForPlayers ? <LoadingScreen />\r\n            : <LoadingScreen waitingForPlayers={this.getWaitingForPlayers()} />;\r\n\r\n        return (\r\n            <PubNubProvider client={this.pubNubClient}>\r\n                {/* The props passed to PubNubEventHandler must never be changed,\r\n                    in order to ensure that the component is not rerendered!\r\n                    (PubNubEventHandler is wrapped in React.memo) */}\r\n                <PubNubEventHandler\r\n                    gameChannel={this.props.gameId}\r\n                    gameConfig={this.props.gameConfig}\r\n                    isRejoiningGame={this.props.isRejoiningGame}\r\n                    playerInfo={this.props.playerInfo}\r\n                    navigateToDashboard={this.navigateToDashboard}\r\n                    addPlayers={this.addPlayers}\r\n                    processPubNubMessage={this.processPubNubMessage}\r\n                />\r\n                {showLetterAnimation ? letterAnimationElement : null}\r\n                {showLoadingScreen ? loadingScreenElement : null}\r\n                {!showLoadingScreen && !showLetterAnimation ? (\r\n                    <div className=\"main-content-wrapper\">\r\n                        {this.createCurrentPhaseElement()}\r\n                    </div>\r\n                ) : null}\r\n                {this.props.playerInfo.isAdmin && this.state.allPlayers.size > 1 ? adminPanel : null}\r\n            </PubNubProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { gameConfig, gameId, isRejoiningGame, playerInfo } = this.props;\r\n        // If gameId and playerInfo aren't present in application state, then reroute user to dashboard.\r\n        if (gameId === null || playerInfo === null) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        // If player is rejoining the game, we need to request the game data from the other players.\r\n        if (isRejoiningGame) {\r\n            this.sendMessage({ type: PubNubMessageType.requestGameData });\r\n        } else {\r\n            const allPlayers = new Map<string, PlayerInfo>();\r\n            allPlayers.set(playerInfo.id, playerInfo);\r\n            // If user is the game admin, the gameConfig can be taken from application state\r\n            // and we can hide the loading screen and show PhaseWaitingToStart component right away.\r\n            if (playerInfo.isAdmin) {\r\n                setRunningGameConfigInLocalStorage(gameConfig as GameConfig);\r\n                this.setState({ allPlayers, gameConfig, showLoadingScreen: false });\r\n            } else {\r\n                this.setState({ allPlayers });\r\n            }\r\n        }\r\n    }\r\n\r\n    private sendMessage = (message: PubNubMessage) => {\r\n        this.pubNubClient.publish(\r\n            {\r\n                channel: this.props.gameId as string,\r\n                message,\r\n                storeInHistory: true,\r\n                ttl: 1 // time to live (in hours)\r\n            },\r\n            (status: any, response: any) => console.log('PubNub Publish:', status, response)\r\n        );\r\n    };\r\n\r\n    private createCurrentPhaseElement = (): JSX.Element | null => {\r\n        switch (this.state.currentPhase) {\r\n            case GamePhase.waitingToStart:\r\n                return (\r\n                    <PhaseWaitingToStart\r\n                        allPlayers={this.state.allPlayers}\r\n                        gameConfig={this.state.gameConfig}\r\n                        gameId={this.props.gameId as string}\r\n                        playerInfo={this.props.playerInfo}\r\n                        sendMessage={this.sendMessage}\r\n                    />\r\n                );\r\n            case GamePhase.fillOutTextfields:\r\n                return (\r\n                    <PhaseFillOutTextfields\r\n                        currentRound={this.state.currentRound}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRoundInputs={this.state.currentRoundInputs}\r\n                        updateCurrentRoundInputs={this.updateCurrentRoundInputs}\r\n                        finishRoundOnCountdownComplete={this.finishRoundOnCountdownComplete}\r\n                        finishRoundOnUserAction={this.finishRoundOnUserAction}\r\n                    />\r\n                );\r\n            case GamePhase.evaluateRound:\r\n                return (\r\n                    <PhaseEvaluateRound\r\n                        allPlayers={this.state.allPlayers}\r\n                        currentRound={this.state.currentRound}\r\n                        currentRoundEvaluation={this.state.currentRoundEvaluation}\r\n                        gameConfig={this.state.gameConfig as GameConfig}\r\n                        gameRounds={this.state.gameRounds}\r\n                        playerInfo={this.props.playerInfo}\r\n                        playersThatFinishedEvaluation={this.state.playersThatFinishedEvaluation}\r\n                        sendEvaluationFinishedMessage={this.sendEvaluationFinishedMessage}\r\n                        updateEvaluationOfPlayerInput={this.updateEvaluationOfPlayerInput}\r\n                        updateIsPlayerInputVeryCreativeStatus={this.updateIsPlayerInputVeryCreativeStatus}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private callbackWhenAnimationDone = () => {\r\n        this.setState({ showLetterAnimation: false });\r\n    }\r\n\r\n    private navigateToDashboard = () => {\r\n        removeAllDataOfRunningGameFromLocalStorage();\r\n        this.props.onResetAppState();\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    /**\r\n     * Returns the names of the players that haven't submitted their answers yet.\r\n     */\r\n    private getWaitingForPlayers = (): string[] => {\r\n        const waitingForPlayers: string[] = [];\r\n        getPlayersInAlphabeticalOrder(this.state.allPlayers).forEach(player => {\r\n            if (!this.state.playersThatFinishedRound.has(player.id)) {\r\n                waitingForPlayers.push(player.name);\r\n            }\r\n        });\r\n        return waitingForPlayers;\r\n    }\r\n\r\n    /**\r\n     * Called by PubNubEventHandler when it receives a PubNub presence event with action 'state-change'.\r\n     * It processes information about players that had already joined the game before this user joined\r\n     * (hereNow result) or about a player that joins the game after this user joined.\r\n     */\r\n    private addPlayers = (...newPlayers: PubNubUserState[]) => {\r\n        // Ignore information about players that try to join after the game has already started.\r\n        if (this.state.currentPhase !== GamePhase.waitingToStart) { return; }\r\n        let gameConfig: GameConfig | null = null;\r\n        const allPlayers = cloneDeep(this.state.allPlayers);\r\n        newPlayers.forEach(newPlayer => {\r\n            allPlayers.set(newPlayer.playerInfo.id, newPlayer.playerInfo);\r\n            // If we are not the game admin, we obtain the game config from the admin's PubNubUserState.\r\n            if (newPlayer.gameConfig && !this.state.gameConfig) {\r\n                gameConfig = newPlayer.gameConfig;\r\n            }\r\n        });\r\n        // Only after we received the gameConfig from the admin, we hide the loading screen\r\n        // and render the PhaseWaitingToStart component instead.\r\n        if (gameConfig) {\r\n            setRunningGameConfigInLocalStorage(gameConfig);\r\n            this.setState({ allPlayers, gameConfig, showLoadingScreen: false });\r\n        } else {\r\n            this.setState({ allPlayers });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * PubNubEventHandler calls this method when it receives a PubNub message with attribute 'type'.\r\n     */\r\n    private processPubNubMessage = (event: Pubnub.MessageEvent) => {\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const message = event.message as PubNubMessage;\r\n        switch (message.type) {\r\n            case PubNubMessageType.startGame:\r\n                this.startGame();\r\n                break;\r\n            case PubNubMessageType.roundFinished:\r\n                if (gameConfig.endRoundMode === EndRoundMode.allPlayersSubmit) {\r\n                    const playersThatFinishedRound = cloneDeep(this.state.playersThatFinishedRound);\r\n                    playersThatFinishedRound.set(event.publisher, true);\r\n                    this.setState({ playersThatFinishedRound });\r\n                    if (event.publisher === this.props.playerInfo.id) {\r\n                        this.stopRoundAndSendInputs();\r\n                    }\r\n                } else {\r\n                    // In game modes \"countdown\" and \"fastet player\", the round ends for all players right away.\r\n                    this.stopRoundAndSendInputs();\r\n                }\r\n                break;\r\n            case PubNubMessageType.currentRoundInputs:\r\n                this.addPlayerInputForFinishedRound(event.publisher, message.payload);\r\n                break;\r\n            case PubNubMessageType.evaluationOfPlayerInput:\r\n                this.processEvaluationOfPlayerInput(event.publisher, message.payload);\r\n                break;\r\n            case PubNubMessageType.isPlayerInputVeryCreative:\r\n                this.processIsPlayerInputVeryCreativeStatus(message.payload);\r\n                break;\r\n            case PubNubMessageType.evaluationFinished:\r\n                this.countPlayerAsEvaluationFinished(event.publisher);\r\n                break;\r\n            case PubNubMessageType.kickPlayer:\r\n                this.removePlayerFromGame(message.payload);\r\n                break;\r\n            case PubNubMessageType.requestGameData:\r\n                if (shouldUserRespondToRequestGameDataMessage(this.props.playerInfo, this.state.allPlayers, event.publisher)) {\r\n                    if (this.state.allPlayers.has(event.publisher)) {\r\n                        // Only send data to a rejoining player who hasn't been kicked out by the admin.\r\n                        this.sendDataForCurrentGame(event.publisher);\r\n                    } else {\r\n                        // Send kickPlayer message again for kicked out player that tried to rejoin game.\r\n                        this.sendKickPlayerMessage(event.publisher);\r\n                    }\r\n                }\r\n                break;\r\n            case PubNubMessageType.dataForCurrentGame:\r\n                this.restoreDataForCurrentGame(message.payload);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    /**\r\n    * This method is called when the PubNub message 'startGame' is received.\r\n    */\r\n    private startGame = () => {\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const currentRoundEvaluation = createGameRoundEvaluation(this.state.allPlayers, gameConfig.categories);\r\n        this.setState({\r\n            currentPhase: GamePhase.fillOutTextfields,\r\n            currentRoundEvaluation,\r\n            currentRoundInputs: getEmptyRoundInputs(gameConfig.categories.length),\r\n            showLetterAnimation: true\r\n        });\r\n    }\r\n\r\n    private updateCurrentRoundInputs = (newCurrentRoundInputs: PlayerInput[]) => {\r\n        this.setState({ currentRoundInputs: newCurrentRoundInputs });\r\n    }\r\n\r\n    /**\r\n     * Gets called when the countdown reaches zero (isUserAction = false).\r\n     */\r\n    private finishRoundOnCountdownComplete = () => {\r\n        this.setState({ showLoadingScreen: true });\r\n        // We only want the game admin to send the \"roundFinished\" message once.\r\n        if (this.props.playerInfo.isAdmin) {\r\n            this.sendMessage({ type: PubNubMessageType.roundFinished });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets called when the user ends the current round.\r\n     */\r\n    private finishRoundOnUserAction = () => {\r\n        const playersThatFinishedRound = cloneDeep(this.state.playersThatFinishedRound);\r\n        playersThatFinishedRound.set(this.props.playerInfo.id, true);\r\n        this.setState({ playersThatFinishedRound, showLoadingScreen: true });\r\n        this.sendMessage({ type: PubNubMessageType.roundFinished });\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'roundFinished' is received.\r\n     */\r\n    private stopRoundAndSendInputs = () => {\r\n        // Send this player's text inputs of current round to other players (and herself/himself).\r\n        const message = new PubNubCurrentRoundInputsMessage(markEmptyPlayerInputsAsInvalid(this.state.currentRoundInputs));\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'currentRoundInputs' is received.\r\n     */\r\n    private addPlayerInputForFinishedRound = (playerId: string, playerInputsForFinishedRound: PlayerInput[]) => {\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        const roundIndex = this.state.currentRound - 1;\r\n        gameRounds[roundIndex].set(playerId, playerInputsForFinishedRound);\r\n        // Did we collect the inputs from all players?\r\n        if (gameRounds[roundIndex].size === this.state.allPlayers.size) {\r\n            // If yes, then calculate points and start the evaluation of the finished round.\r\n            calculatePointsForRound((this.state.gameConfig as GameConfig).scoringOptions, gameRounds[roundIndex]);\r\n            setRunningGameRoundInLocalStorage(this.state.currentRound, gameRounds[roundIndex]);\r\n            this.setState({ currentPhase: GamePhase.evaluateRound, gameRounds, showLoadingScreen: false });\r\n        } else {\r\n            // If no, then only store the updated gameRounds object in state.\r\n            this.setState({ gameRounds });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate a player input evaluation via a\r\n     * PubNub message. This message is then processed by all players in the game (including the user who sent it).\r\n     */\r\n    private updateEvaluationOfPlayerInput = (newEvaluation: EvaluationOfPlayerInput) => {\r\n        const message = new PubNubEvaluationOfPlayerInputMessage(newEvaluation);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'evaluationOfPlayerInput' is received.\r\n     * It processes the new evaluation and changes data in currentRoundEvaluation and gameRounds accordingly.\r\n     */\r\n    private processEvaluationOfPlayerInput = (evaluatingPlayerId: string, newEvaluation: EvaluationOfPlayerInput) => {\r\n        if (!this.state.allPlayers.has(evaluatingPlayerId)) { return; }\r\n        const { categoryIndex, evaluatedPlayerId, markedAsValid } = newEvaluation;\r\n        const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n        const playerInputEvaluations = currentRoundEvaluation.get(evaluatedPlayerId) as PlayerInputEvaluation[];\r\n        playerInputEvaluations[categoryIndex].set(evaluatingPlayerId, markedAsValid);\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        const isInputValid = getNumberOfInvalids(playerInputEvaluations[categoryIndex]) < getMinNumberOfInvalids(this.state.allPlayers.size);\r\n        const finishedRound = gameRounds[this.state.currentRound - 1];\r\n        (finishedRound.get(evaluatedPlayerId) as PlayerInput[])[categoryIndex].valid = isInputValid;\r\n        calculatePointsForCategory((this.state.gameConfig as GameConfig).scoringOptions, finishedRound, categoryIndex);\r\n        this.setState({ currentRoundEvaluation, gameRounds });\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate the \"marked as very creative\" status of a player input\r\n     * via a PubNub message. This message is then processed by all players in the game (including the user who sent it).\r\n     */\r\n    private updateIsPlayerInputVeryCreativeStatus = (newStatus: IsPlayerInputVeryCreativeStatus) => {\r\n        const message = new PubNubIsPlayerInputVeryCreativeMessage(newStatus);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'isPlayerInputVeryCreative' is received.\r\n     * It processes the new status and changes data in gameRounds accordingly.\r\n     */\r\n    private processIsPlayerInputVeryCreativeStatus = (newStatus: IsPlayerInputVeryCreativeStatus) => {\r\n        const { categoryIndex, evaluatedPlayerId, markedAsCreative } = newStatus;\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        const finishedRound = gameRounds[this.state.currentRound - 1];\r\n        (finishedRound.get(evaluatedPlayerId) as PlayerInput[])[categoryIndex].star = markedAsCreative;\r\n        this.setState({ gameRounds });\r\n    }\r\n\r\n    /**\r\n     * Is called by PhaseEvaluateRound component in order to communicate to all players\r\n     * that the user of this instance of the game has finished evaluating the current round.\r\n     */\r\n    private sendEvaluationFinishedMessage = () => this.sendMessage({ type: PubNubMessageType.evaluationFinished });\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'evaluationFinished' is received.\r\n     */\r\n    private countPlayerAsEvaluationFinished = (evaluatingPlayerId: string) => {\r\n        const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n        playersThatFinishedEvaluation.set(evaluatingPlayerId, true);\r\n        if (playersThatFinishedEvaluation.size === this.state.allPlayers.size) {\r\n            this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n        } else {\r\n            this.setState({ playersThatFinishedEvaluation });\r\n        }\r\n    }\r\n\r\n    private processEvaluationsAndStartNextRoundOrFinishGame = () => {\r\n        const { allPlayers, currentRound } = this.state;\r\n        const gameConfig = this.state.gameConfig as GameConfig;\r\n        const gameRounds = cloneDeep(this.state.gameRounds);\r\n        applyValidFlagAndStarFlagToPoints(gameConfig.scoringOptions, gameRounds[currentRound - 1]);\r\n        if (currentRound === gameConfig.numberOfRounds) {\r\n            // Finish game and show results.\r\n            removeAllDataOfRunningGameFromLocalStorage();\r\n            this.props.onSetDataOfFinishedGame({ allPlayers, gameConfig, gameRounds });\r\n            this.props.history.push('/results');\r\n        } else {\r\n            // Save finished game round in local storage and start next round of the game.\r\n            setRunningGameRoundInLocalStorage(this.state.currentRound, gameRounds[currentRound - 1]);\r\n            this.setState({\r\n                currentPhase: GamePhase.fillOutTextfields,\r\n                currentRoundEvaluation: createGameRoundEvaluation(allPlayers, gameConfig.categories),\r\n                currentRoundInputs: getEmptyRoundInputs(gameConfig.categories.length),\r\n                currentRound: currentRound + 1,\r\n                gameRounds: [...gameRounds, new Map<string, PlayerInput[]>()],\r\n                playersThatFinishedEvaluation: new Map<string, boolean>(),\r\n                playersThatFinishedRound: new Map<string, boolean>(),\r\n                showLetterAnimation: true\r\n            });\r\n        }\r\n    }\r\n\r\n    private sendKickPlayerMessage = (playerId: string) => {\r\n        const message = new PubNubKickPlayerMessage(playerId);\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'kickPlayer' is received.\r\n     */\r\n    private removePlayerFromGame = (playerId: string) => {\r\n        // If the player to be removed is the user of this game instance, then navigate to dashboard.\r\n        if (this.props.playerInfo.id === playerId) {\r\n            removeAllDataOfRunningGameFromLocalStorage();\r\n            this.props.onResetAppState();\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        if (this.state.allPlayers.has(playerId)) {\r\n            // Remove player's data from component's state.\r\n            const allPlayers = cloneDeep(this.state.allPlayers);\r\n            allPlayers.delete(playerId);\r\n            const currentRoundEvaluation = cloneDeep(this.state.currentRoundEvaluation);\r\n            currentRoundEvaluation.delete(playerId);\r\n            const gameRounds = cloneDeep(this.state.gameRounds);\r\n            gameRounds.forEach(round => round.delete(playerId));\r\n            const playersThatFinishedEvaluation = cloneDeep(this.state.playersThatFinishedEvaluation);\r\n            playersThatFinishedEvaluation.delete(playerId);\r\n            this.setState({ allPlayers, currentRoundEvaluation, gameRounds, playersThatFinishedEvaluation });\r\n            // If we're currently in evaluation phase, check if remaining players have finished evaluation.\r\n            if (this.state.currentPhase === GamePhase.evaluateRound && playersThatFinishedEvaluation.size === allPlayers.size) {\r\n                this.processEvaluationsAndStartNextRoundOrFinishGame();\r\n            }\r\n        }\r\n    }\r\n\r\n    private sendDataForCurrentGame = (requestingPlayerId: string) => {\r\n        const { allPlayers, currentPhase, currentRound, currentRoundEvaluation, gameRounds } = this.state;\r\n        const sortedPlayers = getPlayersInAlphabeticalOrder(allPlayers);\r\n        const compressedGameRoundEvaluation = currentPhase === GamePhase.evaluateRound\r\n            ? compressGameRoundEvaluation(currentRoundEvaluation, sortedPlayers) : [];\r\n        const compressedMarkedAsCreativeFlags = currentPhase === GamePhase.evaluateRound\r\n            ? compressMarkedAsCreativeFlags(gameRounds[currentRound - 1], sortedPlayers) : [];\r\n        const message = new PubNubDataForCurrentGameMessage({\r\n            compressedGameRoundEvaluation,\r\n            compressedMarkedAsCreativeFlags,\r\n            currentPhase,\r\n            currentRound,\r\n            playersThatFinishedEvaluation: convertMapToCollection<boolean>(this.state.playersThatFinishedEvaluation),\r\n            requestingPlayerId,\r\n            sortedPlayers\r\n        });\r\n        this.sendMessage(message.toPubNubMessage());\r\n    }\r\n\r\n    /**\r\n     * This method is called when the PubNub message 'dataForCurrentGame' is received.\r\n     */\r\n    private restoreDataForCurrentGame = (payload: PubNubDataForCurrentGameMessagePayload) => {\r\n        // Only process the information and update state if the message was meant for this user.\r\n        if (this.props.playerInfo.id !== payload.requestingPlayerId) { return; }\r\n\r\n        const gameConfig = getRunningGameConfigFromLocalStorage();\r\n        // If we're in the evaluation phase, then we also need to restore the data for the current round.\r\n        // Otherwise we only need to restore the data of the finished rounds.\r\n        const numberOfRoundsToRestore = payload.currentPhase === GamePhase.evaluateRound ? payload.currentRound : payload.currentRound - 1;\r\n        const gameRounds = restoreGameRoundsOfRunningGameFromLocalStorage(numberOfRoundsToRestore);\r\n        if (gameConfig && gameRounds.length === numberOfRoundsToRestore) {\r\n            const allPlayers = new Map<string, PlayerInfo>();\r\n            payload.sortedPlayers.forEach(player => allPlayers.set(player.id, player));\r\n            let currentRoundEvaluation: GameRoundEvaluation;\r\n            // If we are in evaluation phase, then we received the current evaluations and the\r\n            // \"marked as very creative\" data, which we need to apply to the player inputs.\r\n            if (payload.currentPhase === GamePhase.evaluateRound) {\r\n                const round = gameRounds[payload.currentRound - 1];\r\n                currentRoundEvaluation = decompressGameRoundEvaluation(payload.compressedGameRoundEvaluation, payload.sortedPlayers);\r\n                setPointsAndValidity(gameConfig.scoringOptions, currentRoundEvaluation, getMinNumberOfInvalids(allPlayers.size), round);\r\n                applyMarkedAsCreativeFlags(payload.compressedMarkedAsCreativeFlags, payload.sortedPlayers, round);\r\n            } else {\r\n                currentRoundEvaluation = createGameRoundEvaluation(allPlayers, gameConfig.categories);\r\n            }\r\n            this.setState({\r\n                allPlayers,\r\n                currentPhase: payload.currentPhase,\r\n                currentRound: payload.currentRound,\r\n                currentRoundEvaluation,\r\n                currentRoundInputs: getEmptyRoundInputs(gameConfig.categories.length),\r\n                gameConfig,\r\n                gameRounds,\r\n                playersThatFinishedEvaluation: convertCollectionToMap<boolean>(payload.playersThatFinishedEvaluation),\r\n                showLoadingScreen: false\r\n            });\r\n        } else {\r\n            console.log('Error: Can\\'t restore game session because data is missing in local storage!');\r\n            this.navigateToDashboard();\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): PlayGamePropsFromStore => {\r\n    return {\r\n        gameConfig: state.gameConfig,\r\n        gameId: state.gameId,\r\n        isRejoiningGame: state.isRejoiningGame,\r\n        playerInfo: state.playerInfo as PlayerInfo\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): PlayGameDispatchProps => {\r\n    return {\r\n        onSetDataOfFinishedGame: (payload: SetDataOfFinishedGamePayload) => dispatch(setDataOfFinishedGame(payload)),\r\n        onResetAppState: () => dispatch(resetAppState())\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);\r\n"],"sourceRoot":""}